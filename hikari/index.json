{"index": [{"r": "hikari.messages", "u": 1, "d": "Application and entities that are used to describe messages on Discord."}, {"r": "hikari.messages.MessageType", "u": 1, "d": "The type of a message."}, {"r": "hikari.messages.MessageType.name", "u": 1, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.messages.MessageType.value", "u": 1, "d": "Return the value of the enum member."}, {"r": "hikari.messages.MessageType.DEFAULT", "u": 1, "d": "A normal message."}, {"r": "hikari.messages.MessageType.RECIPIENT_ADD", "u": 1, "d": "A message to denote a new recipient in a group."}, {"r": "hikari.messages.MessageType.RECIPIENT_REMOVE", "u": 1, "d": "A message to denote that a recipient left the group."}, {"r": "hikari.messages.MessageType.CALL", "u": 1, "d": "A message to denote a VoIP call."}, {"r": "hikari.messages.MessageType.CHANNEL_NAME_CHANGE", "u": 1, "d": "A message to denote that the name of a channel changed."}, {"r": "hikari.messages.MessageType.CHANNEL_ICON_CHANGE", "u": 1, "d": "A message to denote that the icon of a channel changed."}, {"r": "hikari.messages.MessageType.CHANNEL_PINNED_MESSAGE", "u": 1, "d": "A message to denote that a message was pinned."}, {"r": "hikari.messages.MessageType.GUILD_MEMBER_JOIN", "u": 1, "d": "A message to denote that a member joined the guild."}, {"r": "hikari.messages.MessageType.USER_PREMIUM_GUILD_SUBSCRIPTION", "u": 1, "d": "A message to denote a Nitro subscription."}, {"r": "hikari.messages.MessageType.USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1", "u": 1, "d": "A message to denote a tier 1 Nitro subscription."}, {"r": "hikari.messages.MessageType.USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2", "u": 1, "d": "A message to denote a tier 2 Nitro subscription."}, {"r": "hikari.messages.MessageType.USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3", "u": 1, "d": "A message to denote a tier 3 Nitro subscription."}, {"r": "hikari.messages.MessageType.CHANNEL_FOLLOW_ADD", "u": 1, "d": "Channel follow add."}, {"r": "hikari.messages.MessageType.REPLY", "u": 1, "d": "A message that replies to another message."}, {"r": "hikari.messages.MessageFlag", "u": 1, "d": "Additional flags for message options."}, {"r": "hikari.messages.MessageFlag.name", "u": 1, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.messages.MessageFlag.value", "u": 1, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.messages.MessageFlag.all", "u": 1, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.messages.MessageFlag.any", "u": 1, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.messages.MessageFlag.difference", "u": 1, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.messages.MessageFlag.intersection", "u": 1, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.messages.MessageFlag.invert", "u": 1, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.messages.MessageFlag.is_disjoint", "u": 1, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.messages.MessageFlag.is_subset", "u": 1, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.messages.MessageFlag.is_superset", "u": 1, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.messages.MessageFlag.none", "u": 1, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.messages.MessageFlag.split", "u": 1, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.messages.MessageFlag.symmetric_difference", "u": 1, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.messages.MessageFlag.union", "u": 1, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.messages.MessageFlag.isdisjoint", "u": 1, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.messages.MessageFlag.issubset", "u": 1, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.messages.MessageFlag.issuperset", "u": 1, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.messages.MessageFlag.symmetricdifference", "u": 1, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.messages.MessageFlag.NONE", "u": 1, "d": "None"}, {"r": "hikari.messages.MessageFlag.CROSSPOSTED", "u": 1, "d": "This message has been published to subscribed channels via channel following."}, {"r": "hikari.messages.MessageFlag.IS_CROSSPOST", "u": 1, "d": "This message originated from a message in another channel via channel following."}, {"r": "hikari.messages.MessageFlag.SUPPRESS_EMBEDS", "u": 1, "d": "Any embeds on this message should be omitted when serializing the message."}, {"r": "hikari.messages.MessageFlag.SOURCE_MESSAGE_DELETED", "u": 1, "d": "The message this crosspost originated from was deleted via channel following."}, {"r": "hikari.messages.MessageFlag.URGENT", "u": 1, "d": "This message came from the urgent message system."}, {"r": "hikari.messages.MessageActivityType", "u": 1, "d": "The type of a rich presence message activity."}, {"r": "hikari.messages.MessageActivityType.name", "u": 1, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.messages.MessageActivityType.value", "u": 1, "d": "Return the value of the enum member."}, {"r": "hikari.messages.MessageActivityType.NONE", "u": 1, "d": "No activity."}, {"r": "hikari.messages.MessageActivityType.JOIN", "u": 1, "d": "Join an activity."}, {"r": "hikari.messages.MessageActivityType.SPECTATE", "u": 1, "d": "Spectating something."}, {"r": "hikari.messages.MessageActivityType.LISTEN", "u": 1, "d": "Listening to something."}, {"r": "hikari.messages.MessageActivityType.JOIN_REQUEST", "u": 1, "d": "Request to join an activity."}, {"r": "hikari.messages.Attachment", "u": 1, "d": "Represents a file attached to a message. You can use this object in the same way as a  hikari.files.WebResource , by passing it as an attached file when creating a message, etc. Method generated by attrs for class Attachment."}, {"r": "hikari.messages.Attachment.filename", "u": 1, "d": "The name of the file."}, {"r": "hikari.messages.Attachment.height", "u": 1, "d": "The height of the image (if the file is an image)."}, {"r": "hikari.messages.Attachment.id", "u": 1, "d": "The ID of this entity."}, {"r": "hikari.messages.Attachment.proxy_url", "u": 1, "d": "The proxied URL of file."}, {"r": "hikari.messages.Attachment.size", "u": 1, "d": "The size of the file in bytes."}, {"r": "hikari.messages.Attachment.url", "u": 1, "d": "The source URL of file."}, {"r": "hikari.messages.Attachment.width", "u": 1, "d": "The width of the image (if the file is an image)."}, {"r": "hikari.messages.Attachment.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.messages.Attachment.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.messages.Attachment.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.messages.Attachment.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.messages.Reaction", "u": 1, "d": "Represents a reaction in a message. Method generated by attrs for class Reaction."}, {"r": "hikari.messages.Reaction.count", "u": 1, "d": "The number of times the emoji has been used to react."}, {"r": "hikari.messages.Reaction.emoji", "u": 1, "d": "The emoji used to react."}, {"r": "hikari.messages.Reaction.is_me", "u": 1, "d": "Whether the current user reacted using this emoji."}, {"r": "hikari.messages.MessageActivity", "u": 1, "d": "Represents the activity of a rich presence-enabled message. Method generated by attrs for class MessageActivity."}, {"r": "hikari.messages.MessageActivity.party_id", "u": 1, "d": "The party ID of the message activity."}, {"r": "hikari.messages.MessageActivity.type", "u": 1, "d": "The type of message activity."}, {"r": "hikari.messages.Mentions", "u": 1, "d": "Description of mentions that exist in the message. Method generated by attrs for class Mentions."}, {"r": "hikari.messages.Mentions.channels_ids", "u": 1, "d": ""}, {"r": "hikari.messages.Mentions.user_ids", "u": 1, "d": ""}, {"r": "hikari.messages.Mentions.members", "u": 1, "d": "Discover any cached members notified by this message. If this message was sent in a DM, this will always be empty.  ! warning This will only return valid results on gateway events. For REST endpoints, this will potentially be empty. This is a limitation of Discord's API, as they do not consistently notify of the ID of the guild a message was sent in.  ! note If you are using a stateless application such as a stateless bot or a REST-only client, this will always be empty. Furthermore, if you are running a stateful bot and have the GUILD_MEMBERS intent disabled, this will also be empty. Members that are not cached will not appear in this mapping. This means that there is a very small chance that some users provided in  notified_users may not be present here."}, {"r": "hikari.messages.Mentions.roles", "u": 1, "d": "Attempt to look up the roles that are notified by this message. If this message was sent in a DM, this will always be empty.  ! warning This will only return valid results on gateway events. For REST endpoints, this will potentially be empty. This is a limitation of Discord's API, as they do not consistently notify of the ID of the guild a message was sent in.  ! note If you are using a stateless application such as a stateless bot or a REST-only client, this will always be empty. Furthermore, if you are running a stateful bot and have the GUILD intent disabled, this will also be empty. Roles that are not cached will not appear in this mapping. This means that there is a very small chance that some role IDs provided in  notifies_role_ids may not be present here. This is a limitation of Discord, again."}, {"r": "hikari.messages.Mentions.channels", "u": 1, "d": "Channel mentions that reference channels in the target crosspost's guild. If the message is not crossposted, this will always be empty."}, {"r": "hikari.messages.Mentions.everyone", "u": 1, "d": "Whether the message notifies using  @everyone or  @here ."}, {"r": "hikari.messages.Mentions.role_ids", "u": 1, "d": "IDs of roles that were notified by their mention in the message."}, {"r": "hikari.messages.Mentions.users", "u": 1, "d": "Users who were notified by their mention in the message."}, {"r": "hikari.messages.MessageReference", "u": 1, "d": "Represents information about a referenced message. This will be included in crossposted messages, channel follow add message, pin add messages and replies. Method generated by attrs for class MessageReference."}, {"r": "hikari.messages.MessageReference.app", "u": 1, "d": "The client application that models may use for procedures."}, {"r": "hikari.messages.MessageReference.channel_id", "u": 1, "d": "The ID of the channel that the original message originated from."}, {"r": "hikari.messages.MessageReference.guild_id", "u": 1, "d": "The ID of the guild that the message originated from. This will be  builtins.None when the original message is not from a guild."}, {"r": "hikari.messages.MessageReference.id", "u": 1, "d": "The ID of the original message. This will be  builtins.None for channel follow add messages. This may point to a deleted message."}, {"r": "hikari.messages.PartialMessage", "u": 1, "d": "A message representation containing partially populated information. This contains arbitrary fields that may be updated in a  MessageUpdateEvent , but for all other purposes should be treated as being optionally specified.  ! warning All fields on this model except  channel and  id may be set to  hikari.undefined.UNDEFINED (a singleton) if we have not received information about their state from Discord alongside field nullability. Method generated by attrs for class PartialMessage."}, {"r": "hikari.messages.PartialMessage.guild_id", "u": 1, "d": "ID of the guild that the message was sent in. This will not be present on REST API responses if the application is stateless or missing the  GUILDS intent."}, {"r": "hikari.messages.PartialMessage.link", "u": 1, "d": "Jump link to the message. Returns    - builtins.str The jump link to the message."}, {"r": "hikari.messages.PartialMessage.fetch_channel", "u": 1, "d": "Fetch the channel this message was created in. Returns    - hikari.channels.PartialChannel The object of the channel this message belongs to. Raises    hikari.errors.BadRequestError If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.ForbiddenError If you don't have access to the channel this message belongs to. hikari.errors.NotFoundError If the channel this message was created in does not exist.", "f": 1}, {"r": "hikari.messages.PartialMessage.edit", "u": 1, "d": "Edit an existing message in a given channel. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] The message content to update with. If  hikari.undefined.UNDEFINED , then the content will not be changed. If  builtins.None , then the content will be removed. Any other value will be cast to a  builtins.str before sending. If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] The embed to set on the message. If  hikari.undefined.UNDEFINED , the previous embed if present is not changed. If this is  builtins.None , then the embed is removed if present. Otherwise, the new embed value that was provided will be used as the replacement. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] Sanitation for  @everyone mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , then  @everyone / @here mentions in the message content will show up as mentioning everyone that can view the chat. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if this is not a reply message. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool Sanitation for user mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid user mentions will behave as mentions. If  builtins.False , all valid user mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake user IDs, or  hikari.users.PartialUser -derived objects. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool Sanitation for role mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid role mentions will behave as mentions. If  builtins.False , all valid role mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake role IDs, or  hikari.guilds.PartialRole -derived objects. flags : hikari.undefined.UndefinedOr[hikari.messages.MessageFlag] Optional flags to set on the message. If  hikari.undefined.UNDEFINED , then nothing is changed. Note that some flags may not be able to be set. Currently the only flags that can be set are  NONE and  SUPPRESS_EMBEDS . If you have  MANAGE_MESSAGES permissions, you can use this call to suppress embeds on another user's message.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this,  delete the message and re-send it.  ! warning If the message was not sent by your user, the only parameter you may provide to this call is the  flags parameter. Anything else will result in a  hikari.errors.ForbiddenError being raised. Returns    - hikari.messages.Message The edited message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel; if you try to change the contents of another user's message; or if you try to edit the flags on another user's message without the permissions to manage messages. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.messages.PartialMessage.respond", "u": 1, "d": "Create a message in the channel this message belongs to. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be TTS (Text To Speech). nonce : hikari.undefined.UndefinedOr[builtins.str] If provided, a nonce that can be used for optimistic message sending. reply : typing.Union[hikari.undefined.UndefinedType, hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage], builtins.bool] If provided and  builtins.True , reply to this message. If provided and not  builtins.bool , the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request. builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.messages.PartialMessage.delete", "u": 1, "d": "Delete this message. Raises    hikari.errors.NotFoundError If the channel this message was created in is not found, or if the message has already been deleted. hikari.errors.ForbiddenError If you lack the permissions to delete the message.", "f": 1}, {"r": "hikari.messages.PartialMessage.add_reaction", "u": 1, "d": "Add a reaction to this message. Parameters      emoji : hikari.emojis.Emojiish The emoji to add. This may be a unicode emoji string, the  name:id of a custom emoji, or a subclass of  hikari.emojis.Emoji . Note that if the emoji is an  hikari.emojis.CustomEmoji and is not from a guild the bot user is in, then this will fail. Examples        Using a unicode emoji. await message.add_reaction(\"\ud83d\udc4c\")  Using a unicode emoji name. await message.add_reaction(\"\\N{OK HAND SIGN}\")  Using the  name:id format. await message.add_reaction(\"rooAYAYA:705837374319493284\")  Using a raw custom emoji mention (unanimated and animated) await message.add_reaction(\" \") await message.add_reaction(\" \")  Using an Emoji-derived object. await message.add_reaction(some_emoji_object)   Raises    hikari.errors.BadRequestError If the emoji is invalid, unknown, or formatted incorrectly. hikari.errors.ForbiddenError If this is the first reaction using this specific emoji on this message and you lack the  ADD_REACTIONS permission. If you lack  READ_MESSAGE_HISTORY , this may also raise this error. hikari.errors.NotFoundError If the channel or message is not found, or if the emoji is not found. This will also occur if you try to add an emoji from a guild you are not part of if no one else has previously reacted with the same emoji.", "f": 1}, {"r": "hikari.messages.PartialMessage.remove_reaction", "u": 1, "d": "Remove a reaction from this message. Parameters      emoji : hikari.emojis.Emojiish The emoji to remove. Other Parameters         user : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser The user of the reaction to remove. If unspecified, then the bot's reaction is removed instead. Examples      Using a unicode emoji and removing the bot's reaction from this  reaction. await message.remove_reaction(\"\\N{OK HAND SIGN}\")  Using a unicode emoji and removing a specific user from this  reaction. await message.remove_reaction(\"\\N{OK HAND SIGN}\", some_user)  Using a raw custom emoji mention (unanimated and animated) await message.remove_reaction(\" \", some_user) await message.remove_reaction(\" \", some_user)  Using an Emoji object and removing a specific user from this  reaction. await message.remove_reaction(some_emoji_object, some_user) Raises    hikari.errors.BadRequestError If the emoji is invalid, unknown, or formatted incorrectly. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.ForbiddenError If this is the first reaction using this specific emoji on this message and you lack the  ADD_REACTIONS permission. If you lack  READ_MESSAGE_HISTORY , this may also raise this error. If you remove the reaction of another user without  MANAGE_MESSAGES , this will be raised. hikari.errors.NotFoundError If the channel or message is not found, or if the emoji is not found.", "f": 1}, {"r": "hikari.messages.PartialMessage.remove_all_reactions", "u": 1, "d": "Remove all users' reactions for a specific emoji from the message. Other Parameters         emoji : hikari.undefined.UndefinedOr[hikari.emojis.Emojiish] The emoji to remove all reactions for. If not specified, then all emojis are removed. Example      Using a unicode emoji and removing all \ud83d\udc4c reacts from the message.  reaction. await message.remove_all_reactions(\"\\N{OK HAND SIGN}\")  Using a raw custom emoji mention (unanimated and animated) await message.remove_all_reactions(\" \") await message.remove_all_reactions(\" \")  Removing all reactions entirely. await message.remove_all_reactions() Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission, or the permission to view the channel hikari.errors.NotFoundError If the channel or message is not found, or if the emoji is not found. hikari.errors.BadRequestError If the emoji is invalid, unknown, or formatted incorrectly. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer.", "f": 1}, {"r": "hikari.messages.PartialMessage.activity", "u": 1, "d": "The message activity."}, {"r": "hikari.messages.PartialMessage.app", "u": 1, "d": "The client application that models may use for procedures."}, {"r": "hikari.messages.PartialMessage.application", "u": 1, "d": "The message application."}, {"r": "hikari.messages.PartialMessage.attachments", "u": 1, "d": "The message attachments."}, {"r": "hikari.messages.PartialMessage.author", "u": 1, "d": "The author of this message. This will be  builtins.None in some cases such as when Discord updates a message with an embed URL preview."}, {"r": "hikari.messages.PartialMessage.channel_id", "u": 1, "d": "The ID of the channel that the message was sent in."}, {"r": "hikari.messages.PartialMessage.content", "u": 1, "d": "The content of the message."}, {"r": "hikari.messages.PartialMessage.edited_timestamp", "u": 1, "d": "The timestamp that the message was last edited at. Will be  builtins.None if the message wasn't ever edited, or  undefined if the info is not available."}, {"r": "hikari.messages.PartialMessage.embeds", "u": 1, "d": "The message embeds."}, {"r": "hikari.messages.PartialMessage.flags", "u": 1, "d": "The message flags."}, {"r": "hikari.messages.PartialMessage.id", "u": 1, "d": "The ID of this entity."}, {"r": "hikari.messages.PartialMessage.is_pinned", "u": 1, "d": "Whether the message is pinned."}, {"r": "hikari.messages.PartialMessage.is_tts", "u": 1, "d": "Whether the message is a TTS message."}, {"r": "hikari.messages.PartialMessage.member", "u": 1, "d": "The member for the author who created the message. If the message is not in a guild, this will be  builtins.None . This will also be  builtins.None in some cases such as when Discord updates a message with an embed URL preview or in messages fetched from the REST API."}, {"r": "hikari.messages.PartialMessage.mentions", "u": 1, "d": "Description of who is mentioned in a message.  ! warning If the contents have not mutated and this is a message update event, some fields that are not affected may be empty instead. This is a Discord limitation."}, {"r": "hikari.messages.PartialMessage.message_reference", "u": 1, "d": "The message reference data."}, {"r": "hikari.messages.PartialMessage.nonce", "u": 1, "d": "The message nonce. This is a string used for validating a message was sent."}, {"r": "hikari.messages.PartialMessage.reactions", "u": 1, "d": "The message reactions."}, {"r": "hikari.messages.PartialMessage.referenced_message", "u": 1, "d": "The message that was replied to. If  type is  MessageType.REPLY and  hikari.undefined.UNDEFINED , Discord's backend didn't attempt to fetch the message, so the status is unknown. If  type is  MessageType.REPLY and  builtins.None , the message was deleted."}, {"r": "hikari.messages.PartialMessage.stickers", "u": 1, "d": "The stickers sent with this message."}, {"r": "hikari.messages.PartialMessage.timestamp", "u": 1, "d": "The timestamp that the message was sent at."}, {"r": "hikari.messages.PartialMessage.type", "u": 1, "d": "The message type."}, {"r": "hikari.messages.PartialMessage.webhook_id", "u": 1, "d": "If the message was generated by a webhook, the webhook's ID."}, {"r": "hikari.messages.PartialMessage.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.messages.Message", "u": 1, "d": "Represents a message with all known details. Method generated by attrs for class Message."}, {"r": "hikari.messages.Message.author", "u": 1, "d": "The author of this message."}, {"r": "hikari.messages.Message.member", "u": 1, "d": "The member properties for the message's author."}, {"r": "hikari.messages.Message.content", "u": 1, "d": "The content of the message."}, {"r": "hikari.messages.Message.timestamp", "u": 1, "d": "The timestamp that the message was sent at."}, {"r": "hikari.messages.Message.edited_timestamp", "u": 1, "d": "The timestamp that the message was last edited at. Will be  builtins.None if it wasn't ever edited."}, {"r": "hikari.messages.Message.is_tts", "u": 1, "d": "Whether the message is a TTS message."}, {"r": "hikari.messages.Message.mentions", "u": 1, "d": "Who is mentioned in a message."}, {"r": "hikari.messages.Message.attachments", "u": 1, "d": "The message attachments."}, {"r": "hikari.messages.Message.embeds", "u": 1, "d": "The message embeds."}, {"r": "hikari.messages.Message.reactions", "u": 1, "d": "The message reactions."}, {"r": "hikari.messages.Message.is_pinned", "u": 1, "d": "Whether the message is pinned."}, {"r": "hikari.messages.Message.webhook_id", "u": 1, "d": "If the message was generated by a webhook, the webhook's id."}, {"r": "hikari.messages.Message.type", "u": 1, "d": "The message type."}, {"r": "hikari.messages.Message.activity", "u": 1, "d": "The message activity."}, {"r": "hikari.messages.Message.application", "u": 1, "d": "The message application."}, {"r": "hikari.messages.Message.message_reference", "u": 1, "d": "The message reference data."}, {"r": "hikari.messages.Message.flags", "u": 1, "d": "The message flags."}, {"r": "hikari.messages.Message.stickers", "u": 1, "d": "The stickers sent with this message."}, {"r": "hikari.messages.Message.nonce", "u": 1, "d": "The message nonce. This is a string used for validating a message was sent."}, {"r": "hikari.messages.Message.guild_id", "u": 1, "d": "ID of the guild that the message was sent in. This will not be present on REST API responses if the application is stateless or missing the  GUILDS intent."}, {"r": "hikari.messages.Message.link", "u": 1, "d": "Jump link to the message. Returns    - builtins.str The jump link to the message."}, {"r": "hikari.messages.Message.fetch_channel", "u": 1, "d": "Fetch the channel this message was created in. Returns    - hikari.channels.PartialChannel The object of the channel this message belongs to. Raises    hikari.errors.BadRequestError If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.ForbiddenError If you don't have access to the channel this message belongs to. hikari.errors.NotFoundError If the channel this message was created in does not exist.", "f": 1}, {"r": "hikari.messages.Message.edit", "u": 1, "d": "Edit an existing message in a given channel. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] The message content to update with. If  hikari.undefined.UNDEFINED , then the content will not be changed. If  builtins.None , then the content will be removed. Any other value will be cast to a  builtins.str before sending. If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] The embed to set on the message. If  hikari.undefined.UNDEFINED , the previous embed if present is not changed. If this is  builtins.None , then the embed is removed if present. Otherwise, the new embed value that was provided will be used as the replacement. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] Sanitation for  @everyone mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , then  @everyone / @here mentions in the message content will show up as mentioning everyone that can view the chat. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if this is not a reply message. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool Sanitation for user mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid user mentions will behave as mentions. If  builtins.False , all valid user mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake user IDs, or  hikari.users.PartialUser -derived objects. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool Sanitation for role mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid role mentions will behave as mentions. If  builtins.False , all valid role mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake role IDs, or  hikari.guilds.PartialRole -derived objects. flags : hikari.undefined.UndefinedOr[hikari.messages.MessageFlag] Optional flags to set on the message. If  hikari.undefined.UNDEFINED , then nothing is changed. Note that some flags may not be able to be set. Currently the only flags that can be set are  NONE and  SUPPRESS_EMBEDS . If you have  MANAGE_MESSAGES permissions, you can use this call to suppress embeds on another user's message.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this,  delete the message and re-send it.  ! warning If the message was not sent by your user, the only parameter you may provide to this call is the  flags parameter. Anything else will result in a  hikari.errors.ForbiddenError being raised. Returns    - hikari.messages.Message The edited message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel; if you try to change the contents of another user's message; or if you try to edit the flags on another user's message without the permissions to manage messages. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.messages.Message.respond", "u": 1, "d": "Create a message in the channel this message belongs to. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be TTS (Text To Speech). nonce : hikari.undefined.UndefinedOr[builtins.str] If provided, a nonce that can be used for optimistic message sending. reply : typing.Union[hikari.undefined.UndefinedType, hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage], builtins.bool] If provided and  builtins.True , reply to this message. If provided and not  builtins.bool , the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request. builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.messages.Message.delete", "u": 1, "d": "Delete this message. Raises    hikari.errors.NotFoundError If the channel this message was created in is not found, or if the message has already been deleted. hikari.errors.ForbiddenError If you lack the permissions to delete the message.", "f": 1}, {"r": "hikari.messages.Message.add_reaction", "u": 1, "d": "Add a reaction to this message. Parameters      emoji : hikari.emojis.Emojiish The emoji to add. This may be a unicode emoji string, the  name:id of a custom emoji, or a subclass of  hikari.emojis.Emoji . Note that if the emoji is an  hikari.emojis.CustomEmoji and is not from a guild the bot user is in, then this will fail. Examples        Using a unicode emoji. await message.add_reaction(\"\ud83d\udc4c\")  Using a unicode emoji name. await message.add_reaction(\"\\N{OK HAND SIGN}\")  Using the  name:id format. await message.add_reaction(\"rooAYAYA:705837374319493284\")  Using a raw custom emoji mention (unanimated and animated) await message.add_reaction(\" \") await message.add_reaction(\" \")  Using an Emoji-derived object. await message.add_reaction(some_emoji_object)   Raises    hikari.errors.BadRequestError If the emoji is invalid, unknown, or formatted incorrectly. hikari.errors.ForbiddenError If this is the first reaction using this specific emoji on this message and you lack the  ADD_REACTIONS permission. If you lack  READ_MESSAGE_HISTORY , this may also raise this error. hikari.errors.NotFoundError If the channel or message is not found, or if the emoji is not found. This will also occur if you try to add an emoji from a guild you are not part of if no one else has previously reacted with the same emoji.", "f": 1}, {"r": "hikari.messages.Message.remove_reaction", "u": 1, "d": "Remove a reaction from this message. Parameters      emoji : hikari.emojis.Emojiish The emoji to remove. Other Parameters         user : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser The user of the reaction to remove. If unspecified, then the bot's reaction is removed instead. Examples      Using a unicode emoji and removing the bot's reaction from this  reaction. await message.remove_reaction(\"\\N{OK HAND SIGN}\")  Using a unicode emoji and removing a specific user from this  reaction. await message.remove_reaction(\"\\N{OK HAND SIGN}\", some_user)  Using a raw custom emoji mention (unanimated and animated) await message.remove_reaction(\" \", some_user) await message.remove_reaction(\" \", some_user)  Using an Emoji object and removing a specific user from this  reaction. await message.remove_reaction(some_emoji_object, some_user) Raises    hikari.errors.BadRequestError If the emoji is invalid, unknown, or formatted incorrectly. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.ForbiddenError If this is the first reaction using this specific emoji on this message and you lack the  ADD_REACTIONS permission. If you lack  READ_MESSAGE_HISTORY , this may also raise this error. If you remove the reaction of another user without  MANAGE_MESSAGES , this will be raised. hikari.errors.NotFoundError If the channel or message is not found, or if the emoji is not found.", "f": 1}, {"r": "hikari.messages.Message.remove_all_reactions", "u": 1, "d": "Remove all users' reactions for a specific emoji from the message. Other Parameters         emoji : hikari.undefined.UndefinedOr[hikari.emojis.Emojiish] The emoji to remove all reactions for. If not specified, then all emojis are removed. Example      Using a unicode emoji and removing all \ud83d\udc4c reacts from the message.  reaction. await message.remove_all_reactions(\"\\N{OK HAND SIGN}\")  Using a raw custom emoji mention (unanimated and animated) await message.remove_all_reactions(\" \") await message.remove_all_reactions(\" \")  Removing all reactions entirely. await message.remove_all_reactions() Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission, or the permission to view the channel hikari.errors.NotFoundError If the channel or message is not found, or if the emoji is not found. hikari.errors.BadRequestError If the emoji is invalid, unknown, or formatted incorrectly. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer.", "f": 1}, {"r": "hikari.messages.Message.app", "u": 1, "d": "The client application that models may use for procedures."}, {"r": "hikari.messages.Message.channel_id", "u": 1, "d": "The ID of the channel that the message was sent in."}, {"r": "hikari.messages.Message.id", "u": 1, "d": "The ID of this entity."}, {"r": "hikari.messages.Message.referenced_message", "u": 1, "d": "The message that was replied to. If  type is  MessageType.REPLY and  hikari.undefined.UNDEFINED , Discord's backend didn't attempt to fetch the message, so the status is unknown. If  type is  MessageType.REPLY and  builtins.None , the message was deleted."}, {"r": "hikari.messages.Message.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.messages.StickerFormatType", "u": 1, "d": "The formats types of a sticker's asset."}, {"r": "hikari.messages.StickerFormatType.name", "u": 1, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.messages.StickerFormatType.value", "u": 1, "d": "Return the value of the enum member."}, {"r": "hikari.messages.StickerFormatType.PNG", "u": 1, "d": "A PNG sticker."}, {"r": "hikari.messages.StickerFormatType.APNG", "u": 1, "d": "A animated PNG sticker."}, {"r": "hikari.messages.StickerFormatType.LOTTIE", "u": 1, "d": "A lottie sticker."}, {"r": "hikari.messages.Sticker", "u": 1, "d": "Represents the stickers found attached to messages on Discord. Method generated by attrs for class Sticker."}, {"r": "hikari.messages.Sticker.asset_hash", "u": 1, "d": "The hash of this sticker's asset.  ! note The CDN endpoint for this hash is currently undocumented."}, {"r": "hikari.messages.Sticker.description", "u": 1, "d": "The description of this sticker."}, {"r": "hikari.messages.Sticker.format_type", "u": 1, "d": "The format of this sticker's asset."}, {"r": "hikari.messages.Sticker.id", "u": 1, "d": "The ID of this entity."}, {"r": "hikari.messages.Sticker.name", "u": 1, "d": "The name of this sticker."}, {"r": "hikari.messages.Sticker.pack_id", "u": 1, "d": "ID of the package this sticker belongs to."}, {"r": "hikari.messages.Sticker.preview_asset_hash", "u": 1, "d": "The hash of this sticker's preview asset.  ! note The CDN endpoint for this hash is currently undocumented."}, {"r": "hikari.messages.Sticker.tags", "u": 1, "d": "A sequence of this sticker's tags."}, {"r": "hikari.messages.Sticker.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.colours", "u": 4, "d": "Alias for the  hikari.colors module."}, {"r": "hikari.colours.Color", "u": 4, "d": "Representation of a color. This value is immutable. This is a specialization of  builtins.int which provides alternative overrides for common methods and color system conversions. This currently supports:  RGB  RGB (float)  3-digit hex codes (e.g. 0xF1A  web safe)  6-digit hex codes (e.g. 0xFF11AA)  3-digit RGB strings (e.g.  1A2  web safe)  6-digit RGB hash strings (e.g.  1A2B3C) Examples     Examples of conversions to given formats include:   >>> c = Color(0xFF051A) Color(r=0xff, g=0x5, b=0x1a) >>> hex(c) 0xff051a >>> c.hex_code  FF051A >>> str(c)  FF051A >>> int(c) 16712986 >>> c.rgb (255, 5, 26) >>> c.rgb_float (1.0, 0.0196078431372549, 0.10196078431372549)   Alternatively, if you have an arbitrary input in one of the above formats that you wish to become a color, you can use  Color.of on the class itself to automatically attempt to resolve the color:   >>> Color.of(0xFF051A) Color(r=0xff, g=0x5, b=0x1a) >>> Color.of(16712986) Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of 255, 5, 26 Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of(255, 5, 26) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of([0xFF, 0x5, 0x1a]) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of(\" 1a2b3c\") Color(r=0x1a, g=0x2b, b=0x3c) >>> c = Color.of(\" 1AB\") Color(r=0x11, g=0xaa, b=0xbb) >>> c = Color.of 1.0, 0.0196078431372549, 0.10196078431372549 Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of([1.0, 0.0196078431372549, 0.10196078431372549]) Color(r=0xff, g=0x5, b=0x1a)   Examples of initialization of Color objects from given formats include:   >>> c = Color(16712986) Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.from_rgb(255, 5, 26) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.from_hex_code(\" 1a2b3c\") Color(r=0x1a, g=0x2b, b=0x3c) >>> c = Color.from_hex_code(\" 1AB\") Color(r=0x11, g=0xaa, b=0xbb) >>> c = Color.from_rgb_float(1.0, 0.0196078431372549, 0.10196078431372549) Color(r=0xff, g=0x5, b=0x1a)  "}, {"r": "hikari.colours.Color.rgb", "u": 4, "d": "The RGB representation of this Color. Represented as a tuple of R, G, B. Each value is in the range [0, 0xFF]. Example    -  (123, 234, 47) "}, {"r": "hikari.colours.Color.rgb_float", "u": 4, "d": "Return the floating-point RGB representation of this Color. Represented as a tuple of R, G, B. Each value is in the range [0, 1]. Example    -  (0.1, 0.2, 0.76) "}, {"r": "hikari.colours.Color.hex_code", "u": 4, "d": "Six-digit hexadecimal color code for this Color. This is prepended with a  symbol, and will be in upper case. Example    -  1A2B3C "}, {"r": "hikari.colours.Color.raw_hex_code", "u": 4, "d": "Raw hex code. Example    -  1A2B3C "}, {"r": "hikari.colours.Color.is_web_safe", "u": 4, "d": " builtins.True if the color is web safe,  builtins.False otherwise."}, {"r": "hikari.colours.Color.from_rgb", "u": 4, "d": "Convert the given RGB to a  Color object. Each channel must be withing the range [0, 255] (0x0, 0xFF). Parameters      red : builtins.int Red channel. green : builtins.int Green channel. blue : builtins.int Blue channel. Returns    - Color A Color object. Raises    builtins.ValueError If red, green, or blue are outside the range [0x0, 0xFF].", "f": 1}, {"r": "hikari.colours.Color.from_rgb_float", "u": 4, "d": "Convert the given RGB to a  Color object. The color-space represented values have to be within the range [0, 1]. Parameters      red : builtins.float Red channel. green : builtins.float Green channel. blue : builtins.float Blue channel. Returns    - Color A Color object. Raises    builtins.ValueError If red, green or blue are outside the range [0, 1].", "f": 1}, {"r": "hikari.colours.Color.from_hex_code", "u": 4, "d": "Convert the given hexadecimal color code to a  Color . The inputs may be of the following format (case insensitive):  1a2 ,  1a2 ,  0x1a2 (for web-safe colors), or  1a2b3c ,  1a2b3c ,  0x1a2b3c (for regular 3-byte color-codes). Parameters      hex_code : builtins.str A hexadecimal color code to parse. This may optionally start with a case insensitive  0x or  . Returns    - Color A corresponding Color object. Raises    builtins.ValueError If  hex_code is not a hexadecimal or is a invalid length.", "f": 1}, {"r": "hikari.colours.Color.from_int", "u": 4, "d": "Convert the given  typing.SupportsInt to a  Color . Parameters      integer : typing.SupportsInt The raw color integer. Returns    - Color The Color object.", "f": 1}, {"r": "hikari.colours.Color.from_tuple_string", "u": 4, "d": "Convert a string in a tuple-like format to a  Color . This allows formats that are optionally enclosed by  () ,  {} , or  [] , and contain three floats or ints, either space separated or comma separated. If comma separated, trailing and leading whitespace around each member is truncated. This is provided to allow command frontends to directly pass user input for representing a given colour into this class safely. Examples        Floats \"1.0 1.0 1.0\" \"(1.0 1.0 1.0)\" \"[1.0 1.0 1.0]\" \"{1.0 1.0 1.0}\" \"1.0, 1.0, 1.0\" \"(1.0, 1.0, 1.0)\" \"[1.0, 1.0, 1.0]\" \"{1.0, 1.0, 1.0}\"  Ints \"252 252 252\" \"(252 252 252)\" \"[252 252 252]\" \"{252 252 252}\" \"252, 252, 252\" \"(252, 252, 252)\" \"[252, 252, 252]\" \"{252, 252, 252}\"   Parameters      tuple_str : builtins.str The string to parse. Returns    - Color The parsed colour object. Raises    ValueError If an invalid format is given, or if any values exceed 1.0 for floats or 255 for ints.", "f": 1}, {"r": "hikari.colours.Color.from_bytes", "u": 4, "d": "Convert the bytes to a  Color . Parameters      bytes_ : typing.Iterable[builtins.int] A iterable of int byte values. byteorder : builtins.str The endianess of the value represented by the bytes. Can be  \"big\" endian or  \"little\" endian. signed : builtins.bool Whether the value is signed or unsigned. Returns    - Color The Color object.", "f": 1}, {"r": "hikari.colours.Color.of", "u": 4, "d": "Convert the value to a  Color . This attempts to determine the correct data format based on the information provided. Parameters      value : Colorish A color compatible values. Examples       >>> Color.of(0xFF051A) Color(r=0xff, g=0x5, b=0x1a) >>> Color.of(16712986) Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of 255, 5, 26 Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of([0xFF, 0x5, 0x1a]) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of(\" 1a2b3c\") Color(r=0x1a, g=0x2b, b=0x3c) >>> c = Color.of(\" 1AB\") Color(r=0x11, g=0xaa, b=0xbb) >>> c = Color.of 1.0, 0.0196078431372549, 0.10196078431372549 Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of([1.0, 0.0196078431372549, 0.10196078431372549]) Color(r=0xff, g=0x5, b=0x1a)  Commas and brackets are optional, whitespace is ignored, and these  are compatible with all-ints between 0-255 or all-floats between  0.0 and 1.0 only. >>> c = Color.of(\"5, 22, 33\") Color(r=0x5, g=0x16, b=0x21) >>> c = Color.of(\"(5, 22, 33)\") Color(r=0x5, g=0x16, b=0x21) >>> c = Color.of(\"[5, 22, 33]\") Color(r=0x5, g=0x16, b=0x21) >>> c = Color.of(\"{5, 22, 33}\") Color(r=0x5, g=0x16, b=0x21)   Returns    - Color The Color object.", "f": 1}, {"r": "hikari.colours.Color.to_bytes", "u": 4, "d": "Convert the color code to bytes. Parameters      length : builtins.int The number of bytes to produce. Should be around  3 , but not less. byteorder : builtins.str The endianess of the value represented by the bytes. Can be  \"big\" endian or  \"little\" endian. signed : builtins.bool Whether the value is signed or unsigned. Returns    - builtins.bytes The bytes representation of the Color.", "f": 1}, {"r": "hikari.emojis", "u": 5, "d": "Application and entities that are used to describe emojis on Discord."}, {"r": "hikari.emojis.Emoji", "u": 5, "d": "Base class for all emojis. Any emoji implementation supports being used as a  hikari.files.Resource when uploading an attachment to the API. This is achieved in the same way as using a  hikari.files.WebResource would achieve this. Method generated by attrs for class Emoji."}, {"r": "hikari.emojis.Emoji.name", "u": 5, "d": "Return the generic name/representation for this emoji."}, {"r": "hikari.emojis.Emoji.url", "u": 5, "d": "URL of the emoji image to display in clients."}, {"r": "hikari.emojis.Emoji.url_name", "u": 5, "d": "Name of the part of the emoji to use in requests."}, {"r": "hikari.emojis.Emoji.is_mentionable", "u": 5, "d": "Whether the emoji can be mentioned or not."}, {"r": "hikari.emojis.Emoji.mention", "u": 5, "d": "Mention string to use to mention the emoji with."}, {"r": "hikari.emojis.Emoji.parse", "u": 5, "d": "Parse a given string into an emoji object. Parameters      string : builtins.str The emoji object to parse. Returns    - Emoji The parsed emoji object. This will be a  CustomEmoji if a custom emoji ID or mention, or a  UnicodeEmoji otherwise. Raises    builtins.ValueError If a mention is given that has an invalid format.", "f": 1}, {"r": "hikari.emojis.Emoji.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.emojis.Emoji.filename", "u": 3, "d": "Filename of the resource."}, {"r": "hikari.emojis.Emoji.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.emojis.Emoji.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.emojis.UnicodeEmoji", "u": 5, "d": "Represents a unicode emoji.  ! warning A word of warning if you try to upload this emoji as a file attachment. While this emoji type can be used to upload the Twemoji representations of this emoji as a PNG, this is NOT foolproof. The mapping between Discord's implementation and official Twemoji bindings is very flaky. Responsible implementations relying on this behaviour will be implemented to expect this behaviour in the form of  hikari.errors.NotFoundError exceptions being raised when a mismatch may occur. It is also likely that this will change in the future without notice, so you will likely be relying on flaky behaviour. If this is proven to be too unstable, this functionality will be removed in a future release after a deprecation period. Method generated by attrs for class UnicodeEmoji."}, {"r": "hikari.emojis.UnicodeEmoji.url_name", "u": 5, "d": "Name of the part of the emoji to use in requests."}, {"r": "hikari.emojis.UnicodeEmoji.mention", "u": 5, "d": "Mention string to use to mention the emoji with."}, {"r": "hikari.emojis.UnicodeEmoji.codepoints", "u": 5, "d": "Integer codepoints that make up this emoji, as UTF-8."}, {"r": "hikari.emojis.UnicodeEmoji.filename", "u": 5, "d": "Filename to use if re-uploading this emoji's PNG."}, {"r": "hikari.emojis.UnicodeEmoji.url", "u": 5, "d": "Get the URL of the PNG rendition of this emoji. This will use the official Twitter \"twemoji\" repository to fetch this information, as Discord only stores this in a hashed format that uses SVG files, which is not usually of any use. Since this uses \"twemoji\" directly, the emojis may not directly match what is on Discord if Discord have failed to keep their emoji packs up-to-date with this repository. Example    - https: github.com/twitter/twemoji/raw/master/assets/72x72/1f004.png"}, {"r": "hikari.emojis.UnicodeEmoji.unicode_names", "u": 5, "d": "Get the unicode name of the emoji as a sequence. This returns the name of each codepoint. If only one codepoint exists, then this will only have one item in the resulting sequence."}, {"r": "hikari.emojis.UnicodeEmoji.unicode_escape", "u": 5, "d": "Get the unicode escape string for this emoji."}, {"r": "hikari.emojis.UnicodeEmoji.parse_codepoints", "u": 5, "d": "Create a unicode emoji from one or more UTF-32 codepoints.", "f": 1}, {"r": "hikari.emojis.UnicodeEmoji.parse_unicode_escape", "u": 5, "d": "Create a unicode emoji from a unicode escape string.", "f": 1}, {"r": "hikari.emojis.UnicodeEmoji.parse", "u": 5, "d": "Parse a given string into a unicode emoji object. Parameters      string : builtins.str The emoji object to parse. Returns    - UnicodeEmoji The parsed UnicodeEmoji object.", "f": 1}, {"r": "hikari.emojis.UnicodeEmoji.name", "u": 5, "d": "The code points that form the emoji."}, {"r": "hikari.emojis.UnicodeEmoji.is_mentionable", "u": 5, "d": "Whether the emoji can be mentioned or not."}, {"r": "hikari.emojis.UnicodeEmoji.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.emojis.UnicodeEmoji.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.emojis.UnicodeEmoji.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.emojis.CustomEmoji", "u": 5, "d": "Represents a custom emoji. This is a custom emoji that is from a guild you might not be part of. All CustomEmoji objects and their derivatives act as valid  hikari.files.Resource objects. This means you can use them as a file when sending a message. >>> emojis = await bot.rest.fetch_guild_emojis(12345) >>> picks = random.choices(emojis, 5) >>> await event.respond(files=picks)  ! warning Discord will not provide information on whether these emojis are animated or not when a reaction is removed and an event is fired. This is problematic if you need to try and determine the emoji that was removed. The side effect of this means that mentions for animated emojis will not be correct. This will not be changed as stated here: https: github.com/discord/discord-api-docs/issues/1614 issuecomment-628548913 Method generated by attrs for class CustomEmoji."}, {"r": "hikari.emojis.CustomEmoji.filename", "u": 5, "d": "Filename of the resource."}, {"r": "hikari.emojis.CustomEmoji.url_name", "u": 5, "d": "Name of the part of the emoji to use in requests."}, {"r": "hikari.emojis.CustomEmoji.mention", "u": 5, "d": "Mention string to use to mention the emoji with."}, {"r": "hikari.emojis.CustomEmoji.is_mentionable", "u": 5, "d": "Whether the emoji can be mentioned or not."}, {"r": "hikari.emojis.CustomEmoji.url", "u": 5, "d": "URL of the emoji image to display in clients."}, {"r": "hikari.emojis.CustomEmoji.parse", "u": 5, "d": "Parse a given string into an emoji object. Parameters      string : builtins.str The emoji object to parse. Returns    - Emoji The parsed emoji object. This will be a  CustomEmoji if a custom emoji ID or mention, or a  UnicodeEmoji otherwise. Raises    builtins.ValueError If a mention is given that has an invalid format.", "f": 1}, {"r": "hikari.emojis.CustomEmoji.id", "u": 5, "d": "The ID of this entity."}, {"r": "hikari.emojis.CustomEmoji.is_animated", "u": 5, "d": "Whether the emoji is animated. Will be  builtins.None when received in Message Reaction Remove and Message Reaction Remove Emoji events."}, {"r": "hikari.emojis.CustomEmoji.name", "u": 5, "d": "The name of the emoji. This can be  builtins.None in reaction events."}, {"r": "hikari.emojis.CustomEmoji.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.emojis.CustomEmoji.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.emojis.CustomEmoji.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.emojis.CustomEmoji.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.emojis.KnownCustomEmoji", "u": 5, "d": "Represents an emoji that is known from a guild the bot is in. This is a specialization of  CustomEmoji that is from a guild that you _are_ part of. As a result, it contains a lot more information with it. Method generated by attrs for class KnownCustomEmoji."}, {"r": "hikari.emojis.KnownCustomEmoji.app", "u": 5, "d": "The client application that models may use for procedures."}, {"r": "hikari.emojis.KnownCustomEmoji.guild_id", "u": 5, "d": "The ID of the guild this emoji belongs to."}, {"r": "hikari.emojis.KnownCustomEmoji.is_animated", "u": 5, "d": "Whether the emoji is animated. Unlike in  CustomEmoji , this information is always known, and will thus never be  builtins.None ."}, {"r": "hikari.emojis.KnownCustomEmoji.is_available", "u": 5, "d": "Whether this emoji can currently be used. May be  builtins.False due to a loss of Sever Boosts on the emoji's guild."}, {"r": "hikari.emojis.KnownCustomEmoji.is_colons_required", "u": 5, "d": "Whether this emoji must be wrapped in colons."}, {"r": "hikari.emojis.KnownCustomEmoji.is_managed", "u": 5, "d": "Whether the emoji is managed by an integration."}, {"r": "hikari.emojis.KnownCustomEmoji.role_ids", "u": 5, "d": "The IDs of the roles that are whitelisted to use this emoji. If this is empty then any user can use this emoji regardless of their roles."}, {"r": "hikari.emojis.KnownCustomEmoji.user", "u": 5, "d": "The user that created the emoji.  ! note This will be  builtins.None if you are missing the  MANAGE_EMOJIS permission in the server the emoji is from."}, {"r": "hikari.emojis.KnownCustomEmoji.filename", "u": 5, "d": "Filename of the resource."}, {"r": "hikari.emojis.KnownCustomEmoji.url_name", "u": 5, "d": "Name of the part of the emoji to use in requests."}, {"r": "hikari.emojis.KnownCustomEmoji.mention", "u": 5, "d": "Mention string to use to mention the emoji with."}, {"r": "hikari.emojis.KnownCustomEmoji.is_mentionable", "u": 5, "d": "Whether the emoji can be mentioned or not."}, {"r": "hikari.emojis.KnownCustomEmoji.url", "u": 5, "d": "URL of the emoji image to display in clients."}, {"r": "hikari.emojis.KnownCustomEmoji.parse", "u": 5, "d": "Parse a given string into an emoji object. Parameters      string : builtins.str The emoji object to parse. Returns    - Emoji The parsed emoji object. This will be a  CustomEmoji if a custom emoji ID or mention, or a  UnicodeEmoji otherwise. Raises    builtins.ValueError If a mention is given that has an invalid format.", "f": 1}, {"r": "hikari.emojis.KnownCustomEmoji.id", "u": 5, "d": "The ID of this entity."}, {"r": "hikari.emojis.KnownCustomEmoji.name", "u": 5, "d": "The name of the emoji. This can be  builtins.None in reaction events."}, {"r": "hikari.emojis.KnownCustomEmoji.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.emojis.KnownCustomEmoji.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.emojis.KnownCustomEmoji.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.emojis.KnownCustomEmoji.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.emojis.Emojiish", "u": 5, "d": "Type hint representing a string emoji or an  Emoji -derived object. Examples include: - Unicode emoji strings, such as  \"\ud83d\udc4c\" ,  \"\\N{OK HAND SIGN}\" ,  \"\\U0001f44c\" . - Custom emoji names in the format  name:id , such as  \"rosaThonk:733073048646713364\" . - Derivative instances of  Emoji , i.e.  UnicodeEmoji ,  CustomEmoji and  KnownCustomEmoji ."}, {"r": "hikari.invites", "u": 6, "d": "Application and entities that are used to describe invites on Discord."}, {"r": "hikari.invites.TargetUserType", "u": 6, "d": "The reason a invite targets a user."}, {"r": "hikari.invites.TargetUserType.name", "u": 6, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.invites.TargetUserType.value", "u": 6, "d": "Return the value of the enum member."}, {"r": "hikari.invites.TargetUserType.STREAM", "u": 6, "d": "This invite is targeting a \"Go Live\" stream."}, {"r": "hikari.invites.VanityURL", "u": 6, "d": "A special case invite object, that represents a guild's vanity url. Method generated by attrs for class VanityURL."}, {"r": "hikari.invites.VanityURL.app", "u": 6, "d": "The client application that models may use for procedures."}, {"r": "hikari.invites.VanityURL.code", "u": 6, "d": "The code for this invite."}, {"r": "hikari.invites.VanityURL.uses", "u": 6, "d": "The amount of times this invite has been used."}, {"r": "hikari.invites.InviteGuild", "u": 6, "d": "Represents the partial data of a guild that is attached to invites. Method generated by attrs for class InviteGuild."}, {"r": "hikari.invites.InviteGuild.splash_url", "u": 6, "d": "Splash for the guild, if set."}, {"r": "hikari.invites.InviteGuild.format_splash", "u": 6, "d": "Generate the guild's splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the splash, or  builtins.None if not set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.invites.InviteGuild.banner", "u": 6, "d": "Banner for the guild, if set."}, {"r": "hikari.invites.InviteGuild.format_banner", "u": 6, "d": "Generate the guild's banner image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL of the banner, or  builtins.None if no banner is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.invites.InviteGuild.banner_hash", "u": 6, "d": "The hash for the guild's banner. This is only present if  hikari.guilds.GuildFeature.BANNER is in the  features for this guild. For all other purposes, it is  builtins.None ."}, {"r": "hikari.invites.InviteGuild.description", "u": 6, "d": "The guild's description. This is only present if certain  features are set in this guild. Otherwise, this will always be  builtins.None . For all other purposes, it is  builtins.None ."}, {"r": "hikari.invites.InviteGuild.features", "u": 6, "d": "A list of the features in this guild."}, {"r": "hikari.invites.InviteGuild.splash_hash", "u": 6, "d": "The hash of the splash for the guild, if there is one."}, {"r": "hikari.invites.InviteGuild.vanity_url_code", "u": 6, "d": "The vanity URL code for the guild's vanity URL. This is only present if  hikari.guilds.GuildFeature.VANITY_URL is in the  features for this guild. If not, this will always be  builtins.None ."}, {"r": "hikari.invites.InviteGuild.verification_level", "u": 6, "d": "The verification level required for a user to participate in this guild."}, {"r": "hikari.invites.InviteGuild.welcome_screen", "u": 6, "d": "The welcome screen of a community guild shown to new members, if set."}, {"r": "hikari.invites.InviteGuild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.invites.InviteGuild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.invites.InviteGuild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.invites.InviteGuild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.invites.InviteGuild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.invites.InviteGuild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.invites.InviteGuild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.invites.InviteGuild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.invites.Invite", "u": 6, "d": "Represents an invite that's used to add users to a guild or group dm. Method generated by attrs for class Invite."}, {"r": "hikari.invites.Invite.app", "u": 6, "d": "The client application that models may use for procedures."}, {"r": "hikari.invites.Invite.approximate_active_member_count", "u": 6, "d": "The approximate amount of presences in this invite's guild. This is only present when  with_counts is passed as  builtins.True to the GET Invites endpoint."}, {"r": "hikari.invites.Invite.approximate_member_count", "u": 6, "d": "The approximate amount of members in this invite's guild. This is only present when  with_counts is passed as  builtins.True to the GET Invites endpoint."}, {"r": "hikari.invites.Invite.channel", "u": 6, "d": "The partial object of the channel this invite targets. Will be  builtins.None for invite objects that are attached to gateway events, in which case you should refer to  Invite.channel_id ."}, {"r": "hikari.invites.Invite.channel_id", "u": 6, "d": "The ID of the channel this invite targets."}, {"r": "hikari.invites.Invite.code", "u": 6, "d": "The code for this invite."}, {"r": "hikari.invites.Invite.guild", "u": 6, "d": "The partial object of the guild this invite belongs to. Will be  builtins.None for group DM invites and when attached to a gateway event; for invites received over the gateway you should refer to  Invite.guild_id ."}, {"r": "hikari.invites.Invite.guild_id", "u": 6, "d": "The ID of the guild this invite belongs to. Will be  builtins.None for group DM invites."}, {"r": "hikari.invites.Invite.inviter", "u": 6, "d": "The object of the user who created this invite."}, {"r": "hikari.invites.Invite.target_user", "u": 6, "d": "The object of the user who this invite targets, if set."}, {"r": "hikari.invites.Invite.target_user_type", "u": 6, "d": "The type of user target this invite is, if applicable."}, {"r": "hikari.invites.InviteWithMetadata", "u": 6, "d": "Extends the base  Invite object with metadata. The metadata is only returned when getting an invite with guild permissions, rather than it's code. Method generated by attrs for class InviteWithMetadata."}, {"r": "hikari.invites.InviteWithMetadata.expires_at", "u": 6, "d": "When this invite should expire, if  InviteWithMetadata.max_age is set. If this invite doesn't have a set expiry then this will be  builtins.None ."}, {"r": "hikari.invites.InviteWithMetadata.created_at", "u": 6, "d": "When this invite was created."}, {"r": "hikari.invites.InviteWithMetadata.is_temporary", "u": 6, "d": "Whether this invite grants temporary membership."}, {"r": "hikari.invites.InviteWithMetadata.max_age", "u": 6, "d": "The timedelta of how long this invite will be valid for. If set to  builtins.None then this is unlimited."}, {"r": "hikari.invites.InviteWithMetadata.max_uses", "u": 6, "d": "The limit for how many times this invite can be used before it expires. If set to  builtins.None then this is unlimited."}, {"r": "hikari.invites.InviteWithMetadata.uses", "u": 6, "d": "The amount of times this invite has been used."}, {"r": "hikari.invites.InviteWithMetadata.app", "u": 6, "d": "The client application that models may use for procedures."}, {"r": "hikari.invites.InviteWithMetadata.approximate_active_member_count", "u": 6, "d": "The approximate amount of presences in this invite's guild. This is only present when  with_counts is passed as  builtins.True to the GET Invites endpoint."}, {"r": "hikari.invites.InviteWithMetadata.approximate_member_count", "u": 6, "d": "The approximate amount of members in this invite's guild. This is only present when  with_counts is passed as  builtins.True to the GET Invites endpoint."}, {"r": "hikari.invites.InviteWithMetadata.channel", "u": 6, "d": "The partial object of the channel this invite targets. Will be  builtins.None for invite objects that are attached to gateway events, in which case you should refer to  Invite.channel_id ."}, {"r": "hikari.invites.InviteWithMetadata.channel_id", "u": 6, "d": "The ID of the channel this invite targets."}, {"r": "hikari.invites.InviteWithMetadata.code", "u": 6, "d": "The code for this invite."}, {"r": "hikari.invites.InviteWithMetadata.guild", "u": 6, "d": "The partial object of the guild this invite belongs to. Will be  builtins.None for group DM invites and when attached to a gateway event; for invites received over the gateway you should refer to  Invite.guild_id ."}, {"r": "hikari.invites.InviteWithMetadata.guild_id", "u": 6, "d": "The ID of the guild this invite belongs to. Will be  builtins.None for group DM invites."}, {"r": "hikari.invites.InviteWithMetadata.inviter", "u": 6, "d": "The object of the user who created this invite."}, {"r": "hikari.invites.InviteWithMetadata.target_user", "u": 6, "d": "The object of the user who this invite targets, if set."}, {"r": "hikari.invites.InviteWithMetadata.target_user_type", "u": 6, "d": "The type of user target this invite is, if applicable."}, {"r": "hikari.invites.Inviteish", "u": 6, "d": "Type hint for an invite, vanity URL, or invite code. This must be a representation of an invite that is a  builtins.str containing the invite code, an  Invite / InviteWithMetadata , or a  VanityURL instance."}, {"r": "hikari.webhooks", "u": 8, "d": "Application and entities that are used to describe webhooks on Discord."}, {"r": "hikari.webhooks.WebhookType", "u": 8, "d": "Types of webhook."}, {"r": "hikari.webhooks.WebhookType.name", "u": 8, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.webhooks.WebhookType.value", "u": 8, "d": "Return the value of the enum member."}, {"r": "hikari.webhooks.WebhookType.INCOMING", "u": 8, "d": "Incoming webhook."}, {"r": "hikari.webhooks.WebhookType.CHANNEL_FOLLOWER", "u": 8, "d": "Channel Follower webhook."}, {"r": "hikari.webhooks.Webhook", "u": 8, "d": "Represents a webhook object on Discord. This is an endpoint that can have messages sent to it using standard HTTP requests, which enables external services that are not bots to send informational messages to specific channels. Method generated by attrs for class Webhook."}, {"r": "hikari.webhooks.Webhook.mention", "u": 8, "d": "Return a raw mention string for the given webhook's user.  ! note This exists purely for consistency. Webhooks do not receive events from the gateway, and without some bot backend to support it, will not be able to detect mentions of their webhook. Example    -   >>> some_webhook.mention ' '   Returns    - builtins.str The mention string to use."}, {"r": "hikari.webhooks.Webhook.execute", "u": 8, "d": "Execute the webhook to create a message. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         username : hikari.undefined.UndefinedOr[builtins.str] If provided, the username to override the webhook's username for this request. avatar_url : hikari.undefined.UndefinedOr[builtins.str] If provided, the url of an image to override the webhook's avatar with for this request. tts : hikari.undefined.UndefinedOr[bool] If provided, whether the message will be sent as a TTS message. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish] If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. embeds : hikari.undefined.UndefinedOr[typing.Sequence[hikari.embeds.Embed If provided, a sequence of between  1 to  10 embed objects (inclusive) to send with the embed. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. Returns    - hikari.messages.Message The created message object. Raises    hikari.errors.NotFoundError If the current webhook is not found. hikari.errors.BadRequestError This can be raised if the file is too large; if the embed exceeds the defined limits; if the message content is specified only and empty or greater than  2000 characters; if neither content, file or embeds are specified. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.UnauthorizedError If you pass a token that's invalid for the target webhook. builtins.ValueError If either  Webhook.token is  builtins.None or more than 100 unique objects/entities are passed for  role_mentions or  user_mentions or if  token is not available. builtins.TypeError If both  attachment and  attachments are specified.", "f": 1}, {"r": "hikari.webhooks.Webhook.edit_message", "u": 8, "d": "Edit a message sent by a webhook. Parameters      message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. content : hikari.undefined.UndefinedNoneOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed nor no  embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the message embed. embeds : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the message embeds. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this, delete the message and re-send it. This also applies to embed attachments.  ! warning If you specify one of  mentions_everyone ,  user_mentions , or  role_mentions , then all others will default to  builtins.False , even if they were enabled previously. This is a limitation of Discord's design. If in doubt, specify all three of them each time. Returns    - hikari.messages.Message The edited message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions or  token is not available. builtins.TypeError If both  attachment and  attachments are specified or if both  embed and  embeds are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook or the message are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.webhooks.Webhook.delete_message", "u": 8, "d": "Delete a given message in a given channel. Parameters      message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. Raises    builtins.ValueError If  token is not available. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook or the message are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.webhooks.Webhook.delete", "u": 8, "d": "Delete this webhook. Other Parameters         use_token : hikari.undefined.UndefinedOr[builtins.bool] If set to  builtins.True then the webhook's token will be used for this request; if set to  builtins.False then bot authorization will be used; if not specified then the webhook's token will be used for the request if it's set else bot authorization. Raises    hikari.errors.NotFoundError If this webhook is not found. hikari.errors.ForbiddenError If you either lack the  MANAGE_WEBHOOKS permission or are not a member of the guild this webhook belongs to. builtins.ValueError If  use_token is passed as  builtins.True when  Webhook.token is  builtins.None .", "f": 1}, {"r": "hikari.webhooks.Webhook.edit", "u": 8, "d": "Edit this webhook. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name string. avatar : hikari.undefined.UndefinedOr[hikari.files.Resourceish] If provided, the new avatar image. If  builtins.None , then it is removed. If not specified, nothing is changed. channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel If provided, the object or ID of the new channel the given webhook should be moved to. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the audit log reason explaining why the operation was performed. This field will be used when using the webhook's token rather than bot authorization. use_token : hikari.undefined.UndefinedOr[builtins.bool] If set to  builtins.True then the webhook's token will be used for this request; if set to  builtins.False then bot authorization will be used; if not specified then the webhook's token will be used for the request if it's set else bot authorization. Returns    - hikari.webhooks.Webhook The updated webhook object. Raises    hikari.errors.BadRequestError If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.NotFoundError If either the webhook or the channel are not found. hikari.errors.ForbiddenError If you either lack the  MANAGE_WEBHOOKS permission or are not a member of the guild this webhook belongs to. hikari.errors.UnauthorizedError If you pass a token that's invalid for the target webhook. builtins.ValueError If  use_token is passed as  builtins.True when  Webhook.token is  builtins.None .", "f": 1}, {"r": "hikari.webhooks.Webhook.fetch_channel", "u": 8, "d": "Fetch the channel this webhook is for. Returns    - hikari.channels.PartialChannel The object of the channel this webhook targets. Raises    hikari.errors.ForbiddenError If you don't have access to the channel this webhook belongs to. hikari.errors.NotFoundError If the channel this message was created in does not exist.", "f": 1}, {"r": "hikari.webhooks.Webhook.fetch_self", "u": 8, "d": "Fetch this webhook. Other Parameters         use_token : hikari.undefined.UndefinedOr[builtins.bool] If set to  builtins.True then the webhook's token will be used for this request; if set to  builtins.False then bot authorization will be used; if not specified then the webhook's token will be used for the request if it's set else bot authorization. Returns    - hikari.webhooks.Webhook The requested webhook object. Raises    hikari.errors.BadRequestError If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. hikari.errors.NotFoundError If the webhook is not found. hikari.errors.ForbiddenError If you're not in the guild that owns this webhook or lack the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you pass a token that's invalid for the target webhook. builtins.ValueError If  use_token is passed as  builtins.True when  Webhook.token is  builtins.None .", "f": 1}, {"r": "hikari.webhooks.Webhook.avatar", "u": 8, "d": "URL for this webhook's custom avatar or default avatar. If the webhook has a custom avatar, a URL to this is returned. Otherwise a URL to the default avatar is provided instead."}, {"r": "hikari.webhooks.Webhook.default_avatar", "u": 8, "d": "URL for this webhook's default avatar. This is used if no avatar is set."}, {"r": "hikari.webhooks.Webhook.format_avatar", "u": 8, "d": "Generate the avatar URL for this webhook's custom avatar if set. If no avatar is specified, return  None . In this case, you should use  default_avatar instead. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg ,  webp . This will be ignored for default avatars which can only be  png . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Will be ignored for default avatars. Returns    - typing.Optional[hikari.files.URL] The URL of the resource.  builtins.None if no avatar is set (in this case, use the  default_avatar instead). Raises    builtins.ValueError If  size is not a power of two between 16 and 4096 (inclusive).", "f": 1}, {"r": "hikari.webhooks.Webhook.app", "u": 8, "d": "The client application that models may use for procedures."}, {"r": "hikari.webhooks.Webhook.application_id", "u": 8, "d": "The ID of the application that created this webhook."}, {"r": "hikari.webhooks.Webhook.author", "u": 8, "d": "The user that created the webhook  ! info This will be  builtins.None when getting a webhook with bot authorization rather than the webhook's token."}, {"r": "hikari.webhooks.Webhook.avatar_hash", "u": 8, "d": "The avatar hash of the webhook."}, {"r": "hikari.webhooks.Webhook.channel_id", "u": 8, "d": "The channel ID this webhook is for."}, {"r": "hikari.webhooks.Webhook.guild_id", "u": 8, "d": "The guild ID of the webhook."}, {"r": "hikari.webhooks.Webhook.id", "u": 8, "d": "The ID of this entity."}, {"r": "hikari.webhooks.Webhook.name", "u": 8, "d": "The name of the webhook."}, {"r": "hikari.webhooks.Webhook.source_channel", "u": 8, "d": "The partial object of the channel a  CHANNEL_FOLLOWER webhook is following. Will be  builtins.None for other webhook types."}, {"r": "hikari.webhooks.Webhook.source_guild", "u": 8, "d": "The partial object of the guild a  CHANNEL_FOLLOWER webhook is following. Will be  builtins.None for other webhook types."}, {"r": "hikari.webhooks.Webhook.token", "u": 8, "d": "The token for the webhook.  ! info This is only available for incoming webhooks that are created in the channel settings."}, {"r": "hikari.webhooks.Webhook.type", "u": 8, "d": "The type of the webhook."}, {"r": "hikari.webhooks.Webhook.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.traits", "u": 9, "d": "Core app interface for application implementations."}, {"r": "hikari.traits.CacheAware", "u": 9, "d": "Structural supertype for a cache-aware object. Any cache-aware objects are able to access the Discord application cache."}, {"r": "hikari.traits.CacheAware.cache", "u": 9, "d": "Return the immutable cache implementation for this object. Returns    - hikari.api.cache.Cache The cache component for this object."}, {"r": "hikari.traits.EventManagerAware", "u": 9, "d": "Structural supertype for a event manager-aware object. event manager-aware components are able to manage event listeners and waiters."}, {"r": "hikari.traits.EventManagerAware.event_manager", "u": 9, "d": "Return the event manager for this object. Returns    - hikari.api.event_manager.EventManager The event manager component."}, {"r": "hikari.traits.EntityFactoryAware", "u": 9, "d": "Structural supertype for an entity factory-aware object. These components will be able to construct library entities."}, {"r": "hikari.traits.EntityFactoryAware.entity_factory", "u": 9, "d": "Return the entity factory implementation for this object. Returns    - hikari.api.entity_factory.EntityFactory The entity factory component."}, {"r": "hikari.traits.EventFactoryAware", "u": 9, "d": "Structural supertype for an event factory-aware object. These components are able to construct library events."}, {"r": "hikari.traits.EventFactoryAware.event_factory", "u": 9, "d": "Return the event factory component. Returns    - hikari.api.event_factory.EventFactory The event factory component."}, {"r": "hikari.traits.ExecutorAware", "u": 9, "d": "Structural supertype for an executor-aware object. These components will contain an  executor attribute that may return a  concurrent.futures.Executor or  builtins.None if the default  asyncio thread pool for the event loop is used."}, {"r": "hikari.traits.ExecutorAware.executor", "u": 9, "d": "Return the executor to use for blocking operations. This may return  builtins.None if the default  asyncio thread pool should be used instead. Returns    - typing.Optional[concurrent.futures.Executor] The executor to use, or  builtins.None to use the  asyncio default instead."}, {"r": "hikari.traits.IntentsAware", "u": 9, "d": "A component that is aware of the application intents."}, {"r": "hikari.traits.IntentsAware.intents", "u": 9, "d": "Return the intents registered for the application. Returns    - hikari.intents.Intents The intents registered on this application."}, {"r": "hikari.traits.NetworkSettingsAware", "u": 9, "d": "Structural supertype for any component aware of network settings."}, {"r": "hikari.traits.NetworkSettingsAware.http_settings", "u": 9, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.traits.NetworkSettingsAware.proxy_settings", "u": 9, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.traits.RESTAware", "u": 9, "d": "Structural supertype for a REST-aware object. These are able to perform REST API calls."}, {"r": "hikari.traits.RESTAware.rest", "u": 9, "d": "Return the REST client to use for HTTP requests. Returns    - hikari.api.rest.RESTClient The REST client to use."}, {"r": "hikari.traits.RESTAware.entity_factory", "u": 9, "d": "Return the entity factory implementation for this object. Returns    - hikari.api.entity_factory.EntityFactory The entity factory component."}, {"r": "hikari.traits.RESTAware.http_settings", "u": 9, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.traits.RESTAware.proxy_settings", "u": 9, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.traits.RESTAware.executor", "u": 9, "d": "Return the executor to use for blocking operations. This may return  builtins.None if the default  asyncio thread pool should be used instead. Returns    - typing.Optional[concurrent.futures.Executor] The executor to use, or  builtins.None to use the  asyncio default instead."}, {"r": "hikari.traits.ShardAware", "u": 9, "d": "Structural supertype for a shard-aware object. These will expose a mapping of shards, the intents in use and the bot user object."}, {"r": "hikari.traits.ShardAware.heartbeat_latencies", "u": 9, "d": "Return a mapping of shard ID to heartbeat latency. Any shards that are not yet started will be  float('nan') . Returns    - typing.Mapping[builtins.int, builtins.float] Each shard ID mapped to the corresponding heartbeat latency. Each latency is measured in seconds."}, {"r": "hikari.traits.ShardAware.heartbeat_latency", "u": 9, "d": "Return the average heartbeat latency of all started shards. If no shards are started, this will return  float('nan') . Returns    - builtins.float The average heartbeat latency of all started shards, or  float('nan') if no shards are started. This is measured in seconds."}, {"r": "hikari.traits.ShardAware.me", "u": 9, "d": "Return the bot user, if known. This should be available as soon as the bot has fired the  hikari.events.lifetime_events.StartingEvent . Until then, this may or may not be  builtins.None . Returns    - typing.Optional[hikari.users.OwnUser] The bot user, if known, otherwise  builtins.None ."}, {"r": "hikari.traits.ShardAware.shards", "u": 9, "d": "Return a mapping of shards in this application instance. Each shard ID is mapped to the corresponding shard instance. If the application has not started, it is acceptable to assume the result of this call will be an empty mapping. Returns    - typing.Mapping[int, hikari.api.shard.GatewayShard] The shard mapping."}, {"r": "hikari.traits.ShardAware.shard_count", "u": 9, "d": "Return the number of shards in the total application. This may not be the same as the size of  shards . If the application is auto-sharded, this may be  0 until the shards are started. Returns    - builtins.int The number of shards in the total application."}, {"r": "hikari.traits.ShardAware.update_presence", "u": 9, "d": "Update the presence on all shards. This call will patch the presence on each shard. This means that unless you explicitly specify a parameter, the previous value will be retained. This means you do not have to track the global presence in your code. Other Parameters         idle_since : hikari.undefined.UndefinedNoneOr[datetime.datetime] The datetime that the user started being idle. If undefined, this will not be changed. afk : hikari.undefined.UndefinedOr[builtins.bool] If  builtins.True , the user is marked as AFK. If  builtins.False , the user is marked as being active. If undefined, this will not be changed. activity : hikari.undefined.UndefinedNoneOr[hikari.presences.Activity] The activity to appear to be playing. If undefined, this will not be changed. status : hikari.undefined.UndefinedOr[hikari.presences.Status] The web status to show. If undefined, this will not be changed.  ! note This will only send the update payloads to shards that are alive. Any shards that are not alive will cache the new presence for when they do start.  ! note If you want to set presences per shard, access the shard you wish to update (e.g. by using  BotApp.shards ), and call  hikari.api.shard.GatewayShard.update_presence on that shard. This method is simply a facade to make performing this in bulk simpler.", "f": 1}, {"r": "hikari.traits.ShardAware.intents", "u": 9, "d": "Return the intents registered for the application. Returns    - hikari.intents.Intents The intents registered on this application."}, {"r": "hikari.traits.ShardAware.http_settings", "u": 9, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.traits.ShardAware.proxy_settings", "u": 9, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.traits.ShardAware.executor", "u": 9, "d": "Return the executor to use for blocking operations. This may return  builtins.None if the default  asyncio thread pool should be used instead. Returns    - typing.Optional[concurrent.futures.Executor] The executor to use, or  builtins.None to use the  asyncio default instead."}, {"r": "hikari.traits.ShardAware.voice", "u": 9, "d": "Return the voice connection manager component for this application. Returns    - hikari.api.voice.VoiceComponent The voice component for the application."}, {"r": "hikari.traits.VoiceAware", "u": 9, "d": "Structural supertype for a voice-aware object. This is an object that provides a  voice property to allow the creation of custom voice client instances."}, {"r": "hikari.traits.VoiceAware.voice", "u": 9, "d": "Return the voice connection manager component for this application. Returns    - hikari.api.voice.VoiceComponent The voice component for the application."}, {"r": "hikari.traits.BotAware", "u": 9, "d": "Structural supertype for a component that is aware of all internals."}, {"r": "hikari.traits.BotAware.is_alive", "u": 9, "d": "Check whether the bot is running or not. This is useful as some functions might raise  hikari.errors.ComponentNotRunningError if this is  builtins.False . Returns    - builtins.bool Whether the bot is running or not."}, {"r": "hikari.traits.BotAware.join", "u": 9, "d": "Wait indefinitely until the application closes. This can be placed in a task and cancelled without affecting the application runtime itself. Any exceptions raised by shards will be propagated to here. Other Parameters         until_close : builtins.bool Defaults to  builtins.True . If set, the waiter will stop as soon as a request for shut down is processed. This can allow you to break and begin closing your own resources. If  builtins.False , then this will wait until all shards' tasks have died.", "f": 1}, {"r": "hikari.traits.BotAware.run", "u": 9, "d": "Start the bot, wait for all shards to become ready, and then return. Other Parameters         activity : typing.Optional[hikari.presences.Activity] The initial activity to display in the bot user presence, or  builtins.None (default) to not show any. afk : builtins.bool The initial AFK state to display in the bot user presence, or  builtins.False (default) to not show any. close_executor : builtins.bool Defaults to  builtins.False . If  builtins.True , any custom  concurrent.futures.Executor passed to the constructor will be shut down when the application terminates. This does not affect the default executor associated with the event loop, and will not do anything if you do not provide a custom executor to the constructor. idle_since : typing.Optional[datetime.datetime] The  datetime.datetime the user should be marked as being idle since, or  builtins.None (default) to not show this. ignore_session_start_limit : builtins.bool Defaults to  builtins.False . If  builtins.False , then attempting to start more sessions than you are allowed in a 24 hour window will throw a  hikari.errors.GatewayError rather than going ahead and hitting the IDENTIFY limit, which may result in your token being reset. Setting to  builtins.True disables this behavior. large_threshold : builtins.int Threshold for members in a guild before it is treated as being \"large\" and no longer sending member details in the  GUILD CREATE event. Defaults to  250 . shard_ids : typing.Optional[typing.Set[builtins.int The shard IDs to create shards for. If not  builtins.None , then a non- None  shard_count must ALSO be provided. Defaults to  builtins.None , which means the Discord-recommended count is used for your application instead. shard_count : typing.Optional[builtins.int] The number of shards to use in the entire distributed application. Defaults to  builtins.None which results in the count being determined dynamically on startup. status : hikari.presences.Status The initial status to show for the user presence on startup. Defaults to  hikari.presences.Status.ONLINE .", "f": 1}, {"r": "hikari.traits.BotAware.start", "u": 9, "d": "Start the bot, wait for all shards to become ready, and then return. Other Parameters         activity : typing.Optional[hikari.presences.Activity] The initial activity to display in the bot user presence, or  builtins.None (default) to not show any. afk : builtins.bool The initial AFK state to display in the bot user presence, or  builtins.False (default) to not show any. idle_since : typing.Optional[datetime.datetime] The  datetime.datetime the user should be marked as being idle since, or  builtins.None (default) to not show this. ignore_session_start_limit : builtins.bool Defaults to  builtins.False . If  builtins.False , then attempting to start more sessions than you are allowed in a 24 hour window will throw a  hikari.errors.GatewayError rather than going ahead and hitting the IDENTIFY limit, which may result in your token being reset. Setting to  builtins.True disables this behavior. large_threshold : builtins.int Threshold for members in a guild before it is treated as being \"large\" and no longer sending member details in the  GUILD CREATE event. Defaults to  250 . shard_ids : typing.Optional[typing.Set[builtins.int The shard IDs to create shards for. If not  builtins.None , then a non- None  shard_count must ALSO be provided. Defaults to  builtins.None , which means the Discord-recommended count is used for your application instead. shard_count : typing.Optional[builtins.int] The number of shards to use in the entire distributed application. Defaults to  builtins.None which results in the count being determined dynamically on startup. status : hikari.presences.Status The initial status to show for the user presence on startup. Defaults to  hikari.presences.Status.ONLINE .", "f": 1}, {"r": "hikari.traits.BotAware.rest", "u": 9, "d": "Return the REST client to use for HTTP requests. Returns    - hikari.api.rest.RESTClient The REST client to use."}, {"r": "hikari.traits.BotAware.entity_factory", "u": 9, "d": "Return the entity factory implementation for this object. Returns    - hikari.api.entity_factory.EntityFactory The entity factory component."}, {"r": "hikari.traits.BotAware.http_settings", "u": 9, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.traits.BotAware.proxy_settings", "u": 9, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.traits.BotAware.executor", "u": 9, "d": "Return the executor to use for blocking operations. This may return  builtins.None if the default  asyncio thread pool should be used instead. Returns    - typing.Optional[concurrent.futures.Executor] The executor to use, or  builtins.None to use the  asyncio default instead."}, {"r": "hikari.traits.BotAware.heartbeat_latencies", "u": 9, "d": "Return a mapping of shard ID to heartbeat latency. Any shards that are not yet started will be  float('nan') . Returns    - typing.Mapping[builtins.int, builtins.float] Each shard ID mapped to the corresponding heartbeat latency. Each latency is measured in seconds."}, {"r": "hikari.traits.BotAware.heartbeat_latency", "u": 9, "d": "Return the average heartbeat latency of all started shards. If no shards are started, this will return  float('nan') . Returns    - builtins.float The average heartbeat latency of all started shards, or  float('nan') if no shards are started. This is measured in seconds."}, {"r": "hikari.traits.BotAware.me", "u": 9, "d": "Return the bot user, if known. This should be available as soon as the bot has fired the  hikari.events.lifetime_events.StartingEvent . Until then, this may or may not be  builtins.None . Returns    - typing.Optional[hikari.users.OwnUser] The bot user, if known, otherwise  builtins.None ."}, {"r": "hikari.traits.BotAware.shards", "u": 9, "d": "Return a mapping of shards in this application instance. Each shard ID is mapped to the corresponding shard instance. If the application has not started, it is acceptable to assume the result of this call will be an empty mapping. Returns    - typing.Mapping[int, hikari.api.shard.GatewayShard] The shard mapping."}, {"r": "hikari.traits.BotAware.shard_count", "u": 9, "d": "Return the number of shards in the total application. This may not be the same as the size of  shards . If the application is auto-sharded, this may be  0 until the shards are started. Returns    - builtins.int The number of shards in the total application."}, {"r": "hikari.traits.BotAware.update_presence", "u": 9, "d": "Update the presence on all shards. This call will patch the presence on each shard. This means that unless you explicitly specify a parameter, the previous value will be retained. This means you do not have to track the global presence in your code. Other Parameters         idle_since : hikari.undefined.UndefinedNoneOr[datetime.datetime] The datetime that the user started being idle. If undefined, this will not be changed. afk : hikari.undefined.UndefinedOr[builtins.bool] If  builtins.True , the user is marked as AFK. If  builtins.False , the user is marked as being active. If undefined, this will not be changed. activity : hikari.undefined.UndefinedNoneOr[hikari.presences.Activity] The activity to appear to be playing. If undefined, this will not be changed. status : hikari.undefined.UndefinedOr[hikari.presences.Status] The web status to show. If undefined, this will not be changed.  ! note This will only send the update payloads to shards that are alive. Any shards that are not alive will cache the new presence for when they do start.  ! note If you want to set presences per shard, access the shard you wish to update (e.g. by using  BotApp.shards ), and call  hikari.api.shard.GatewayShard.update_presence on that shard. This method is simply a facade to make performing this in bulk simpler.", "f": 1}, {"r": "hikari.traits.BotAware.intents", "u": 9, "d": "Return the intents registered for the application. Returns    - hikari.intents.Intents The intents registered on this application."}, {"r": "hikari.traits.BotAware.voice", "u": 9, "d": "Return the voice connection manager component for this application. Returns    - hikari.api.voice.VoiceComponent The voice component for the application."}, {"r": "hikari.traits.BotAware.event_factory", "u": 9, "d": "Return the event factory component. Returns    - hikari.api.event_factory.EventFactory The event factory component."}, {"r": "hikari.traits.BotAware.event_manager", "u": 9, "d": "Return the event manager for this object. Returns    - hikari.api.event_manager.EventManager The event manager component."}, {"r": "hikari.traits.BotAware.cache", "u": 9, "d": "Return the immutable cache implementation for this object. Returns    - hikari.api.cache.Cache The cache component for this object."}, {"r": "hikari.guilds", "u": 7, "d": "Application and entities that are used to describe guilds on Discord."}, {"r": "hikari.guilds.Guild", "u": 7, "d": "A representation of a guild on Discord. Method generated by attrs for class Guild."}, {"r": "hikari.guilds.Guild.banner_url", "u": 7, "d": "Banner for the guild, if set."}, {"r": "hikari.guilds.Guild.discovery_splash_url", "u": 7, "d": "Discovery splash for the guild, if set."}, {"r": "hikari.guilds.Guild.emojis", "u": 7, "d": "Return the emojis in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A mapping of emoji IDs to the objects of emojis in this guild."}, {"r": "hikari.guilds.Guild.roles", "u": 7, "d": "Return the roles in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, Role] A mapping of role IDs to the objects of roles in this guild."}, {"r": "hikari.guilds.Guild.splash_url", "u": 7, "d": "Splash for the guild, if set."}, {"r": "hikari.guilds.Guild.format_banner", "u": 7, "d": "Generate the guild's banner image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL of the banner, or  builtins.None if no banner is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.Guild.format_discovery_splash", "u": 7, "d": "Generate the guild's discovery splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The string URL. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.Guild.format_splash", "u": 7, "d": "Generate the guild's splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the splash, or  builtins.None if not set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.Guild.get_emoji", "u": 7, "d": "Get an emoji from the cache by it's ID.", "f": 1}, {"r": "hikari.guilds.Guild.get_role", "u": 7, "d": "Get a role from the cache by it's ID.", "f": 1}, {"r": "hikari.guilds.Guild.afk_channel_id", "u": 7, "d": "The ID for the channel that AFK voice users get sent to. If  builtins.None , then no AFK channel is set up for this guild."}, {"r": "hikari.guilds.Guild.afk_timeout", "u": 7, "d": "Timeout for activity before a member is classed as AFK. How long a voice user has to be AFK for before they are classed as being AFK and are moved to the AFK channel ( Guild.afk_channel_id )."}, {"r": "hikari.guilds.Guild.application_id", "u": 7, "d": "The ID of the application that created this guild. This will always be  builtins.None for guilds that weren't created by a bot."}, {"r": "hikari.guilds.Guild.banner_hash", "u": 7, "d": "The hash for the guild's banner. This is only present if the guild has  GuildFeature.BANNER in  Guild.features for this guild. For all other purposes, it is  builtins.None ."}, {"r": "hikari.guilds.Guild.default_message_notifications", "u": 7, "d": "The default setting for message notifications in this guild."}, {"r": "hikari.guilds.Guild.description", "u": 7, "d": "The guild's description. This is only present if certain  GuildFeature 's are set in  Guild.features for this guild. Otherwise, this will always be  builtins.None ."}, {"r": "hikari.guilds.Guild.discovery_splash_hash", "u": 7, "d": "The hash of the discovery splash for the guild, if there is one."}, {"r": "hikari.guilds.Guild.explicit_content_filter", "u": 7, "d": "The setting for the explicit content filter in this guild."}, {"r": "hikari.guilds.Guild.features", "u": 7, "d": "A list of the features in this guild."}, {"r": "hikari.guilds.Guild.is_widget_enabled", "u": 7, "d": "Describes whether the guild widget is enabled or not. If this information is not present, this will be  builtins.None ."}, {"r": "hikari.guilds.Guild.max_video_channel_users", "u": 7, "d": "The maximum number of users allowed in a video channel together. This information may not be present, in which case, it will be  builtins.None ."}, {"r": "hikari.guilds.Guild.mfa_level", "u": 7, "d": "The required MFA level for users wishing to participate in this guild."}, {"r": "hikari.guilds.Guild.owner_id", "u": 7, "d": "The ID of the owner of this guild."}, {"r": "hikari.guilds.Guild.preferred_locale", "u": 7, "d": "The preferred locale to use for this guild. This can only be change if  GuildFeature.COMMUNITY is in  Guild.features for this guild and will otherwise default to  en-US ."}, {"r": "hikari.guilds.Guild.premium_subscription_count", "u": 7, "d": "The number of nitro boosts that the server currently has. This information may not be present, in which case, it will be  builtins.None ."}, {"r": "hikari.guilds.Guild.premium_tier", "u": 7, "d": "The premium tier for this guild."}, {"r": "hikari.guilds.Guild.public_updates_channel_id", "u": 7, "d": "The channel ID of the channel where admins and moderators receive notices from Discord. This is only present if  GuildFeature.COMMUNITY is in  Guild.features for this guild. For all other purposes, it should be considered to be  builtins.None ."}, {"r": "hikari.guilds.Guild.region", "u": 7, "d": "The voice region for the guild."}, {"r": "hikari.guilds.Guild.rules_channel_id", "u": 7, "d": "The ID of the channel where guilds with the  GuildFeature.COMMUNITY  features display rules and guidelines. If the  GuildFeature.COMMUNITY feature is not defined, then this is  builtins.None ."}, {"r": "hikari.guilds.Guild.splash_hash", "u": 7, "d": "The hash of the splash for the guild, if there is one."}, {"r": "hikari.guilds.Guild.system_channel_flags", "u": 7, "d": "Return flags for the guild system channel. These are used to describe which notifications are suppressed. Returns    - GuildSystemChannelFlag The system channel flags for this channel."}, {"r": "hikari.guilds.Guild.system_channel_id", "u": 7, "d": "The ID of the system channel or  builtins.None if it is not enabled. Welcome messages and Nitro boost messages may be sent to this channel."}, {"r": "hikari.guilds.Guild.vanity_url_code", "u": 7, "d": "The vanity URL code for the guild's vanity URL. This is only present if  GuildFeature.VANITY_URL is in  Guild.features for this guild. If not, this will always be  builtins.None ."}, {"r": "hikari.guilds.Guild.verification_level", "u": 7, "d": "The verification level needed for a user to participate in this guild."}, {"r": "hikari.guilds.Guild.widget_channel_id", "u": 7, "d": "The channel ID that the widget's generated invite will send the user to. If this information is unavailable or this is not enabled for the guild then this will be  builtins.None ."}, {"r": "hikari.guilds.Guild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.guilds.Guild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.guilds.Guild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.Guild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.Guild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.guilds.Guild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.Guild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.guilds.Guild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.RESTGuild", "u": 7, "d": "Guild specialization that is sent via the REST API only. Method generated by attrs for class RESTGuild."}, {"r": "hikari.guilds.RESTGuild.emojis", "u": 7, "d": "Return the emojis in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A mapping of emoji IDs to the objects of emojis in this guild."}, {"r": "hikari.guilds.RESTGuild.roles", "u": 7, "d": "Return the roles in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, Role] A mapping of role IDs to the objects of roles in this guild."}, {"r": "hikari.guilds.RESTGuild.get_emoji", "u": 7, "d": "Get an emoji from the cache by it's ID.", "f": 1}, {"r": "hikari.guilds.RESTGuild.get_role", "u": 7, "d": "Get a role from the cache by it's ID.", "f": 1}, {"r": "hikari.guilds.RESTGuild.approximate_active_member_count", "u": 7, "d": "The approximate number of members in the guild that are not offline. This will be  builtins.None when creating a guild."}, {"r": "hikari.guilds.RESTGuild.approximate_member_count", "u": 7, "d": "The approximate number of members in the guild. This will be  builtins.None when creating a guild."}, {"r": "hikari.guilds.RESTGuild.max_members", "u": 7, "d": "The maximum number of members allowed in this guild."}, {"r": "hikari.guilds.RESTGuild.max_presences", "u": 7, "d": "The maximum number of presences for the guild."}, {"r": "hikari.guilds.RESTGuild.banner_url", "u": 7, "d": "Banner for the guild, if set."}, {"r": "hikari.guilds.RESTGuild.discovery_splash_url", "u": 7, "d": "Discovery splash for the guild, if set."}, {"r": "hikari.guilds.RESTGuild.splash_url", "u": 7, "d": "Splash for the guild, if set."}, {"r": "hikari.guilds.RESTGuild.format_banner", "u": 7, "d": "Generate the guild's banner image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL of the banner, or  builtins.None if no banner is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.RESTGuild.format_discovery_splash", "u": 7, "d": "Generate the guild's discovery splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The string URL. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.RESTGuild.format_splash", "u": 7, "d": "Generate the guild's splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the splash, or  builtins.None if not set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.RESTGuild.afk_channel_id", "u": 7, "d": "The ID for the channel that AFK voice users get sent to. If  builtins.None , then no AFK channel is set up for this guild."}, {"r": "hikari.guilds.RESTGuild.afk_timeout", "u": 7, "d": "Timeout for activity before a member is classed as AFK. How long a voice user has to be AFK for before they are classed as being AFK and are moved to the AFK channel ( Guild.afk_channel_id )."}, {"r": "hikari.guilds.RESTGuild.application_id", "u": 7, "d": "The ID of the application that created this guild. This will always be  builtins.None for guilds that weren't created by a bot."}, {"r": "hikari.guilds.RESTGuild.banner_hash", "u": 7, "d": "The hash for the guild's banner. This is only present if the guild has  GuildFeature.BANNER in  Guild.features for this guild. For all other purposes, it is  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.default_message_notifications", "u": 7, "d": "The default setting for message notifications in this guild."}, {"r": "hikari.guilds.RESTGuild.description", "u": 7, "d": "The guild's description. This is only present if certain  GuildFeature 's are set in  Guild.features for this guild. Otherwise, this will always be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.discovery_splash_hash", "u": 7, "d": "The hash of the discovery splash for the guild, if there is one."}, {"r": "hikari.guilds.RESTGuild.explicit_content_filter", "u": 7, "d": "The setting for the explicit content filter in this guild."}, {"r": "hikari.guilds.RESTGuild.features", "u": 7, "d": "A list of the features in this guild."}, {"r": "hikari.guilds.RESTGuild.is_widget_enabled", "u": 7, "d": "Describes whether the guild widget is enabled or not. If this information is not present, this will be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.max_video_channel_users", "u": 7, "d": "The maximum number of users allowed in a video channel together. This information may not be present, in which case, it will be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.mfa_level", "u": 7, "d": "The required MFA level for users wishing to participate in this guild."}, {"r": "hikari.guilds.RESTGuild.owner_id", "u": 7, "d": "The ID of the owner of this guild."}, {"r": "hikari.guilds.RESTGuild.preferred_locale", "u": 7, "d": "The preferred locale to use for this guild. This can only be change if  GuildFeature.COMMUNITY is in  Guild.features for this guild and will otherwise default to  en-US ."}, {"r": "hikari.guilds.RESTGuild.premium_subscription_count", "u": 7, "d": "The number of nitro boosts that the server currently has. This information may not be present, in which case, it will be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.premium_tier", "u": 7, "d": "The premium tier for this guild."}, {"r": "hikari.guilds.RESTGuild.public_updates_channel_id", "u": 7, "d": "The channel ID of the channel where admins and moderators receive notices from Discord. This is only present if  GuildFeature.COMMUNITY is in  Guild.features for this guild. For all other purposes, it should be considered to be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.region", "u": 7, "d": "The voice region for the guild."}, {"r": "hikari.guilds.RESTGuild.rules_channel_id", "u": 7, "d": "The ID of the channel where guilds with the  GuildFeature.COMMUNITY  features display rules and guidelines. If the  GuildFeature.COMMUNITY feature is not defined, then this is  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.splash_hash", "u": 7, "d": "The hash of the splash for the guild, if there is one."}, {"r": "hikari.guilds.RESTGuild.system_channel_flags", "u": 7, "d": "Return flags for the guild system channel. These are used to describe which notifications are suppressed. Returns    - GuildSystemChannelFlag The system channel flags for this channel."}, {"r": "hikari.guilds.RESTGuild.system_channel_id", "u": 7, "d": "The ID of the system channel or  builtins.None if it is not enabled. Welcome messages and Nitro boost messages may be sent to this channel."}, {"r": "hikari.guilds.RESTGuild.vanity_url_code", "u": 7, "d": "The vanity URL code for the guild's vanity URL. This is only present if  GuildFeature.VANITY_URL is in  Guild.features for this guild. If not, this will always be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.verification_level", "u": 7, "d": "The verification level needed for a user to participate in this guild."}, {"r": "hikari.guilds.RESTGuild.widget_channel_id", "u": 7, "d": "The channel ID that the widget's generated invite will send the user to. If this information is unavailable or this is not enabled for the guild then this will be  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.guilds.RESTGuild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.guilds.RESTGuild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.RESTGuild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.RESTGuild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.guilds.RESTGuild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.RESTGuild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.guilds.RESTGuild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.GatewayGuild", "u": 7, "d": "Guild specialization that is sent via the gateway only. Method generated by attrs for class GatewayGuild."}, {"r": "hikari.guilds.GatewayGuild.channels", "u": 7, "d": "Get the channels cached for the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A mapping of channel IDs to objects of the channels cached for the guild."}, {"r": "hikari.guilds.GatewayGuild.emojis", "u": 7, "d": "Return the emojis in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A mapping of emoji IDs to the objects of emojis in this guild."}, {"r": "hikari.guilds.GatewayGuild.members", "u": 7, "d": "Get the members cached for the guild. typing.Mapping[hikari.snowflakes.Snowflake, Member] A mapping of user IDs to objects of the members cached for the guild."}, {"r": "hikari.guilds.GatewayGuild.presences", "u": 7, "d": "Get the presences cached for the guild. typing.Mapping[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] A mapping of user IDs to objects of the presences cached for the guild."}, {"r": "hikari.guilds.GatewayGuild.roles", "u": 7, "d": "Return the roles in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, Role] A mapping of role IDs to the objects of roles in this guild."}, {"r": "hikari.guilds.GatewayGuild.voice_states", "u": 7, "d": "Get the voice states cached for the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A mapping of user IDs to objects of the voice states cached for the guild."}, {"r": "hikari.guilds.GatewayGuild.get_channel", "u": 7, "d": "Get a cached channel that belongs to the guild by it's ID or object. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The object or ID of the guild channel to get from the cache. Returns    - typing.Optional[hikari.channels.GuildChannel] The object of the guild channel found in cache or  builtins.None.", "f": 1}, {"r": "hikari.guilds.GatewayGuild.get_emoji", "u": 7, "d": "Get a cached role that belongs to the guild by it's ID or object. Parameters      emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The object or ID of the emoji to get from the cache. Returns    - typing.Optional[hikari.emojis.KnownCustomEmoji] The object of the custom emoji if found in cache, else  builtins.None .", "f": 1}, {"r": "hikari.guilds.GatewayGuild.get_member", "u": 7, "d": "Get a cached member that belongs to the guild by it's user ID or object. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.User] The object or ID of the user to get the cached member for. Returns    - typing.Optional[Member] The cached member object if found, else  builtins.None .", "f": 1}, {"r": "hikari.guilds.GatewayGuild.get_my_member", "u": 7, "d": "Return the cached member for the bot user in this guild, if known. Returns    - typing.Optional[Member] The cached member for this guild, or  builtins.None if not known. This will be sent on each  hikari.events.guild_events.GuildAvailableEvent , as well as any presence updates if you have opted into them.", "f": 1}, {"r": "hikari.guilds.GatewayGuild.get_presence", "u": 7, "d": "Get a cached presence that belongs to the guild by it's user ID or object. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.User] The object or ID of the user to get the cached presence for. Returns    - typing.Optional[hikari.presences.MemberPresence] The cached presence object if found, else  builtins.None .", "f": 1}, {"r": "hikari.guilds.GatewayGuild.get_role", "u": 7, "d": "Get a cached role that belongs to the guild by it's ID or object. Parameters      role : hikari.snowflakes.SnowflakeishOr[Role] The object or ID of the role to get for this guild from the cache. Returns    - typing.Optional[Role] The object of the role found in cache, else  builtins.None .", "f": 1}, {"r": "hikari.guilds.GatewayGuild.get_voice_state", "u": 7, "d": "Get a cached voice state that belongs to the guild by it's user. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.User] The object or ID of the user to get the cached voice state for. Returns    - typing.Optional[hikari.voices.VoiceState] The cached voice state object if found, else  builtins.None .", "f": 1}, {"r": "hikari.guilds.GatewayGuild.is_large", "u": 7, "d": "Whether the guild is considered to be large or not. This information is only available if the guild was sent via a  GUILD_CREATE event. If the guild is received from any other place, this will always be  builtins.None . The implications of a large guild are that presence information will not be sent about members who are offline or invisible."}, {"r": "hikari.guilds.GatewayGuild.joined_at", "u": 7, "d": "The date and time that the bot user joined this guild. This information is only available if the guild was sent via a  GUILD_CREATE event. If the guild is received from any other place, this will always be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.member_count", "u": 7, "d": "The number of members in this guild. This information is only available if the guild was sent via a  GUILD_CREATE event. If the guild is received from any other place, this will always be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.banner_url", "u": 7, "d": "Banner for the guild, if set."}, {"r": "hikari.guilds.GatewayGuild.discovery_splash_url", "u": 7, "d": "Discovery splash for the guild, if set."}, {"r": "hikari.guilds.GatewayGuild.splash_url", "u": 7, "d": "Splash for the guild, if set."}, {"r": "hikari.guilds.GatewayGuild.format_banner", "u": 7, "d": "Generate the guild's banner image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL of the banner, or  builtins.None if no banner is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GatewayGuild.format_discovery_splash", "u": 7, "d": "Generate the guild's discovery splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The string URL. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GatewayGuild.format_splash", "u": 7, "d": "Generate the guild's splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the splash, or  builtins.None if not set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GatewayGuild.afk_channel_id", "u": 7, "d": "The ID for the channel that AFK voice users get sent to. If  builtins.None , then no AFK channel is set up for this guild."}, {"r": "hikari.guilds.GatewayGuild.afk_timeout", "u": 7, "d": "Timeout for activity before a member is classed as AFK. How long a voice user has to be AFK for before they are classed as being AFK and are moved to the AFK channel ( Guild.afk_channel_id )."}, {"r": "hikari.guilds.GatewayGuild.application_id", "u": 7, "d": "The ID of the application that created this guild. This will always be  builtins.None for guilds that weren't created by a bot."}, {"r": "hikari.guilds.GatewayGuild.banner_hash", "u": 7, "d": "The hash for the guild's banner. This is only present if the guild has  GuildFeature.BANNER in  Guild.features for this guild. For all other purposes, it is  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.default_message_notifications", "u": 7, "d": "The default setting for message notifications in this guild."}, {"r": "hikari.guilds.GatewayGuild.description", "u": 7, "d": "The guild's description. This is only present if certain  GuildFeature 's are set in  Guild.features for this guild. Otherwise, this will always be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.discovery_splash_hash", "u": 7, "d": "The hash of the discovery splash for the guild, if there is one."}, {"r": "hikari.guilds.GatewayGuild.explicit_content_filter", "u": 7, "d": "The setting for the explicit content filter in this guild."}, {"r": "hikari.guilds.GatewayGuild.features", "u": 7, "d": "A list of the features in this guild."}, {"r": "hikari.guilds.GatewayGuild.is_widget_enabled", "u": 7, "d": "Describes whether the guild widget is enabled or not. If this information is not present, this will be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.max_video_channel_users", "u": 7, "d": "The maximum number of users allowed in a video channel together. This information may not be present, in which case, it will be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.mfa_level", "u": 7, "d": "The required MFA level for users wishing to participate in this guild."}, {"r": "hikari.guilds.GatewayGuild.owner_id", "u": 7, "d": "The ID of the owner of this guild."}, {"r": "hikari.guilds.GatewayGuild.preferred_locale", "u": 7, "d": "The preferred locale to use for this guild. This can only be change if  GuildFeature.COMMUNITY is in  Guild.features for this guild and will otherwise default to  en-US ."}, {"r": "hikari.guilds.GatewayGuild.premium_subscription_count", "u": 7, "d": "The number of nitro boosts that the server currently has. This information may not be present, in which case, it will be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.premium_tier", "u": 7, "d": "The premium tier for this guild."}, {"r": "hikari.guilds.GatewayGuild.public_updates_channel_id", "u": 7, "d": "The channel ID of the channel where admins and moderators receive notices from Discord. This is only present if  GuildFeature.COMMUNITY is in  Guild.features for this guild. For all other purposes, it should be considered to be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.region", "u": 7, "d": "The voice region for the guild."}, {"r": "hikari.guilds.GatewayGuild.rules_channel_id", "u": 7, "d": "The ID of the channel where guilds with the  GuildFeature.COMMUNITY  features display rules and guidelines. If the  GuildFeature.COMMUNITY feature is not defined, then this is  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.splash_hash", "u": 7, "d": "The hash of the splash for the guild, if there is one."}, {"r": "hikari.guilds.GatewayGuild.system_channel_flags", "u": 7, "d": "Return flags for the guild system channel. These are used to describe which notifications are suppressed. Returns    - GuildSystemChannelFlag The system channel flags for this channel."}, {"r": "hikari.guilds.GatewayGuild.system_channel_id", "u": 7, "d": "The ID of the system channel or  builtins.None if it is not enabled. Welcome messages and Nitro boost messages may be sent to this channel."}, {"r": "hikari.guilds.GatewayGuild.vanity_url_code", "u": 7, "d": "The vanity URL code for the guild's vanity URL. This is only present if  GuildFeature.VANITY_URL is in  Guild.features for this guild. If not, this will always be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.verification_level", "u": 7, "d": "The verification level needed for a user to participate in this guild."}, {"r": "hikari.guilds.GatewayGuild.widget_channel_id", "u": 7, "d": "The channel ID that the widget's generated invite will send the user to. If this information is unavailable or this is not enabled for the guild then this will be  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.guilds.GatewayGuild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.guilds.GatewayGuild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GatewayGuild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.GatewayGuild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.guilds.GatewayGuild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.GatewayGuild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.guilds.GatewayGuild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.GuildWidget", "u": 7, "d": "Represents a guild widget. Method generated by attrs for class GuildWidget."}, {"r": "hikari.guilds.GuildWidget.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.GuildWidget.channel_id", "u": 7, "d": "The ID of the channel the invite for this embed targets, if enabled."}, {"r": "hikari.guilds.GuildWidget.is_enabled", "u": 7, "d": "Whether this embed is enabled."}, {"r": "hikari.guilds.Role", "u": 7, "d": "Represents a guild bound Role object. Method generated by attrs for class Role."}, {"r": "hikari.guilds.Role.colour", "u": 7, "d": "Alias for the  color field."}, {"r": "hikari.guilds.Role.bot_id", "u": 7, "d": "The ID of the bot this role belongs to. If  builtins.None , this is not a bot role."}, {"r": "hikari.guilds.Role.color", "u": 7, "d": "The colour of this role. This will be applied to a member's name in chat if it's their top coloured role."}, {"r": "hikari.guilds.Role.guild_id", "u": 7, "d": "The ID of the guild this role belongs to"}, {"r": "hikari.guilds.Role.integration_id", "u": 7, "d": "The ID of the integration this role belongs to. If  builtins.None , this is not a integration role."}, {"r": "hikari.guilds.Role.is_hoisted", "u": 7, "d": "Whether this role is hoisting the members it's attached to in the member list. members will be hoisted under their highest role where this is set to  builtins.True ."}, {"r": "hikari.guilds.Role.is_managed", "u": 7, "d": "Whether this role is managed by an integration."}, {"r": "hikari.guilds.Role.is_mentionable", "u": 7, "d": "Whether this role can be mentioned by all regardless of permissions."}, {"r": "hikari.guilds.Role.is_premium_subscriber_role", "u": 7, "d": "Whether this role is the guild's nitro subscriber role."}, {"r": "hikari.guilds.Role.permissions", "u": 7, "d": "The guild wide permissions this role gives to the members it's attached to, This may be overridden by channel overwrites."}, {"r": "hikari.guilds.Role.position", "u": 7, "d": "The position of this role in the role hierarchy. This will start at  0 for the lowest role (@everyone) and increase as you go up the hierarchy."}, {"r": "hikari.guilds.Role.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.Role.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.Role.name", "u": 7, "d": "The role's name."}, {"r": "hikari.guilds.Role.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.GuildFeature", "u": 7, "d": "Features that a guild can provide."}, {"r": "hikari.guilds.GuildFeature.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.GuildFeature.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.GuildFeature.ANIMATED_ICON", "u": 7, "d": "Guild has access to set an animated guild icon."}, {"r": "hikari.guilds.GuildFeature.BANNER", "u": 7, "d": "Guild has access to set a guild banner image."}, {"r": "hikari.guilds.GuildFeature.COMMERCE", "u": 7, "d": "Guild has access to use commerce features (i.e. create store channels)."}, {"r": "hikari.guilds.GuildFeature.COMMUNITY", "u": 7, "d": "Guild has community features enabled."}, {"r": "hikari.guilds.GuildFeature.DISCOVERABLE", "u": 7, "d": "Guild is able to be discovered in the directory. This also implies the guild can be viewed without joining."}, {"r": "hikari.guilds.GuildFeature.FEATURABLE", "u": 7, "d": "Guild is able to be featured in the directory."}, {"r": "hikari.guilds.GuildFeature.INVITE_SPLASH", "u": 7, "d": "Guild has access to set an invite splash background."}, {"r": "hikari.guilds.GuildFeature.MORE_EMOJI", "u": 7, "d": "More emojis can be hosted in this guild than normal."}, {"r": "hikari.guilds.GuildFeature.NEWS", "u": 7, "d": "Guild has access to create news channels."}, {"r": "hikari.guilds.GuildFeature.PARTNERED", "u": 7, "d": "Guild is partnered."}, {"r": "hikari.guilds.GuildFeature.RELAY_ENABLED", "u": 7, "d": "Guild is using relays. Relays are new infrastructure designed to handle large guilds more efficiently server-side."}, {"r": "hikari.guilds.GuildFeature.VANITY_URL", "u": 7, "d": "Guild has access to set a vanity URL."}, {"r": "hikari.guilds.GuildFeature.VERIFIED", "u": 7, "d": "Guild is verified."}, {"r": "hikari.guilds.GuildFeature.VIP_REGIONS", "u": 7, "d": "Guild has access to set 384kbps bitrate in voice. Previously gave access to VIP voice servers."}, {"r": "hikari.guilds.GuildFeature.WELCOME_SCREEN_ENABLED", "u": 7, "d": "Guild has enabled the welcome screen."}, {"r": "hikari.guilds.GuildFeature.MEMBER_VERIFICATION_GATE_ENABLED", "u": 7, "d": "Guild has enabled Membership Screening."}, {"r": "hikari.guilds.GuildFeature.PREVIEW_ENABLED", "u": 7, "d": "Guild can be viewed before Membership Screening is complete."}, {"r": "hikari.guilds.GuildFeatureish", "u": 7, "d": "Type hint for possible guild features. Generally these will be of type  GuildFeature , but undocumented or new fields may just be  builtins.str until they are documented and amended to the library."}, {"r": "hikari.guilds.GuildSystemChannelFlag", "u": 7, "d": "Defines which features are suppressed in the system channel."}, {"r": "hikari.guilds.GuildSystemChannelFlag.name", "u": 7, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.guilds.GuildSystemChannelFlag.value", "u": 7, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.guilds.GuildSystemChannelFlag.all", "u": 7, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.any", "u": 7, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.difference", "u": 7, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.intersection", "u": 7, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.invert", "u": 7, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.is_disjoint", "u": 7, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.is_subset", "u": 7, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.is_superset", "u": 7, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.none", "u": 7, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.split", "u": 7, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.symmetric_difference", "u": 7, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.union", "u": 7, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.isdisjoint", "u": 7, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.issubset", "u": 7, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.issuperset", "u": 7, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.symmetricdifference", "u": 7, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.guilds.GuildSystemChannelFlag.NONE", "u": 7, "d": "Nothing is suppressed."}, {"r": "hikari.guilds.GuildSystemChannelFlag.SUPPRESS_USER_JOIN", "u": 7, "d": "Display a message about new users joining."}, {"r": "hikari.guilds.GuildSystemChannelFlag.SUPPRESS_PREMIUM_SUBSCRIPTION", "u": 7, "d": "Display a message when the guild is Nitro boosted."}, {"r": "hikari.guilds.GuildMessageNotificationsLevel", "u": 7, "d": "Represents the default notification level for new messages in a guild."}, {"r": "hikari.guilds.GuildMessageNotificationsLevel.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.GuildMessageNotificationsLevel.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.GuildMessageNotificationsLevel.ALL_MESSAGES", "u": 7, "d": "Notify users when any message is sent."}, {"r": "hikari.guilds.GuildMessageNotificationsLevel.ONLY_MENTIONS", "u": 7, "d": "Only notify users when they are @mentioned."}, {"r": "hikari.guilds.GuildExplicitContentFilterLevel", "u": 7, "d": "Represents the explicit content filter setting for a guild."}, {"r": "hikari.guilds.GuildExplicitContentFilterLevel.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.GuildExplicitContentFilterLevel.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.GuildExplicitContentFilterLevel.DISABLED", "u": 7, "d": "No explicit content filter."}, {"r": "hikari.guilds.GuildExplicitContentFilterLevel.MEMBERS_WITHOUT_ROLES", "u": 7, "d": "Filter posts from anyone without a role."}, {"r": "hikari.guilds.GuildExplicitContentFilterLevel.ALL_MEMBERS", "u": 7, "d": "Filter all posts."}, {"r": "hikari.guilds.GuildMFALevel", "u": 7, "d": "Represents the multi-factor authorization requirement for a guild."}, {"r": "hikari.guilds.GuildMFALevel.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.GuildMFALevel.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.GuildMFALevel.NONE", "u": 7, "d": "No MFA requirement."}, {"r": "hikari.guilds.GuildMFALevel.ELEVATED", "u": 7, "d": "MFA requirement."}, {"r": "hikari.guilds.GuildVerificationLevel", "u": 7, "d": "Represents the level of verification of a guild."}, {"r": "hikari.guilds.GuildVerificationLevel.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.GuildVerificationLevel.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.GuildVerificationLevel.NONE", "u": 7, "d": "Unrestricted."}, {"r": "hikari.guilds.GuildVerificationLevel.LOW", "u": 7, "d": "Must have a verified email on their account."}, {"r": "hikari.guilds.GuildVerificationLevel.MEDIUM", "u": 7, "d": "Must have been registered on Discord for more than 5 minutes."}, {"r": "hikari.guilds.GuildVerificationLevel.HIGH", "u": 7, "d": "Must also be a member of the guild for longer than 10 minutes."}, {"r": "hikari.guilds.GuildVerificationLevel.VERY_HIGH", "u": 7, "d": "Must have a verified phone number."}, {"r": "hikari.guilds.GuildPremiumTier", "u": 7, "d": "Tier for Discord Nitro boosting in a guild."}, {"r": "hikari.guilds.GuildPremiumTier.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.GuildPremiumTier.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.GuildPremiumTier.NONE", "u": 7, "d": "No Nitro boost level."}, {"r": "hikari.guilds.GuildPremiumTier.TIER_1", "u": 7, "d": "Level 1 Nitro boost."}, {"r": "hikari.guilds.GuildPremiumTier.TIER_2", "u": 7, "d": "Level 2 Nitro boost."}, {"r": "hikari.guilds.GuildPremiumTier.TIER_3", "u": 7, "d": "Level 3 Nitro boost."}, {"r": "hikari.guilds.GuildPreview", "u": 7, "d": "A preview of a guild with the  GuildFeature.DISCOVERABLE feature. Method generated by attrs for class GuildPreview."}, {"r": "hikari.guilds.GuildPreview.discovery_splash_url", "u": 7, "d": "Discovery splash for the guild, if set."}, {"r": "hikari.guilds.GuildPreview.splash_url", "u": 7, "d": "Splash for the guild, if set."}, {"r": "hikari.guilds.GuildPreview.format_discovery_splash", "u": 7, "d": "Generate the guild's discovery splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The string URL. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GuildPreview.format_splash", "u": 7, "d": "Generate the guild's splash image, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the splash, or  builtins.None if not set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GuildPreview.approximate_active_member_count", "u": 7, "d": "The approximate amount of presences in this guild."}, {"r": "hikari.guilds.GuildPreview.approximate_member_count", "u": 7, "d": "The approximate amount of members in this guild."}, {"r": "hikari.guilds.GuildPreview.description", "u": 7, "d": "The guild's description, if set."}, {"r": "hikari.guilds.GuildPreview.discovery_splash_hash", "u": 7, "d": "The hash of the discovery splash for the guild, if there is one."}, {"r": "hikari.guilds.GuildPreview.emojis", "u": 7, "d": "The mapping of IDs to the emojis this guild provides."}, {"r": "hikari.guilds.GuildPreview.features", "u": 7, "d": "A list of the features in this guild."}, {"r": "hikari.guilds.GuildPreview.splash_hash", "u": 7, "d": "The hash of the splash for the guild, if there is one."}, {"r": "hikari.guilds.GuildPreview.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.guilds.GuildPreview.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.guilds.GuildPreview.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.GuildPreview.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.GuildPreview.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.guilds.GuildPreview.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.GuildPreview.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.guilds.GuildPreview.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.GuildMemberBan", "u": 7, "d": "Used to represent guild bans. Method generated by attrs for class GuildMemberBan."}, {"r": "hikari.guilds.GuildMemberBan.reason", "u": 7, "d": "The reason for this ban, will be  builtins.None if no reason was given."}, {"r": "hikari.guilds.GuildMemberBan.user", "u": 7, "d": "The object of the user this ban targets."}, {"r": "hikari.guilds.Member", "u": 7, "d": "Used to represent a guild bound member. Method generated by attrs for class Member."}, {"r": "hikari.guilds.Member.app", "u": 7, "d": "Return the app that is bound to the user object."}, {"r": "hikari.guilds.Member.avatar_hash", "u": 7, "d": "Avatar hash for the user, if they have one, otherwise  builtins.None ."}, {"r": "hikari.guilds.Member.avatar_url", "u": 7, "d": "Avatar URL for the user, if they have one set. May be  builtins.None if no custom avatar is set. In this case, you should use  default_avatar_url instead."}, {"r": "hikari.guilds.Member.default_avatar_url", "u": 7, "d": "Default avatar for this user."}, {"r": "hikari.guilds.Member.discriminator", "u": 7, "d": "Discriminator for the user."}, {"r": "hikari.guilds.Member.display_name", "u": 7, "d": "Return the member's display name. If the member has a nickname, this will return that nickname. Otherwise, it will return the username instead. Returns    - builtins.str The member display name. See Also     Nickname:  Member.nickname Username:  Member.username "}, {"r": "hikari.guilds.Member.flags", "u": 7, "d": "Flag bits that are set for the user."}, {"r": "hikari.guilds.Member.id", "u": 7, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.guilds.Member.is_bot", "u": 7, "d": " builtins.True if this user is a bot account,  builtins.False otherwise."}, {"r": "hikari.guilds.Member.is_system", "u": 7, "d": " builtins.True if this user is a system account,  builtins.False otherwise."}, {"r": "hikari.guilds.Member.mention", "u": 7, "d": "Return a raw mention string for the given member. If the member has a known nickname, we always return a bang (\" ! \") before the ID part of the mention string. This mimics the behaviour Discord clients tend to provide. Example    -   >>> some_member_without_nickname.mention ' ' >>> some_member_with_nickname.mention ' '   Returns    - builtins.str The mention string to use."}, {"r": "hikari.guilds.Member.presence", "u": 7, "d": "Get the cached presence for this member, if known. Presence info includes user status and activities. This requires the  GUILD_PRESENCES intent to be enabled. Returns    - typing.Optional[hikari.presences.MemberPresence] The member presence, or  builtins.None if not known."}, {"r": "hikari.guilds.Member.roles", "u": 7, "d": "Return the roles the user has. This will be empty if the roles are missing from the cache. Returns    - typing.Sequence[hikari.guilds.Role] The roles the users has."}, {"r": "hikari.guilds.Member.top_role", "u": 7, "d": "Return the highest role the member has. Returns    - typing.Optional[hikari.guilds.Role]  builtins.None if the cache is missing the roles information or the highest role the user has."}, {"r": "hikari.guilds.Member.username", "u": 7, "d": "Username for the user."}, {"r": "hikari.guilds.Member.format_avatar", "u": 7, "d": "Generate the avatar for this user, if set. If no custom avatar is set, this returns  builtins.None . You can then use the  default_avatar_url attribute instead to fetch the displayed URL. Parameters      ext : typing.Optional[builtins.str] The ext to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). Will be ignored for default avatars which can only be  png . If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Will be ignored for default avatars. Returns    - typing.Optional[hikari.files.URL] The URL to the avatar, or  builtins.None if not present. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.Member.fetch_self", "u": 7, "d": "Fetch an up-to-date view of this member from the API. Returns    - hikari.guilds.Member An up-to-date view of this member.", "f": 1}, {"r": "hikari.guilds.Member.fetch_dm_channel", "u": 7, "d": "Fetch the DM channel for this user. Returns    - hikari.channels.DMChannel The requested channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.guilds.Member.ban", "u": 7, "d": "Ban this member from this guild. Other Parameters         delete_message_days : hikari.undefined.UndefinedNoneOr[builtins.int] If provided, the number of days to delete messages for. This must be between 0 and 7. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.guilds.Member.guild_id", "u": 7, "d": "The ID of the guild this member belongs to."}, {"r": "hikari.guilds.Member.is_deaf", "u": 7, "d": " builtins.True if this member is deafened in the current voice channel. This will be  hikari.undefined.UNDEFINED if it's state is unknown."}, {"r": "hikari.guilds.Member.is_mute", "u": 7, "d": " builtins.True if this member is muted in the current voice channel. This will be  hikari.undefined.UNDEFINED if it's state is unknown."}, {"r": "hikari.guilds.Member.is_pending", "u": 7, "d": "Whether the user has passed the guild's membership screening requirements. This will be  hikari.undefined.UNDEFINED if it's state is unknown."}, {"r": "hikari.guilds.Member.joined_at", "u": 7, "d": "The datetime of when this member joined the guild they belong to."}, {"r": "hikari.guilds.Member.nickname", "u": 7, "d": "This member's nickname. This will be  builtins.None if not set. On member update events, this may not be included at all. In this case, this will be undefined."}, {"r": "hikari.guilds.Member.premium_since", "u": 7, "d": "The datetime of when this member started \"boosting\" this guild. Will be  builtins.None if the member is not a premium user."}, {"r": "hikari.guilds.Member.role_ids", "u": 7, "d": "A sequence of the IDs of the member's current roles."}, {"r": "hikari.guilds.Member.user", "u": 7, "d": "This member's corresponding user object."}, {"r": "hikari.guilds.Member.send", "u": 10, "d": "Send a message to this user in DM's. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.guilds.Member.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.Integration", "u": 7, "d": "Represents a guild integration object. Method generated by attrs for class Integration."}, {"r": "hikari.guilds.Integration.application", "u": 7, "d": "The bot/OAuth2 application associated with this integration.  ! note This is only available for Discord integrations."}, {"r": "hikari.guilds.Integration.expire_behavior", "u": 7, "d": "How members should be treated after their connected subscription expires. This will not be enacted until after  GuildIntegration.expire_grace_period passes.  ! note This will always be  builtins.None for Discord integrations."}, {"r": "hikari.guilds.Integration.expire_grace_period", "u": 7, "d": "How many days users with expired subscriptions are given until  GuildIntegration.expire_behavior is enacted out on them.  ! note This will always be  builtins.None for Discord integrations."}, {"r": "hikari.guilds.Integration.guild_id", "u": 7, "d": "The ID of the guild this integration belongs to."}, {"r": "hikari.guilds.Integration.is_emojis_enabled", "u": 7, "d": "Whether users under this integration are allowed to use it's custom emojis."}, {"r": "hikari.guilds.Integration.is_enabled", "u": 7, "d": "Whether this integration is enabled."}, {"r": "hikari.guilds.Integration.is_revoked", "u": 7, "d": "Whether the integration has been revoked."}, {"r": "hikari.guilds.Integration.is_syncing", "u": 7, "d": "Whether this integration is syncing subscribers/emojis."}, {"r": "hikari.guilds.Integration.last_synced_at", "u": 7, "d": "The datetime of when this integration's subscribers were last synced."}, {"r": "hikari.guilds.Integration.role_id", "u": 7, "d": "The ID of the managed role used for this integration's subscribers."}, {"r": "hikari.guilds.Integration.subscriber_count", "u": 7, "d": "The number of subscribers this integration has."}, {"r": "hikari.guilds.Integration.user", "u": 7, "d": "The user this integration belongs to."}, {"r": "hikari.guilds.Integration.account", "u": 7, "d": "The account connected to this integration."}, {"r": "hikari.guilds.Integration.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.Integration.name", "u": 7, "d": "The name of this integration."}, {"r": "hikari.guilds.Integration.type", "u": 7, "d": "The type of this integration."}, {"r": "hikari.guilds.Integration.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.IntegrationAccount", "u": 7, "d": "An account that's linked to an integration. Method generated by attrs for class IntegrationAccount."}, {"r": "hikari.guilds.IntegrationAccount.id", "u": 7, "d": "The string ID of this (likely) third party account."}, {"r": "hikari.guilds.IntegrationAccount.name", "u": 7, "d": "The name of this account."}, {"r": "hikari.guilds.IntegrationType", "u": 7, "d": "The integration type."}, {"r": "hikari.guilds.IntegrationType.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.IntegrationType.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.IntegrationType.TWITCH", "u": 7, "d": ""}, {"r": "hikari.guilds.IntegrationType.YOUTUBE", "u": 7, "d": ""}, {"r": "hikari.guilds.IntegrationType.DISCORD_BOT", "u": 7, "d": ""}, {"r": "hikari.guilds.IntegrationApplication", "u": 7, "d": "An application that's linked to an integration. Method generated by attrs for class IntegrationApplication."}, {"r": "hikari.guilds.IntegrationApplication.bot", "u": 7, "d": "The bot associated with this application."}, {"r": "hikari.guilds.IntegrationApplication.id", "u": 2, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.guilds.IntegrationApplication.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.IntegrationExpireBehaviour", "u": 7, "d": "Behavior for expiring integration subscribers."}, {"r": "hikari.guilds.IntegrationExpireBehaviour.name", "u": 7, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.guilds.IntegrationExpireBehaviour.value", "u": 7, "d": "Return the value of the enum member."}, {"r": "hikari.guilds.IntegrationExpireBehaviour.REMOVE_ROLE", "u": 7, "d": "Remove the role."}, {"r": "hikari.guilds.IntegrationExpireBehaviour.KICK", "u": 7, "d": "Kick the subscriber."}, {"r": "hikari.guilds.PartialGuild", "u": 7, "d": "Base object for any partial guild objects. Method generated by attrs for class PartialGuild."}, {"r": "hikari.guilds.PartialGuild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.guilds.PartialGuild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.guilds.PartialGuild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.guilds.PartialGuild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.PartialGuild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.guilds.PartialGuild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.PartialGuild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.guilds.PartialGuild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.PartialIntegration", "u": 7, "d": "A partial representation of an integration, found in audit logs. Method generated by attrs for class PartialIntegration."}, {"r": "hikari.guilds.PartialIntegration.account", "u": 7, "d": "The account connected to this integration."}, {"r": "hikari.guilds.PartialIntegration.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.PartialIntegration.name", "u": 7, "d": "The name of this integration."}, {"r": "hikari.guilds.PartialIntegration.type", "u": 7, "d": "The type of this integration."}, {"r": "hikari.guilds.PartialIntegration.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.PartialRole", "u": 7, "d": "Represents a partial guild bound Role object. Method generated by attrs for class PartialRole."}, {"r": "hikari.guilds.PartialRole.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.guilds.PartialRole.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.guilds.PartialRole.name", "u": 7, "d": "The role's name."}, {"r": "hikari.guilds.PartialRole.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.guilds.WelcomeScreen", "u": 7, "d": "Used to represent guild welcome screens on Discord. Method generated by attrs for class WelcomeScreen."}, {"r": "hikari.guilds.WelcomeScreen.channels", "u": 7, "d": "An array of up to 5 of the channels shown in the welcome screen."}, {"r": "hikari.guilds.WelcomeScreen.description", "u": 7, "d": "The guild's description shown in the welcome screen."}, {"r": "hikari.guilds.WelcomeChannel", "u": 7, "d": "Used to represent channels on guild welcome screens. Method generated by attrs for class WelcomeChannel."}, {"r": "hikari.guilds.WelcomeChannel.channel_id", "u": 7, "d": "ID of the channel shown in the welcome screen."}, {"r": "hikari.guilds.WelcomeChannel.description", "u": 7, "d": "The description shown for this channel."}, {"r": "hikari.guilds.WelcomeChannel.emoji", "u": 7, "d": "The emoji shown in the welcome screen channel if set else  builtins.None ."}, {"r": "hikari.audit_logs", "u": 11, "d": "Application and entities that are used to describe audit logs on Discord."}, {"r": "hikari.audit_logs.AuditLog", "u": 11, "d": "Represents a guilds audit log. Method generated by attrs for class AuditLog."}, {"r": "hikari.audit_logs.AuditLog.entries", "u": 11, "d": "A mapping of snowflake IDs to the audit log's entries."}, {"r": "hikari.audit_logs.AuditLog.integrations", "u": 11, "d": "A mapping of the partial objects of integrations found in this audit log."}, {"r": "hikari.audit_logs.AuditLog.users", "u": 11, "d": "A mapping of the objects of users found in this audit log."}, {"r": "hikari.audit_logs.AuditLog.webhooks", "u": 11, "d": "A mapping of the objects of webhooks found in this audit log."}, {"r": "hikari.audit_logs.AuditLogChange", "u": 11, "d": "Represents a change made to an audit log entry's target entity. Method generated by attrs for class AuditLogChange."}, {"r": "hikari.audit_logs.AuditLogChange.key", "u": 11, "d": "The name of the audit log change's key."}, {"r": "hikari.audit_logs.AuditLogChange.new_value", "u": 11, "d": "The new value of the key, if something was added or changed."}, {"r": "hikari.audit_logs.AuditLogChange.old_value", "u": 11, "d": "The old value of the key, if something was removed or changed."}, {"r": "hikari.audit_logs.AuditLogChangeKey", "u": 11, "d": "Commonly known and documented keys for audit log change objects. Others may exist. These should be expected to default to the raw string Discord provided us. These are defined for documentation purposes and can be treated as regular strings for all other purposes."}, {"r": "hikari.audit_logs.AuditLogChangeKey.name", "u": 11, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.audit_logs.AuditLogChangeKey.value", "u": 11, "d": "Return the value of the enum member."}, {"r": "hikari.audit_logs.AuditLogChangeKey.NAME", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.ICON_HASH", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.SPLASH_HASH", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.OWNER_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.REGION", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.AFK_CHANNEL_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.AFK_TIMEOUT", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.MFA_LEVEL", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.VERIFICATION_LEVEL", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.EXPLICIT_CONTENT_FILTER", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.DEFAULT_MESSAGE_NOTIFICATIONS", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.VANITY_URL_CODE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.PRUNE_DELETE_DAYS", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.WIDGET_ENABLED", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.WIDGET_CHANNEL_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.POSITION", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.TOPIC", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.BITRATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.PERMISSION_OVERWRITES", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.NSFW", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.APPLICATION_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.PERMISSIONS", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.COLOR", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.HOIST", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.MENTIONABLE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.ALLOW", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.DENY", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.INVITE_CODE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.CHANNEL_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.INVITER_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.MAX_USES", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.USES", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.MAX_AGE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.TEMPORARY", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.DEAF", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.MUTE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.NICK", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.AVATAR_HASH", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.TYPE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.ENABLE_EMOTICONS", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.EXPIRE_BEHAVIOR", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.EXPIRE_GRACE_PERIOD", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.RATE_LIMIT_PER_USER", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.SYSTEM_CHANNEL_ID", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.ADD_ROLE_TO_MEMBER", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.REMOVE_ROLE_FROM_MEMBER", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogChangeKey.COLOUR", "u": 11, "d": "Alias for \"COLOR"}, {"r": "hikari.audit_logs.AuditLogEntry", "u": 11, "d": "Represents an entry in a guild's audit log. Method generated by attrs for class AuditLogEntry."}, {"r": "hikari.audit_logs.AuditLogEntry.fetch_user", "u": 11, "d": "Fetch the user who made this change. Returns    - typing.Optional[hikari.users.User] The user who made this change, if available. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.audit_logs.AuditLogEntry.action_type", "u": 11, "d": "The type of action this entry represents."}, {"r": "hikari.audit_logs.AuditLogEntry.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.AuditLogEntry.changes", "u": 11, "d": "A sequence of the changes made to  AuditLogEntry.target_id ."}, {"r": "hikari.audit_logs.AuditLogEntry.id", "u": 11, "d": "The ID of this entity."}, {"r": "hikari.audit_logs.AuditLogEntry.options", "u": 11, "d": "Extra information about this entry. Only be provided for certain  event_type ."}, {"r": "hikari.audit_logs.AuditLogEntry.reason", "u": 11, "d": "The reason for this change, if set (between 0-512 characters)."}, {"r": "hikari.audit_logs.AuditLogEntry.target_id", "u": 11, "d": "The ID of the entity affected by this change, if applicable."}, {"r": "hikari.audit_logs.AuditLogEntry.user_id", "u": 11, "d": "The ID of the user who made this change."}, {"r": "hikari.audit_logs.AuditLogEntry.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.audit_logs.AuditLogEventType", "u": 11, "d": "The type of event that occurred."}, {"r": "hikari.audit_logs.AuditLogEventType.name", "u": 11, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.audit_logs.AuditLogEventType.value", "u": 11, "d": "Return the value of the enum member."}, {"r": "hikari.audit_logs.AuditLogEventType.GUILD_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.CHANNEL_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.CHANNEL_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.CHANNEL_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.CHANNEL_OVERWRITE_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.CHANNEL_OVERWRITE_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.CHANNEL_OVERWRITE_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_KICK", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_PRUNE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_BAN_ADD", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_BAN_REMOVE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_ROLE_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_MOVE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MEMBER_DISCONNECT", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.BOT_ADD", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.ROLE_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.ROLE_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.ROLE_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.INVITE_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.INVITE_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.INVITE_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.WEBHOOK_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.WEBHOOK_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.WEBHOOK_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.EMOJI_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.EMOJI_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.EMOJI_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MESSAGE_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MESSAGE_BULK_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MESSAGE_PIN", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.MESSAGE_UNPIN", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.INTEGRATION_CREATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.INTEGRATION_UPDATE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.AuditLogEventType.INTEGRATION_DELETE", "u": 11, "d": ""}, {"r": "hikari.audit_logs.BaseAuditLogEntryInfo", "u": 11, "d": "A base object that all audit log entry info objects will inherit from. Method generated by attrs for class BaseAuditLogEntryInfo."}, {"r": "hikari.audit_logs.BaseAuditLogEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.ChannelOverwriteEntryInfo", "u": 11, "d": "Represents the extra information for overwrite related audit log entries. Will be attached to the overwrite create, update and delete audit log entries. Method generated by attrs for class ChannelOverwriteEntryInfo."}, {"r": "hikari.audit_logs.ChannelOverwriteEntryInfo.id", "u": 11, "d": "The ID of this entity."}, {"r": "hikari.audit_logs.ChannelOverwriteEntryInfo.role_name", "u": 11, "d": "The name of the role this overwrite targets, if it targets a role."}, {"r": "hikari.audit_logs.ChannelOverwriteEntryInfo.type", "u": 11, "d": "The type of entity this overwrite targets."}, {"r": "hikari.audit_logs.ChannelOverwriteEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.ChannelOverwriteEntryInfo.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.audit_logs.MemberDisconnectEntryInfo", "u": 11, "d": "Extra information for the voice chat member disconnect entry. Method generated by attrs for class MemberDisconnectEntryInfo."}, {"r": "hikari.audit_logs.MemberDisconnectEntryInfo.count", "u": 11, "d": "The amount of members who were disconnected from voice in this entry."}, {"r": "hikari.audit_logs.MemberDisconnectEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.MemberMoveEntryInfo", "u": 11, "d": "Extra information for the voice chat based member move entry. Method generated by attrs for class MemberMoveEntryInfo."}, {"r": "hikari.audit_logs.MemberMoveEntryInfo.fetch_channel", "u": 11, "d": "Fetch the guild voice based channel where the member(s) have been moved to. Returns    - hikari.channels.GuildVoiceChannel The guild voice based channel where the member(s) have been moved to. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.audit_logs.MemberMoveEntryInfo.channel_id", "u": 11, "d": "The channel that the member(s) have been moved to"}, {"r": "hikari.audit_logs.MemberMoveEntryInfo.count", "u": 11, "d": "The amount of members who were disconnected from voice in this entry."}, {"r": "hikari.audit_logs.MemberMoveEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.MemberPruneEntryInfo", "u": 11, "d": "Extra information attached to guild prune log entries. Method generated by attrs for class MemberPruneEntryInfo."}, {"r": "hikari.audit_logs.MemberPruneEntryInfo.delete_member_days", "u": 11, "d": "The timedelta of how many days members were pruned for inactivity based on."}, {"r": "hikari.audit_logs.MemberPruneEntryInfo.members_removed", "u": 11, "d": "The number of members who were removed by this prune."}, {"r": "hikari.audit_logs.MemberPruneEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.MessageBulkDeleteEntryInfo", "u": 11, "d": "Extra information for the message bulk delete audit entry. Method generated by attrs for class MessageBulkDeleteEntryInfo."}, {"r": "hikari.audit_logs.MessageBulkDeleteEntryInfo.count", "u": 11, "d": "The amount of messages that were deleted."}, {"r": "hikari.audit_logs.MessageBulkDeleteEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.MessageDeleteEntryInfo", "u": 11, "d": "Extra information attached to the message delete audit entry. Method generated by attrs for class MessageDeleteEntryInfo."}, {"r": "hikari.audit_logs.MessageDeleteEntryInfo.fetch_channel", "u": 11, "d": "Fetch the guild text based channel where these message(s) were deleted. Returns    - hikari.channels.GuildTextChannel The guild text based channel where these message(s) were deleted. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.audit_logs.MessageDeleteEntryInfo.channel_id", "u": 11, "d": "The ID of guild text based channel where these message(s) were deleted."}, {"r": "hikari.audit_logs.MessageDeleteEntryInfo.count", "u": 11, "d": "The amount of messages that were deleted."}, {"r": "hikari.audit_logs.MessageDeleteEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.MessagePinEntryInfo", "u": 11, "d": "The extra information for message pin related audit log entries. Will be attached to the message pin and message unpin audit log entries. Method generated by attrs for class MessagePinEntryInfo."}, {"r": "hikari.audit_logs.MessagePinEntryInfo.fetch_channel", "u": 11, "d": "Fetch The channel where this message was pinned or unpinned. Returns    - hikari.channels.TextChannel The channel where this message was pinned or unpinned. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.audit_logs.MessagePinEntryInfo.fetch_message", "u": 11, "d": "Fetch the object of the message that's being pinned or unpinned. Returns    - hikari.messages.Message The message that's being pinned or unpinned. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel that the message is in. hikari.errors.NotFoundError If the message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.audit_logs.MessagePinEntryInfo.channel_id", "u": 11, "d": "The ID of the text based channel where a pinned message is being targeted."}, {"r": "hikari.audit_logs.MessagePinEntryInfo.message_id", "u": 11, "d": "The ID of the message that's being pinned or unpinned."}, {"r": "hikari.audit_logs.MessagePinEntryInfo.app", "u": 11, "d": "The client application that models may use for procedures."}, {"r": "hikari.audit_logs.UnrecognisedAuditLogEntryInfo", "u": 11, "d": "Audit log entry options that haven't been implemented in the library. The attributes on this object are undocumented and dynamic. Example    - >>> entry_info.foobar.baz  ! note This model has no slots and will have arbitrary undocumented attributes (in it's  __dict__ based on the received payload). Method generated by attrs for class BaseAuditLogEntryInfo."}, {"r": "hikari.audit_logs.UnrecognisedAuditLogEntryInfo.app", "u": 11, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.events", "u": 12, "d": "Events that can be fired by Hikari's gateway implementation."}, {"r": "hikari.events.voice_events", "u": 13, "d": "Events that fire when voice state changes."}, {"r": "hikari.events.voice_events.VoiceEvent", "u": 13, "d": "Base for any voice-related event. Method generated by attrs for class VoiceEvent."}, {"r": "hikari.events.voice_events.VoiceEvent.guild_id", "u": 13, "d": "ID of the guild this event is for. Returns    - hikari.snowflakes.Snowflake The guild ID of the guild this event relates to."}, {"r": "hikari.events.voice_events.VoiceEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.voice_events.VoiceEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.voice_events.VoiceStateUpdateEvent", "u": 13, "d": "Event fired when a user changes their voice state. Sent when a user joins, leaves or moves voice channel(s). This is also fired for the application user, and is used when preparing to connect to the voice gateway to stream audio or video content. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_VOICE_STATES Method generated by attrs for class VoiceStateUpdateEvent."}, {"r": "hikari.events.voice_events.VoiceStateUpdateEvent.guild_id", "u": 13, "d": "ID of the guild this event is for. Returns    - hikari.snowflakes.Snowflake The guild ID of the guild this event relates to."}, {"r": "hikari.events.voice_events.VoiceStateUpdateEvent.app", "u": 13, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.voice_events.VoiceStateUpdateEvent.old_state", "u": 13, "d": "The old voice state. This will be  builtins.None if the voice state missing from the cache."}, {"r": "hikari.events.voice_events.VoiceStateUpdateEvent.shard", "u": 13, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.voice_events.VoiceStateUpdateEvent.state", "u": 13, "d": "Voice state that this update contained. Returns    - hikari.voices.VoiceState The voice state that was updated."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent", "u": 13, "d": "Event fired when a voice server is changed. Sent when initially connecting to voice and when the current voice instance falls over to a new server. Method generated by attrs for class VoiceServerUpdateEvent."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent.endpoint", "u": 13, "d": "URI for this voice server host, with the correct scheme prepended. Returns    - builtins.str The URI to use to connect to the voice gateway."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent.app", "u": 13, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent.guild_id", "u": 13, "d": "ID of the guild this event is for. Returns    - hikari.snowflakes.Snowflake The guild ID of the guild this event relates to."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent.raw_endpoint", "u": 13, "d": "Raw endpoint URI that Discord sent.  ! warning This will not contain the scheme to use. Use the  endpoint property to get a representation that has this prepended. Returns    - builtins.str A scheme-less endpoint URI for the endpoint to use for a new voice websocket."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent.shard", "u": 13, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.voice_events.VoiceServerUpdateEvent.token", "u": 13, "d": "Token that should be used to authenticate with the voice gateway. Returns    - builtins.str The token to use to authenticate with the voice gateway."}, {"r": "hikari.events.role_events", "u": 16, "d": "Events pertaining to manipulation of roles within guilds."}, {"r": "hikari.events.role_events.RoleEvent", "u": 16, "d": "Event base for any event that involves guild roles. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class RoleEvent."}, {"r": "hikari.events.role_events.RoleEvent.guild_id", "u": 16, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.role_events.RoleEvent.role_id", "u": 16, "d": "ID of the role that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the role that relates to this event."}, {"r": "hikari.events.role_events.RoleEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.role_events.RoleEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.role_events.RoleCreateEvent", "u": 16, "d": "Event fired when a role is created. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class RoleCreateEvent."}, {"r": "hikari.events.role_events.RoleCreateEvent.guild_id", "u": 16, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.role_events.RoleCreateEvent.role_id", "u": 16, "d": "ID of the role that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the role that relates to this event."}, {"r": "hikari.events.role_events.RoleCreateEvent.app", "u": 16, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.role_events.RoleCreateEvent.role", "u": 16, "d": "Role that was created. Returns    - hikari.guilds.Role The created role."}, {"r": "hikari.events.role_events.RoleCreateEvent.shard", "u": 16, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.role_events.RoleUpdateEvent", "u": 16, "d": "Event fired when a role is updated. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class RoleUpdateEvent."}, {"r": "hikari.events.role_events.RoleUpdateEvent.guild_id", "u": 16, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.role_events.RoleUpdateEvent.role_id", "u": 16, "d": "ID of the role that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the role that relates to this event."}, {"r": "hikari.events.role_events.RoleUpdateEvent.app", "u": 16, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.role_events.RoleUpdateEvent.old_role", "u": 16, "d": "The old role object. This will be  builtins.None if the role missing from the cache."}, {"r": "hikari.events.role_events.RoleUpdateEvent.role", "u": 16, "d": "Role that was updated. Returns    - hikari.guilds.Role The created role."}, {"r": "hikari.events.role_events.RoleUpdateEvent.shard", "u": 16, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.role_events.RoleDeleteEvent", "u": 16, "d": "Event fired when a role is deleted. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class RoleDeleteEvent."}, {"r": "hikari.events.role_events.RoleDeleteEvent.app", "u": 16, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.role_events.RoleDeleteEvent.guild_id", "u": 16, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.role_events.RoleDeleteEvent.role_id", "u": 16, "d": "ID of the role that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the role that relates to this event."}, {"r": "hikari.events.role_events.RoleDeleteEvent.shard", "u": 16, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.typing_events", "u": 17, "d": "Events fired when users begin typing in channels."}, {"r": "hikari.events.typing_events.TypingEvent", "u": 17, "d": "Base event fired when a user begins typing in a channel. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_TYPING -  hikari.intents.Intents.DM_MESSAGE_TYPING Method generated by attrs for class ShardEvent."}, {"r": "hikari.events.typing_events.TypingEvent.channel_id", "u": 17, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.typing_events.TypingEvent.user_id", "u": 17, "d": "ID of the user who triggered this typing event. Returns    - hikari.snowflakes.Snowflake ID of the user who is typing."}, {"r": "hikari.events.typing_events.TypingEvent.timestamp", "u": 17, "d": "Timestamp of when this typing event started. Returns    - datetime.datetime UTC timestamp of when the user started typing."}, {"r": "hikari.events.typing_events.TypingEvent.user", "u": 17, "d": "Get the cached user that is typing, if known. Returns    - typing.Optional[hikari.users.User] The user, if known."}, {"r": "hikari.events.typing_events.TypingEvent.fetch_channel", "u": 17, "d": "Perform an API call to fetch an up-to-date image of this channel. Returns    - hikari.channels.TextChannel The channel.", "f": 1}, {"r": "hikari.events.typing_events.TypingEvent.fetch_user", "u": 17, "d": "Perform an API call to fetch an up-to-date image of this user. Returns    - hikari.users.User The user.", "f": 1}, {"r": "hikari.events.typing_events.TypingEvent.trigger_typing", "u": 17, "d": "Return a typing indicator for this channel that can be awaited. Returns    - hikari.api.special_endpoints.TypingIndicator A typing indicator context manager and awaitable to trigger typing in a channel with.", "f": 1}, {"r": "hikari.events.typing_events.TypingEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.typing_events.TypingEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.typing_events.GuildTypingEvent", "u": 17, "d": "Event fired when a user starts typing in a guild channel. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_TYPING Method generated by attrs for class GuildTypingEvent."}, {"r": "hikari.events.typing_events.GuildTypingEvent.channel", "u": 17, "d": "Get the cached channel object this typing event occurred in. Returns    - typing.Union[hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel, builtins.None] The channel."}, {"r": "hikari.events.typing_events.GuildTypingEvent.guild", "u": 17, "d": "Get the cached object of the guild this typing event occurred in. If the guild is not found then this will return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the gateway guild if found else  builtins.None ."}, {"r": "hikari.events.typing_events.GuildTypingEvent.user_id", "u": 17, "d": "ID of the user who triggered this typing event. Returns    - hikari.snowflakes.Snowflake ID of the user who is typing."}, {"r": "hikari.events.typing_events.GuildTypingEvent.fetch_channel", "u": 17, "d": "Perform an API call to fetch an up-to-date image of this channel. Returns    - typing.Union[hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel] The channel.", "f": 1}, {"r": "hikari.events.typing_events.GuildTypingEvent.fetch_guild", "u": 17, "d": "Perform an API call to fetch an up-to-date image of this guild. Returns    - hikari.guilds.Guild The guild.", "f": 1}, {"r": "hikari.events.typing_events.GuildTypingEvent.fetch_guild_preview", "u": 17, "d": "Perform an API call to fetch an up-to-date preview of this guild. Returns    - hikari.guilds.GuildPreview The guild.", "f": 1}, {"r": "hikari.events.typing_events.GuildTypingEvent.fetch_user", "u": 17, "d": "Perform an API call to fetch an up-to-date image of this member. Returns    - hikari.guilds.Member The member.", "f": 1}, {"r": "hikari.events.typing_events.GuildTypingEvent.app", "u": 17, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.typing_events.GuildTypingEvent.channel_id", "u": 17, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.typing_events.GuildTypingEvent.guild_id", "u": 17, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.typing_events.GuildTypingEvent.shard", "u": 17, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.typing_events.GuildTypingEvent.timestamp", "u": 17, "d": "Timestamp of when this typing event started. Returns    - datetime.datetime UTC timestamp of when the user started typing."}, {"r": "hikari.events.typing_events.GuildTypingEvent.user", "u": 17, "d": "Member object of the user who triggered this typing event. Unlike on  PrivateTypingEvent instances, Discord will always send this field in any payload. Returns    - hikari.guilds.Member Member of the user who triggered this typing event."}, {"r": "hikari.events.typing_events.GuildTypingEvent.trigger_typing", "u": 17, "d": "Return a typing indicator for this channel that can be awaited. Returns    - hikari.api.special_endpoints.TypingIndicator A typing indicator context manager and awaitable to trigger typing in a channel with.", "f": 1}, {"r": "hikari.events.typing_events.DMTypingEvent", "u": 17, "d": "Event fired when a user starts typing in a guild channel. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class DMTypingEvent."}, {"r": "hikari.events.typing_events.DMTypingEvent.user", "u": 17, "d": "Get the cached user that is typing, if known. Returns    - typing.Optional[hikari.users.User] The user, if known."}, {"r": "hikari.events.typing_events.DMTypingEvent.fetch_channel", "u": 17, "d": "Perform an API call to fetch an up-to-date image of this channel. Returns    - hikari.channels.DMChannel The channel.", "f": 1}, {"r": "hikari.events.typing_events.DMTypingEvent.fetch_user", "u": 17, "d": "Perform an API call to fetch an up-to-date image of the user. Returns    - hikari.users.User The user.", "f": 1}, {"r": "hikari.events.typing_events.DMTypingEvent.app", "u": 17, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.typing_events.DMTypingEvent.channel_id", "u": 17, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.typing_events.DMTypingEvent.shard", "u": 17, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.typing_events.DMTypingEvent.timestamp", "u": 17, "d": "Timestamp of when this typing event started. Returns    - datetime.datetime UTC timestamp of when the user started typing."}, {"r": "hikari.events.typing_events.DMTypingEvent.user_id", "u": 17, "d": "ID of the user who triggered this typing event. Returns    - hikari.snowflakes.Snowflake ID of the user who is typing."}, {"r": "hikari.events.typing_events.DMTypingEvent.trigger_typing", "u": 17, "d": "Return a typing indicator for this channel that can be awaited. Returns    - hikari.api.special_endpoints.TypingIndicator A typing indicator context manager and awaitable to trigger typing in a channel with.", "f": 1}, {"r": "hikari.events.reaction_events", "u": 18, "d": "Events that fire if messages are reacted to."}, {"r": "hikari.events.reaction_events.ReactionEvent", "u": 18, "d": "Event base for any message reaction event. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class ReactionEvent."}, {"r": "hikari.events.reaction_events.ReactionEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.ReactionEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.GuildReactionEvent", "u": 18, "d": "Event base for any reaction-bound event in guild messages. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS Method generated by attrs for class GuildReactionEvent."}, {"r": "hikari.events.reaction_events.GuildReactionEvent.guild_id", "u": 18, "d": "ID of the guild that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.GuildReactionEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.DMReactionEvent", "u": 18, "d": "Event base for any reaction-bound event in private messages. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class DMReactionEvent."}, {"r": "hikari.events.reaction_events.DMReactionEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.DMReactionEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.ReactionAddEvent", "u": 18, "d": "Event base for any reaction that is added to a message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class ReactionAddEvent."}, {"r": "hikari.events.reaction_events.ReactionAddEvent.user_id", "u": 18, "d": "ID of the user that added this reaction. Returns    - hikari.snowflakes.Snowflake The ID of the user that added this reaction."}, {"r": "hikari.events.reaction_events.ReactionAddEvent.emoji", "u": 18, "d": "Emoji that was added. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was added to the message."}, {"r": "hikari.events.reaction_events.ReactionAddEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionAddEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionAddEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.ReactionAddEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent", "u": 18, "d": "Event base for any single reaction that is removed from a message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class ReactionDeleteEvent."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent.user_id", "u": 18, "d": "User ID for the user that added this reaction initially. Returns    - hikari.snowflakes.Snowflake The ID of the user that removed this reaction."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent.emoji", "u": 18, "d": "Emoji that was removed. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was removed from the message."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.ReactionDeleteEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.ReactionDeleteEmojiEvent", "u": 18, "d": "Event base fired when all reactions are removed for one emoji. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class ReactionDeleteEmojiEvent."}, {"r": "hikari.events.reaction_events.ReactionDeleteEmojiEvent.emoji", "u": 18, "d": "Emoji that was removed. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was removed from the message."}, {"r": "hikari.events.reaction_events.ReactionDeleteEmojiEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionDeleteEmojiEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionDeleteEmojiEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.ReactionDeleteEmojiEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.ReactionDeleteAllEvent", "u": 18, "d": "Event base fired when all reactions are removed from a message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class ReactionDeleteAllEvent."}, {"r": "hikari.events.reaction_events.ReactionDeleteAllEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionDeleteAllEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.ReactionDeleteAllEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.ReactionDeleteAllEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent", "u": 18, "d": "Event fired when a reaction is added to a guild message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS Method generated by attrs for class GuildReactionAddEvent."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.guild_id", "u": 18, "d": "ID of the guild that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.user_id", "u": 18, "d": "ID of the user that added this reaction. Returns    - hikari.snowflakes.Snowflake The ID of the user that added this reaction."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.emoji", "u": 18, "d": "Emoji that was added. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was added to the message."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.member", "u": 18, "d": "Member that added the reaction. Returns    - hikari.guilds.Member The member which added this reaction."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionAddEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent", "u": 18, "d": "Event fired when a reaction is removed from a guild message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS Method generated by attrs for class GuildReactionDeleteEvent."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.emoji", "u": 18, "d": "Emoji that was removed. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was removed from the message."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.guild_id", "u": 18, "d": "ID of the guild that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEvent.user_id", "u": 18, "d": "User ID for the user that added this reaction initially. Returns    - hikari.snowflakes.Snowflake The ID of the user that removed this reaction."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent", "u": 18, "d": "Event fired when an emoji is removed from a guild message's reactions. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS Method generated by attrs for class GuildReactionDeleteEmojiEvent."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent.emoji", "u": 18, "d": "Emoji that was removed. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was removed from the message."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent.guild_id", "u": 18, "d": "ID of the guild that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteEmojiEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteAllEvent", "u": 18, "d": "Event fired when all of a guild message's reactions are removed. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGE_REACTIONS Method generated by attrs for class GuildReactionDeleteAllEvent."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteAllEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteAllEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteAllEvent.guild_id", "u": 18, "d": "ID of the guild that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteAllEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.GuildReactionDeleteAllEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent", "u": 18, "d": "Event fired when a reaction is added to a private message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class DMReactionAddEvent."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent.emoji", "u": 18, "d": "Emoji that was added. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was added to the message."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.DMReactionAddEvent.user_id", "u": 18, "d": "ID of the user that added this reaction. Returns    - hikari.snowflakes.Snowflake The ID of the user that added this reaction."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent", "u": 18, "d": "Event fired when a reaction is removed from a private message. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class DMReactionDeleteEvent."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent.emoji", "u": 18, "d": "Emoji that was removed. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was removed from the message."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEvent.user_id", "u": 18, "d": "User ID for the user that added this reaction initially. Returns    - hikari.snowflakes.Snowflake The ID of the user that removed this reaction."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEmojiEvent", "u": 18, "d": "Event fired when an emoji is removed from a private message's reactions. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class DMReactionDeleteEmojiEvent."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEmojiEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEmojiEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEmojiEvent.emoji", "u": 18, "d": "Emoji that was removed. Returns    - hikari.emojis.Emoji The  hikari.emojis.UnicodeEmoji or  hikari.emojis.CustomEmoji that was removed from the message."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEmojiEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionDeleteEmojiEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.reaction_events.DMReactionDeleteAllEvent", "u": 18, "d": "Event fired when all of a private message's reactions are removed. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGE_REACTIONS Method generated by attrs for class DMReactionDeleteAllEvent."}, {"r": "hikari.events.reaction_events.DMReactionDeleteAllEvent.app", "u": 18, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.reaction_events.DMReactionDeleteAllEvent.channel_id", "u": 18, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionDeleteAllEvent.message_id", "u": 18, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.reaction_events.DMReactionDeleteAllEvent.shard", "u": 18, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.base_events", "u": 15, "d": "Base types and functions for events in Hikari."}, {"r": "hikari.events.base_events.Event", "u": 15, "d": "Base event type that all Hikari events should subclass. Method generated by attrs for class Event."}, {"r": "hikari.events.base_events.Event.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.base_events.ExceptionEvent", "u": 15, "d": "Event that is raised when another event handler raises an  Exception .  ! note Only exceptions that derive from  builtins.Exception will be caught. Other exceptions outside this range will propagate past this callback. This prevents event handlers interfering with critical exceptions such as  KeyboardError which would have potentially undesired side-effects on the application runtime. ! warning Any exceptions raised by handlers for this event will be dumped to the application logger and silently discarded, preventing recursive loops produced by faulty exception event handling. Thus, it is imperative that you ensure any exceptions are explicitly caught within handlers for this event if they may occur. Method generated by attrs for class ExceptionEvent."}, {"r": "hikari.events.base_events.ExceptionEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.base_events.ExceptionEvent.shard", "u": 15, "d": "Shard that received the event, if there was one associated. Returns    - typing.Optional[hikari.api.shard.GatewayShard] Shard that raised this exception. This may be  builtins.None if no specific shard was the cause of this exception (e.g. when starting up or shutting down)."}, {"r": "hikari.events.base_events.ExceptionEvent.failed_callback", "u": 15, "d": "Event callback that threw an exception. Returns    - callback Event callback that failed execution."}, {"r": "hikari.events.base_events.ExceptionEvent.exc_info", "u": 15, "d": "Exception triplet that follows the same format as  sys.exc_info . Returns    - builtins.tuple[typing.Type[Exception], Exception, typing.Optional[types.TracebackType The  sys.exc_info -compatible tuple of the exception type, the exception instance, and the traceback of the exception."}, {"r": "hikari.events.base_events.ExceptionEvent.retry", "u": 15, "d": "Invoke the failed event again. If an exception is thrown this time, it will need to be manually caught in-code, or will be discarded.", "f": 1}, {"r": "hikari.events.base_events.ExceptionEvent.exception", "u": 15, "d": "Exception that was raised. Returns    - builtins.Exception Exception that was raised in the event handler."}, {"r": "hikari.events.base_events.ExceptionEvent.failed_event", "u": 15, "d": "Event instance that caused the exception. Returns    - hikari.events.base_events.Event Event that was being processed when the exception occurred."}, {"r": "hikari.events.base_events.is_no_recursive_throw_event", "u": 15, "d": "Return True if this event is marked as  ___norecursivethrow___ .", "f": 1}, {"r": "hikari.events.base_events.no_recursive_throw", "u": 15, "d": "Decorate an event type to indicate errors should not be handled. This is useful for exception event types that you do not want to have invoked recursively.", "f": 1}, {"r": "hikari.events.base_events.get_required_intents_for", "u": 15, "d": "Retrieve the intents that are required to listen to an event type. Parameters      event_type : typing.Type[Event] The event type to get required intents for. Returns    - typing.Collection[hikari.intents.Intents] Collection of acceptable subset combinations of intent needed to be able to receive the given event type.", "f": 1}, {"r": "hikari.events.base_events.requires_intents", "u": 15, "d": "Decorate an event type to define what intents it requires. Parameters      first : hikari.intents.Intents First combination of intents that are acceptable in order to receive the decorated event type.  rest : hikari.intents.Intents Zero or more additional combinations of intents to require for this event to be subscribed to.", "f": 1}, {"r": "hikari.events.channel_events", "u": 19, "d": "Events that fire when channels are modified. This does not include message events, nor reaction events."}, {"r": "hikari.events.channel_events.ChannelEvent", "u": 19, "d": "Event base for any channel-bound event in guilds or private messages. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class ChannelEvent."}, {"r": "hikari.events.channel_events.ChannelEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.ChannelEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.PartialChannel A derivative of  hikari.channels.PartialChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.ChannelEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.ChannelEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelEvent", "u": 19, "d": "Event base for any channel-bound event in guilds. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildChannelEvent."}, {"r": "hikari.events.channel_events.GuildChannelEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.GuildChannelEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.GuildChannelEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelEvent.channel", "u": 19, "d": "Get the cached channel that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.channels.GuildChannel] The cached channel this event relates to. If not known, this will return  builtins.None instead."}, {"r": "hikari.events.channel_events.GuildChannelEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.GuildChannelEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.GuildChannelEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.DMChannelEvent", "u": 19, "d": "Event base for any channel-bound event in private messages. Method generated by attrs for class DMChannelEvent."}, {"r": "hikari.events.channel_events.DMChannelEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.PrivateChannel A derivative of  hikari.channels.PrivateChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.DMChannelEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.DMChannelEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.DMChannelEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.ChannelCreateEvent", "u": 19, "d": "Base event for any channel being created. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class ChannelCreateEvent."}, {"r": "hikari.events.channel_events.ChannelCreateEvent.channel", "u": 19, "d": "Channel this event represents. Returns    - hikari.channels.PartialChannel The channel that was created."}, {"r": "hikari.events.channel_events.ChannelCreateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.ChannelCreateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.PartialChannel A derivative of  hikari.channels.PartialChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.ChannelCreateEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.ChannelCreateEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent", "u": 19, "d": "Event fired when a guild channel is created. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildChannelCreateEvent."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.channel", "u": 19, "d": "Guild channel that this event represents. Returns    - hikari.channels.GuildChannel The guild channel that was created."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelCreateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.ChannelUpdateEvent", "u": 19, "d": "Base event for any channel being updated. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class ChannelUpdateEvent."}, {"r": "hikari.events.channel_events.ChannelUpdateEvent.channel", "u": 19, "d": "Channel this event represents. Returns    - hikari.channels.PartialChannel The channel that was updated."}, {"r": "hikari.events.channel_events.ChannelUpdateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.ChannelUpdateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.PartialChannel A derivative of  hikari.channels.PartialChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.ChannelUpdateEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.ChannelUpdateEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent", "u": 19, "d": "Event fired when a guild channel is edited. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildChannelUpdateEvent."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.channel", "u": 19, "d": "Guild channel that this event represents. Returns    - hikari.channels.GuildChannel The guild channel that was updated."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.old_channel", "u": 19, "d": "The old guild channel object. This will be  builtins.None if the channel missing from the cache."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelUpdateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.ChannelDeleteEvent", "u": 19, "d": "Base event for any channel being deleted. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class ChannelDeleteEvent."}, {"r": "hikari.events.channel_events.ChannelDeleteEvent.channel", "u": 19, "d": "Channel this event represents. Returns    - hikari.channels.PartialChannel The channel that was deleted."}, {"r": "hikari.events.channel_events.ChannelDeleteEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.ChannelDeleteEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.PartialChannel A derivative of  hikari.channels.PartialChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.ChannelDeleteEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.ChannelDeleteEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent", "u": 19, "d": "Event fired when a guild channel is deleted. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildChannelDeleteEvent."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.channel", "u": 19, "d": "Guild channel that this event represents. Returns    - hikari.channels.GuildChannel The guild channel that was deleted."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.GuildChannelDeleteEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.PinsUpdateEvent", "u": 19, "d": "Base event fired when a message is pinned/unpinned in a channel. Method generated by attrs for class PinsUpdateEvent."}, {"r": "hikari.events.channel_events.PinsUpdateEvent.last_pin_timestamp", "u": 19, "d": "Datetime of when the most recent message was pinned in the channel. Will be  builtins.None if nothing is pinned or the information is unavailable. Returns    - typing.Optional[datetime.datetime] The datetime of the most recent pinned message in the channel, or  builtins.None if no pins are available."}, {"r": "hikari.events.channel_events.PinsUpdateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel. Returns    - hikari.channels.TextChannel A derivative of  hikari.channels.TextChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.PinsUpdateEvent.fetch_pins", "u": 19, "d": "Perform an API call to fetch the pinned messages in this channel. Returns    - typing.Sequence[hikari.messages.Message] The pinned messages in this channel.", "f": 1}, {"r": "hikari.events.channel_events.PinsUpdateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.PinsUpdateEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.PinsUpdateEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent", "u": 19, "d": "Event fired when a message is pinned/unpinned in a guild channel. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildPinsUpdateEvent."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.channel", "u": 19, "d": "Get the cached channel that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.channels.GuildTextChannel] The cached channel this event relates to. If not known, this will return  builtins.None instead."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel. Returns    - hikari.channels.GuildTextChannel A derivative of  hikari.channels.GuildTextChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.last_pin_timestamp", "u": 19, "d": "Datetime of when the most recent message was pinned in the channel. Will be  builtins.None if nothing is pinned or the information is unavailable. Returns    - typing.Optional[datetime.datetime] The datetime of the most recent pinned message in the channel, or  builtins.None if no pins are available."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.fetch_pins", "u": 19, "d": "Perform an API call to fetch the pinned messages in this channel. Returns    - typing.Sequence[hikari.messages.Message] The pinned messages in this channel.", "f": 1}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.GuildPinsUpdateEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent", "u": 19, "d": "Event fired when a message is pinned/unpinned in a private channel. Method generated by attrs for class DMPinsUpdateEvent."}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel. Returns    - hikari.channels.DMChannel A derivative of  hikari.channels.DMChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent.last_pin_timestamp", "u": 19, "d": "Datetime of when the most recent message was pinned in the channel. Will be  builtins.None if nothing is pinned or the information is unavailable. Returns    - typing.Optional[datetime.datetime] The datetime of the most recent pinned message in the channel, or  builtins.None if no pins are available."}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.DMPinsUpdateEvent.fetch_pins", "u": 19, "d": "Perform an API call to fetch the pinned messages in this channel. Returns    - typing.Sequence[hikari.messages.Message] The pinned messages in this channel.", "f": 1}, {"r": "hikari.events.channel_events.InviteCreateEvent", "u": 19, "d": "Event fired when an invite is created in a channel. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_INVITES Method generated by attrs for class InviteCreateEvent."}, {"r": "hikari.events.channel_events.InviteCreateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.InviteCreateEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.InviteCreateEvent.code", "u": 19, "d": "Code that is used in the URL for the invite. Returns    - builtins.str The invite code."}, {"r": "hikari.events.channel_events.InviteCreateEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.InviteCreateEvent.invite", "u": 19, "d": "Invite that was created. Returns    - hikari.invites.InviteWithMetadata The created invite object."}, {"r": "hikari.events.channel_events.InviteCreateEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.InviteCreateEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.InviteCreateEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.InviteCreateEvent.channel", "u": 19, "d": "Get the cached channel that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.channels.GuildChannel] The cached channel this event relates to. If not known, this will return  builtins.None instead."}, {"r": "hikari.events.channel_events.InviteCreateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.InviteDeleteEvent", "u": 19, "d": "Event fired when an invite is deleted from a channel. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_INVITES Method generated by attrs for class InviteDeleteEvent."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.code", "u": 19, "d": "Code that is used in the URL for the invite. Returns    - builtins.str The invite code."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.InviteDeleteEvent.channel", "u": 19, "d": "Get the cached channel that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.channels.GuildChannel] The cached channel this event relates to. If not known, this will return  builtins.None instead."}, {"r": "hikari.events.channel_events.InviteDeleteEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.channel_events.WebhookUpdateEvent", "u": 19, "d": "Event fired when a webhook is created/updated/deleted in a channel. Unfortunately, Discord does not provide any information on what webhook actually changed, nor specifically whether it was created/updated/deleted, so this event is pretty useless unless you keep track of the webhooks in the channel manually beforehand. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_WEBHOOKS Method generated by attrs for class WebhookUpdateEvent."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.fetch_channel_webhooks", "u": 19, "d": "Perform an API call to fetch the webhooks for this channel. Returns    - typing.Sequence[hikari.webhooks.Webhook] The webhooks in this channel.", "f": 1}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.fetch_guild_webhooks", "u": 19, "d": "Perform an API call to fetch the webhooks for this guild. Returns    - typing.Sequence[hikari.webhooks.Webhook] The webhooks in this guild.", "f": 1}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.app", "u": 19, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.channel_id", "u": 19, "d": "ID of the channel the event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the channel this event relates to."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.guild_id", "u": 19, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.shard", "u": 19, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.guild", "u": 19, "d": "Get the cached guild that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The gateway guild this event relates to, if known. Otherwise this will return  builtins.None ."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.fetch_guild", "u": 19, "d": "Perform an API call to fetch the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild that this event occurred in.", "f": 1}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.channel", "u": 19, "d": "Get the cached channel that this event relates to, if known. If not, return  builtins.None . Returns    - typing.Optional[hikari.channels.GuildChannel] The cached channel this event relates to. If not known, this will return  builtins.None instead."}, {"r": "hikari.events.channel_events.WebhookUpdateEvent.fetch_channel", "u": 19, "d": "Perform an API call to fetch the details about this channel.  ! note For  ChannelDeleteEvent -derived events, this will always raise an exception, since the channel will have already been removed. Returns    - hikari.channels.GuildChannel A derivative of  hikari.channels.GuildChannel . The actual type will vary depending on the type of channel this event concerns.", "f": 1}, {"r": "hikari.events.shard_events", "u": 14, "d": "Events relating to specific shards events."}, {"r": "hikari.events.shard_events.ShardEvent", "u": 14, "d": "Base class for any event that was shard-specific. Method generated by attrs for class ShardEvent."}, {"r": "hikari.events.shard_events.ShardEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.shard_events.ShardEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.ShardStateEvent", "u": 14, "d": "Base class for any event concerning the state/connectivity of a shard. This currently wraps connection/disconnection/ready/resumed events only. Method generated by attrs for class ShardStateEvent."}, {"r": "hikari.events.shard_events.ShardStateEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.shard_events.ShardStateEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.ShardConnectedEvent", "u": 14, "d": "Event fired when a shard connects. Method generated by attrs for class ShardConnectedEvent."}, {"r": "hikari.events.shard_events.ShardConnectedEvent.app", "u": 14, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.ShardConnectedEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.shard_events.ShardDisconnectedEvent", "u": 14, "d": "Event fired when a shard disconnects. Method generated by attrs for class ShardDisconnectedEvent."}, {"r": "hikari.events.shard_events.ShardDisconnectedEvent.app", "u": 14, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.ShardDisconnectedEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.shard_events.ShardReadyEvent", "u": 14, "d": "Event fired when a shard declares it is ready. Method generated by attrs for class ShardReadyEvent."}, {"r": "hikari.events.shard_events.ShardReadyEvent.actual_gateway_version", "u": 14, "d": "Actual gateway version being used. Returns    - builtins.int The actual gateway version we are actively using for this protocol."}, {"r": "hikari.events.shard_events.ShardReadyEvent.app", "u": 14, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.ShardReadyEvent.my_user", "u": 14, "d": "User for the current bot account this connection is authenticated with. Returns    - hikari.users.OwnUser This bot's user."}, {"r": "hikari.events.shard_events.ShardReadyEvent.session_id", "u": 14, "d": "ID for this session. Returns    - builtins.str The session ID for this gateway session."}, {"r": "hikari.events.shard_events.ShardReadyEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.shard_events.ShardReadyEvent.unavailable_guilds", "u": 14, "d": "Sequence of the IDs for all guilds this bot is currently in. All guilds will start off \"unavailable\" and should become available after a few seconds of connecting one-by-one. Returns    - typing.Sequence[hikari.snowflakes.Snowflake] All guild IDs that the bot is in for this shard."}, {"r": "hikari.events.shard_events.ShardResumedEvent", "u": 14, "d": "Event fired when a shard resumes an existing session. Method generated by attrs for class ShardResumedEvent."}, {"r": "hikari.events.shard_events.ShardResumedEvent.app", "u": 14, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.ShardResumedEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.shard_events.MemberChunkEvent", "u": 14, "d": "Event fired when a member chunk payload is received on a gateway shard. Method generated by attrs for class MemberChunkEvent."}, {"r": "hikari.events.shard_events.MemberChunkEvent.app", "u": 14, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.shard_events.MemberChunkEvent.chunk_count", "u": 14, "d": "Total number of expected chunks for the request this is associated with. Returns    - builtins.int Total number of chunks to be expected."}, {"r": "hikari.events.shard_events.MemberChunkEvent.chunk_index", "u": 14, "d": "Zero-indexed position of this within the queued up chunks for this request. Returns    - builtins.int The sequence index for this chunk."}, {"r": "hikari.events.shard_events.MemberChunkEvent.guild_id", "u": 14, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.events.shard_events.MemberChunkEvent.members", "u": 14, "d": "Mapping of user IDs to the objects of the members in this chunk. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.guilds.Member] Mapping of user IDs to corresponding member objects."}, {"r": "hikari.events.shard_events.MemberChunkEvent.nonce", "u": 14, "d": "String nonce used to identify the request member chunks are associated with. This is the nonce value passed while requesting member chunks. Returns    - typing.Optional[builtins.str] The request nonce if set, or  builtins.None otherwise."}, {"r": "hikari.events.shard_events.MemberChunkEvent.not_found", "u": 14, "d": "Sequence of the snowflakes that were not found while making this request. This is only applicable when user IDs are specified while making the member request the chunk is associated with. Returns    - typing.Sequence[hikari.snowflakes.Snowflake] Sequence of user IDs that were not found."}, {"r": "hikari.events.shard_events.MemberChunkEvent.presences", "u": 14, "d": "Mapping of user IDs to found member presence objects. This will be empty if no presences are found or  include_presences is not passed as  builtins.True while requesting the member chunks. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] Mapping of user IDs to corresponding presences."}, {"r": "hikari.events.shard_events.MemberChunkEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events", "u": 20, "d": "Events that fire if messages are sent/updated/deleted."}, {"r": "hikari.events.message_events.MessageEvent", "u": 20, "d": "Any event that concerns manipulation of messages. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES -  hikari.intents.Intents.GUILD_MESSAGES Method generated by attrs for class MessageEvent."}, {"r": "hikari.events.message_events.MessageEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.MessageEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.MessageEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.MessageEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.MessageCreateEvent", "u": 20, "d": "Event that is fired when a message is created. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES -  hikari.intents.Intents.GUILD_MESSAGES Method generated by attrs for class MessageCreateEvent."}, {"r": "hikari.events.message_events.MessageCreateEvent.author", "u": 20, "d": "User that sent the message. Returns    - hikari.users.User The user that sent the message."}, {"r": "hikari.events.message_events.MessageCreateEvent.author_id", "u": 20, "d": "ID of the author of the message this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the author."}, {"r": "hikari.events.message_events.MessageCreateEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.MessageCreateEvent.content", "u": 20, "d": "Content of the message. Returns    - typing.Optional[builtins.str] The content of the message, if present. This may be  builtins.None or an empty string (or any falsy value) if no content is present (e.g. if only an embed was sent)."}, {"r": "hikari.events.message_events.MessageCreateEvent.embeds", "u": 20, "d": "Sequence of embeds in the message. Returns    - typing.Sequence[hikari.embeds.Embed] The embeds in the message."}, {"r": "hikari.events.message_events.MessageCreateEvent.is_bot", "u": 20, "d": "Return  builtins.True if the message is from a bot. Returns    - builtins.bool  builtins.True if from a bot, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.MessageCreateEvent.is_human", "u": 20, "d": "Return  builtins.True if the message was created by a human. Returns    - builtins.bool  builtins.True if from a human user, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.MessageCreateEvent.is_webhook", "u": 20, "d": "Return  builtins.True if the message was created by a webhook. Returns    - builtins.bool  builtins.True if from a webhook, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.MessageCreateEvent.message", "u": 20, "d": "Message that was sent in the event. Returns    - hikari.messages.Message The message object that was sent with this event."}, {"r": "hikari.events.message_events.MessageCreateEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.MessageCreateEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.MessageCreateEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.MessageUpdateEvent", "u": 20, "d": "Event that is fired when a message is updated.  ! note Less information will be available here than in the creation event due to Discord limitations. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES -  hikari.intents.Intents.GUILD_MESSAGES Method generated by attrs for class MessageUpdateEvent."}, {"r": "hikari.events.message_events.MessageUpdateEvent.author", "u": 20, "d": "User that sent the message. Returns    - typing.Optional[hikari.users.User] The user that sent the message. This will be  builtins.None in some cases, such as when Discord updates a message with an embed for a URL preview."}, {"r": "hikari.events.message_events.MessageUpdateEvent.author_id", "u": 20, "d": "ID of the author that triggered this event. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of the author that triggered this event concerns. This will be  builtins.None in some cases, such as when Discord updates a message with an embed for a URL preview."}, {"r": "hikari.events.message_events.MessageUpdateEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.MessageUpdateEvent.content", "u": 20, "d": "Content of the message. Returns    - hikari.undefined.UndefinedNoneOr[builtins.str] The content of the message, if present. This may be  builtins.None or an empty string (or any falsy value) if no content is present (e.g. if only an embed was sent). If not part of the update, then this will be  hikari.undefined.UNDEFINED instead."}, {"r": "hikari.events.message_events.MessageUpdateEvent.embeds", "u": 20, "d": "Sequence of embeds in the message. Returns    - hikari.undefined.UndefinedOr[typing.Sequence[hikari.embeds.Embed The embeds in the message. If the embeds were not changed in this event, then this may instead be  hikari.undefined.UNDEFINED ."}, {"r": "hikari.events.message_events.MessageUpdateEvent.is_bot", "u": 20, "d": "Return  builtins.True if the message is from a bot. Returns    - typing.Optional[builtins.bool]  builtins.True if from a bot, or  builtins.False otherwise. If the author is not known, due to the update event being caused by Discord adding an embed preview to accompany a URL, then this will return  builtins.None instead."}, {"r": "hikari.events.message_events.MessageUpdateEvent.is_human", "u": 20, "d": "Return  builtins.True if the message was created by a human. Returns    - typing.Optional[builtins.bool]  builtins.True if from a human user, or  builtins.False otherwise. If the author is not known, due to the update event being caused by Discord adding an embed preview to accompany a URL, then this may return  builtins.None instead."}, {"r": "hikari.events.message_events.MessageUpdateEvent.is_webhook", "u": 20, "d": "Return  builtins.True if the message was created by a webhook. Returns    - builtins.bool  builtins.True if from a webhook, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.MessageUpdateEvent.message", "u": 20, "d": "Partial message that was sent in the event. Returns    - hikari.messages.PartialMessage The partial message object that was sent with this event."}, {"r": "hikari.events.message_events.MessageUpdateEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.MessageUpdateEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.MessageUpdateEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.MessageDeleteEvent", "u": 20, "d": "Special event that is triggered when one or more messages get deleted.  ! note Due to Discord limitations, most message information is unavailable during deletion events. You can check if the message was in a singular deletion by checking the  is_bulk attribute. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGES -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class MessageDeleteEvent."}, {"r": "hikari.events.message_events.MessageDeleteEvent.channel", "u": 20, "d": "Get the cached channel the messages were sent in, if known. Returns    - typing.Union[builtins.None, hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel] The channel the messages were sent in, or  builtins.None if not known/cached. This otherwise will always be a  hikari.channels.GuildTextChannel if it is a normal message, or  hikari.channels.GuildNewsChannel if sent in an announcement channel."}, {"r": "hikari.events.message_events.MessageDeleteEvent.message_id", "u": 20, "d": "Get the ID of the first deleted message. This is contextually useful if you know this is not a bulk deletion event. For all other purposes, this is the same as running  next(iter(event.message_ids  . Returns    - hikari.snowflakes.Snowflake The first deleted message ID."}, {"r": "hikari.events.message_events.MessageDeleteEvent.message_ids", "u": 20, "d": "Set of message IDs that were bulk deleted. Returns    - typing.AbstractSet[hikari.snowflakes.Snowflake] A sequence of message IDs that were bulk deleted."}, {"r": "hikari.events.message_events.MessageDeleteEvent.is_bulk", "u": 20, "d": "Flag that determines whether this was a bulk deletion or not. Returns    - builtins.bool  builtins.True if this was a bulk deletion, or  builtins.False if it was a regular message deletion."}, {"r": "hikari.events.message_events.MessageDeleteEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.MessageDeleteEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.MessageDeleteEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent", "u": 20, "d": "Event that is fired when a message is created within a guild. This contains the full message in the internal  message attribute. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGES Method generated by attrs for class GuildMessageCreateEvent."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.author", "u": 20, "d": "Member object of the user that sent the message. Returns    - hikari.guilds.Member The member object of the user that sent the message."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.channel", "u": 20, "d": "Channel that the message was sent in, if known. Returns    - typing.Union[builtins.None, hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel] The channel that the message was sent in, if known and cached, otherwise,  builtins.None ."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.guild", "u": 20, "d": "Get the cached guild that this event occurred in, if known.  ! note This will require the  GUILDS intent to be specified on start-up in order to be known. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild that this event occurred in, if cached. Otherwise,  builtins.None instead."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.guild_id", "u": 20, "d": "ID of the guild that this event occurred in. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event occurred in."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.app", "u": 20, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.message", "u": 20, "d": "Message that was sent in the event. Returns    - hikari.messages.Message The message object that was sent with this event."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.shard", "u": 20, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.author_id", "u": 20, "d": "ID of the author of the message this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the author."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.content", "u": 20, "d": "Content of the message. Returns    - typing.Optional[builtins.str] The content of the message, if present. This may be  builtins.None or an empty string (or any falsy value) if no content is present (e.g. if only an embed was sent)."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.embeds", "u": 20, "d": "Sequence of embeds in the message. Returns    - typing.Sequence[hikari.embeds.Embed] The embeds in the message."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.is_bot", "u": 20, "d": "Return  builtins.True if the message is from a bot. Returns    - builtins.bool  builtins.True if from a bot, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.is_human", "u": 20, "d": "Return  builtins.True if the message was created by a human. Returns    - builtins.bool  builtins.True if from a human user, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.is_webhook", "u": 20, "d": "Return  builtins.True if the message was created by a webhook. Returns    - builtins.bool  builtins.True if from a webhook, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.GuildMessageCreateEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent", "u": 20, "d": "Event that is fired when a message is updated in a guild.  ! note Less information will be available here than in the creation event due to Discord limitations. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGES Method generated by attrs for class GuildMessageUpdateEvent."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.author", "u": 20, "d": "Member or user that sent the message. Returns    - typing.Union[builtins.None, hikari.users.User, hikari.guilds.Member] The user that sent the message. If the member is cached (the intents are enabled), then this will be the corresponding member object instead (which is a specialization of the user object you should otherwise expect). This will be  builtins.None in some cases, such as when Discord updates a message with an embed for a URL preview."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.channel", "u": 20, "d": "Channel that the message was sent in, if known. Returns    - typing.Union[builtins.None, hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel] The channel that the message was sent in, if known and cached, otherwise,  builtins.None ."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.guild", "u": 20, "d": "Get the cached guild that this event occurred in, if known.  ! note This will require the  GUILDS intent to be specified on start-up in order to be known. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild that this event occurred in, if cached. Otherwise,  builtins.None instead."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.guild_id", "u": 20, "d": "ID of the guild that this event occurred in. Returns    - hikari.snowflakes.Snowflake The ID of the guild that this event occurred in."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.app", "u": 20, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.message", "u": 20, "d": "Partial message that was sent in the event. Returns    - hikari.messages.PartialMessage The partial message object that was sent with this event."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.old_message", "u": 20, "d": "The old message object. This will be  builtins.None if the message missing from the cache."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.shard", "u": 20, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.author_id", "u": 20, "d": "ID of the author that triggered this event. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of the author that triggered this event concerns. This will be  builtins.None in some cases, such as when Discord updates a message with an embed for a URL preview."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.content", "u": 20, "d": "Content of the message. Returns    - hikari.undefined.UndefinedNoneOr[builtins.str] The content of the message, if present. This may be  builtins.None or an empty string (or any falsy value) if no content is present (e.g. if only an embed was sent). If not part of the update, then this will be  hikari.undefined.UNDEFINED instead."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.embeds", "u": 20, "d": "Sequence of embeds in the message. Returns    - hikari.undefined.UndefinedOr[typing.Sequence[hikari.embeds.Embed The embeds in the message. If the embeds were not changed in this event, then this may instead be  hikari.undefined.UNDEFINED ."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.is_bot", "u": 20, "d": "Return  builtins.True if the message is from a bot. Returns    - typing.Optional[builtins.bool]  builtins.True if from a bot, or  builtins.False otherwise. If the author is not known, due to the update event being caused by Discord adding an embed preview to accompany a URL, then this will return  builtins.None instead."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.is_human", "u": 20, "d": "Return  builtins.True if the message was created by a human. Returns    - typing.Optional[builtins.bool]  builtins.True if from a human user, or  builtins.False otherwise. If the author is not known, due to the update event being caused by Discord adding an embed preview to accompany a URL, then this may return  builtins.None instead."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.is_webhook", "u": 20, "d": "Return  builtins.True if the message was created by a webhook. Returns    - builtins.bool  builtins.True if from a webhook, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.GuildMessageUpdateEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent", "u": 20, "d": "Event that is triggered if messages are deleted in a guild.  ! note Due to Discord limitations, most message information is unavailable during deletion events. This is triggered for singular message deletion, and bulk message deletion. You can check if the message was in a singular deletion by checking the  is_bulk attribute. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MESSAGES Method generated by attrs for class GuildMessageDeleteEvent."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.guild", "u": 20, "d": "Get the cached guild this event corresponds to, if known.  ! note You will need  hikari.intents.Intents.GUILDS enabled to receive this information. Returns    - hikari.guilds.GatewayGuild The gateway guild that this event corresponds to, if known and cached."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.app", "u": 20, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.guild_id", "u": 20, "d": "ID of the guild that this event occurred in. Returns    - hikari.snowflakes.Snowflake The ID of the guild."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.is_bulk", "u": 20, "d": "Flag that determines whether this was a bulk deletion or not. Returns    - builtins.bool  builtins.True if this was a bulk deletion, or  builtins.False if it was a regular message deletion."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.message_ids", "u": 20, "d": "Set of message IDs that were bulk deleted. Returns    - typing.AbstractSet[hikari.snowflakes.Snowflake] A sequence of message IDs that were bulk deleted."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.shard", "u": 20, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.channel", "u": 20, "d": "Get the cached channel the messages were sent in, if known. Returns    - typing.Union[builtins.None, hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel] The channel the messages were sent in, or  builtins.None if not known/cached. This otherwise will always be a  hikari.channels.GuildTextChannel if it is a normal message, or  hikari.channels.GuildNewsChannel if sent in an announcement channel."}, {"r": "hikari.events.message_events.GuildMessageDeleteEvent.message_id", "u": 20, "d": "Get the ID of the first deleted message. This is contextually useful if you know this is not a bulk deletion event. For all other purposes, this is the same as running  next(iter(event.message_ids  . Returns    - hikari.snowflakes.Snowflake The first deleted message ID."}, {"r": "hikari.events.message_events.DMMessageCreateEvent", "u": 20, "d": "Event that is fired when a message is created within a DM. This contains the full message in the internal  message attribute. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class DMMessageCreateEvent."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.app", "u": 20, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.message", "u": 20, "d": "Message that was sent in the event. Returns    - hikari.messages.Message The message object that was sent with this event."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.shard", "u": 20, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.author", "u": 20, "d": "User that sent the message. Returns    - hikari.users.User The user that sent the message."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.author_id", "u": 20, "d": "ID of the author of the message this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the author."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.content", "u": 20, "d": "Content of the message. Returns    - typing.Optional[builtins.str] The content of the message, if present. This may be  builtins.None or an empty string (or any falsy value) if no content is present (e.g. if only an embed was sent)."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.embeds", "u": 20, "d": "Sequence of embeds in the message. Returns    - typing.Sequence[hikari.embeds.Embed] The embeds in the message."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.is_bot", "u": 20, "d": "Return  builtins.True if the message is from a bot. Returns    - builtins.bool  builtins.True if from a bot, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.is_human", "u": 20, "d": "Return  builtins.True if the message was created by a human. Returns    - builtins.bool  builtins.True if from a human user, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.is_webhook", "u": 20, "d": "Return  builtins.True if the message was created by a webhook. Returns    - builtins.bool  builtins.True if from a webhook, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.DMMessageCreateEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent", "u": 20, "d": "Event that is fired when a message is updated in a DM.  ! note Less information will be available here than in the creation event due to Discord limitations. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class DMMessageUpdateEvent."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.app", "u": 20, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.message", "u": 20, "d": "Partial message that was sent in the event. Returns    - hikari.messages.PartialMessage The partial message object that was sent with this event."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.old_message", "u": 20, "d": "The old message object. This will be  builtins.None if the message missing from the cache."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.shard", "u": 20, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.author", "u": 20, "d": "User that sent the message. Returns    - typing.Optional[hikari.users.User] The user that sent the message. This will be  builtins.None in some cases, such as when Discord updates a message with an embed for a URL preview."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.author_id", "u": 20, "d": "ID of the author that triggered this event. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of the author that triggered this event concerns. This will be  builtins.None in some cases, such as when Discord updates a message with an embed for a URL preview."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.content", "u": 20, "d": "Content of the message. Returns    - hikari.undefined.UndefinedNoneOr[builtins.str] The content of the message, if present. This may be  builtins.None or an empty string (or any falsy value) if no content is present (e.g. if only an embed was sent). If not part of the update, then this will be  hikari.undefined.UNDEFINED instead."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.embeds", "u": 20, "d": "Sequence of embeds in the message. Returns    - hikari.undefined.UndefinedOr[typing.Sequence[hikari.embeds.Embed The embeds in the message. If the embeds were not changed in this event, then this may instead be  hikari.undefined.UNDEFINED ."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.is_bot", "u": 20, "d": "Return  builtins.True if the message is from a bot. Returns    - typing.Optional[builtins.bool]  builtins.True if from a bot, or  builtins.False otherwise. If the author is not known, due to the update event being caused by Discord adding an embed preview to accompany a URL, then this will return  builtins.None instead."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.is_human", "u": 20, "d": "Return  builtins.True if the message was created by a human. Returns    - typing.Optional[builtins.bool]  builtins.True if from a human user, or  builtins.False otherwise. If the author is not known, due to the update event being caused by Discord adding an embed preview to accompany a URL, then this may return  builtins.None instead."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.is_webhook", "u": 20, "d": "Return  builtins.True if the message was created by a webhook. Returns    - builtins.bool  builtins.True if from a webhook, or  builtins.False otherwise."}, {"r": "hikari.events.message_events.DMMessageUpdateEvent.message_id", "u": 20, "d": "ID of the message that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the message that this event concerns."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent", "u": 20, "d": "Event that is triggered if messages are deleted in a DM.  ! note Due to Discord limitations, most message information is unavailable during deletion events. This is triggered for singular message deletion, and bulk message deletion, although the latter is not expected to occur in DMs. You can check if the message was in a singular deletion by checking the  is_bulk attribute. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.DM_MESSAGES Method generated by attrs for class DMMessageDeleteEvent."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.app", "u": 20, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.channel_id", "u": 20, "d": "ID of the channel that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the channel that this event concerns."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.is_bulk", "u": 20, "d": "Flag that determines whether this was a bulk deletion or not. Returns    - builtins.bool  builtins.True if this was a bulk deletion, or  builtins.False if it was a regular message deletion."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.message_ids", "u": 20, "d": "Set of message IDs that were bulk deleted. Returns    - typing.AbstractSet[hikari.snowflakes.Snowflake] A sequence of message IDs that were bulk deleted."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.shard", "u": 20, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.channel", "u": 20, "d": "Get the cached channel the messages were sent in, if known. Returns    - typing.Union[builtins.None, hikari.channels.GuildTextChannel, hikari.channels.GuildNewsChannel] The channel the messages were sent in, or  builtins.None if not known/cached. This otherwise will always be a  hikari.channels.GuildTextChannel if it is a normal message, or  hikari.channels.GuildNewsChannel if sent in an announcement channel."}, {"r": "hikari.events.message_events.DMMessageDeleteEvent.message_id", "u": 20, "d": "Get the ID of the first deleted message. This is contextually useful if you know this is not a bulk deletion event. For all other purposes, this is the same as running  next(iter(event.message_ids  . Returns    - hikari.snowflakes.Snowflake The first deleted message ID."}, {"r": "hikari.events.user_events", "u": 21, "d": "Events fired when the account user is updated."}, {"r": "hikari.events.user_events.OwnUserUpdateEvent", "u": 21, "d": "Event fired when the account user is updated. Method generated by attrs for class OwnUserUpdateEvent."}, {"r": "hikari.events.user_events.OwnUserUpdateEvent.app", "u": 21, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.user_events.OwnUserUpdateEvent.old_user", "u": 21, "d": "The old application user. This will be  builtins.None if the user missing from the cache."}, {"r": "hikari.events.user_events.OwnUserUpdateEvent.shard", "u": 21, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.user_events.OwnUserUpdateEvent.user", "u": 21, "d": "This application user. Returns    - hikari.users.OwnUser This application user."}, {"r": "hikari.events.lifetime_events", "u": 22, "d": "Events that are bound to the lifetime of an application. These are types of hooks that can be invoked on startup or shutdown, which can be used to initialize other resources, fetch information, and perform checks."}, {"r": "hikari.events.lifetime_events.StartingEvent", "u": 22, "d": "Event that is triggered before the application connects to discord. This will only fire once per  bot.run /  bot.start , so is suitable for opening database connections and other resources that need to be initialized within a coroutine function.  ! warning The application will not proceed to connect to Discord until all event handlers for this event have completed/terminated. This prevents the risk of race conditions occurring (e.g. allowing message events to try to access a database that has not yet connected fully). If you want to do something _after_ the application has initialized, you should consider using  StartedEvent instead. Method generated by attrs for class StartingEvent."}, {"r": "hikari.events.lifetime_events.StartingEvent.app", "u": 22, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.lifetime_events.StartedEvent", "u": 22, "d": "Event that is triggered after the application has started. This will only fire once per  bot.run /  bot.start , so is suitable for opening database connections and other resources that need to be initialized within a coroutine function. If you want to do something _before_ the application connects, you should consider using  StartingEvent instead. Method generated by attrs for class StartedEvent."}, {"r": "hikari.events.lifetime_events.StartedEvent.app", "u": 22, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.lifetime_events.StoppingEvent", "u": 22, "d": "Event that is triggered as soon as the application is requested to close. This will fire before the connection is physically disconnected. This will only fire once per  bot.close , so is suitable for closing database connections and other resources that need to be closed within a coroutine function.  ! warning The application will not proceed to disconnect from Discord until all event handlers for this event have completed/terminated. This prevents the risk of race conditions occurring from code that relies on a connection still being available to complete. If you want to do something _after_ the disconnection has occurred, you should consider using  StoppedEvent instead. Method generated by attrs for class StoppingEvent."}, {"r": "hikari.events.lifetime_events.StoppingEvent.app", "u": 22, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.lifetime_events.StoppedEvent", "u": 22, "d": "Event that is triggered once the application has disconnected. This will only fire once per  bot.close , so is suitable for closing database connections and other resources that need to be closed within a coroutine function.  ! warning The application will not proceed to leave the  bot.run call until all event handlers for this event have completed/terminated. This prevents the risk of race conditions occurring where a script may terminate the process before a callback can occur. If you want to do something when the application is preparing to shut down, but _before_ any connection to discord is closed, you should consider using  StoppingEvent instead. Method generated by attrs for class StoppedEvent."}, {"r": "hikari.events.lifetime_events.StoppedEvent.app", "u": 22, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events", "u": 23, "d": "Events that fire when something occurs within a guild."}, {"r": "hikari.events.guild_events.GuildEvent", "u": 23, "d": "Event base for any guild-bound event. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS -  hikari.intents.Intents.GUILD_BANS -  hikari.intents.Intents.GUILD_EMOJIS -  hikari.intents.Intents.GUILD_PRESENCES Method generated by attrs for class GuildEvent."}, {"r": "hikari.events.guild_events.GuildEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.GuildEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.GuildEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.GuildVisibilityEvent", "u": 23, "d": "Event base for any event that changes the visibility of a guild. This includes when a guild becomes available after an outage, when a guild becomes available on startup, when a guild becomes unavailable due to an outage, when the user is kicked/banned/leaves a guild, or when the user joins a new guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildVisibilityEvent."}, {"r": "hikari.events.guild_events.GuildVisibilityEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildVisibilityEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.GuildVisibilityEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildVisibilityEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildVisibilityEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.GuildVisibilityEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.GuildAvailableEvent", "u": 23, "d": "Event fired when a guild becomes available. This will occur on startup, after outages, and if the bot joins a new guild.  ! note Some fields like  members and  presences are included here but not on the other  GuildUpdateEvent and  GuildUnavailableEvent guild visibility event models. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildAvailableEvent."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.channels", "u": 23, "d": "Mapping of channel IDs to the channels in the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] The channels in the guild."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.chunk_nonce", "u": 23, "d": "Nonce used to request the member chunks for this guild. This will be  builtins.None if no chunks were requested.  ! note This is a syntetic field. Returns    - typing.Optional[builtins.str] The nonce used to request the member chunks."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.emojis", "u": 23, "d": "Mapping of emoji IDs to the emojis in the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] The emojis in the guild."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.guild", "u": 23, "d": "Guild that just became available. Returns    - hikari.guilds.Guild The guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.members", "u": 23, "d": "Mapping of user IDs to the members in the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.guilds.Member] The members in the guild."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.presences", "u": 23, "d": "Mapping of user IDs to the presences for the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] The member presences in the guild."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.roles", "u": 23, "d": "Mapping of role IDs to the roles in the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.guilds.Role] The roles in the guild."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.voice_states", "u": 23, "d": "Mapping of user IDs to the voice states active in this guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] The voice states active in the guild."}, {"r": "hikari.events.guild_events.GuildAvailableEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildAvailableEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildUnavailableEvent", "u": 23, "d": "Event fired when a guild becomes unavailable because of an outage. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildUnavailableEvent."}, {"r": "hikari.events.guild_events.GuildUnavailableEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.GuildUnavailableEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildUnavailableEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.GuildUnavailableEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.GuildUnavailableEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildUnavailableEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildLeaveEvent", "u": 23, "d": "Event fired when the bot is banned/kicked/leaves a guild. This will also fire if the guild was deleted. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildLeaveEvent."}, {"r": "hikari.events.guild_events.GuildLeaveEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.GuildLeaveEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildLeaveEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.GuildLeaveEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.GuildLeaveEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildLeaveEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildUpdateEvent", "u": 23, "d": "Event fired when an existing guild is updated. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILDS Method generated by attrs for class GuildUpdateEvent."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.emojis", "u": 23, "d": "Mapping of emoji IDs to the emojis in the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] The emojis in the guild."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.guild", "u": 23, "d": "Guild that was just updated. Returns    - hikari.guilds.Guild The guild that relates to this event."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.old_guild", "u": 23, "d": "The old guild object. This will be  builtins.None if the guild missing from the cache."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.roles", "u": 23, "d": "Mapping of role IDs to the roles in the guild. Returns    - typing.Mapping[hikari.snowflakes.Snowflake, hikari.guilds.Role] The roles in the guild."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.GuildUpdateEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.GuildUpdateEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.BanEvent", "u": 23, "d": "Event base for any guild ban or unban. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_BANS Method generated by attrs for class BanEvent."}, {"r": "hikari.events.guild_events.BanEvent.user", "u": 23, "d": "User that this ban event affects. Returns    - hikari.users.User The user that this event concerns."}, {"r": "hikari.events.guild_events.BanEvent.fetch_user", "u": 23, "d": "Perform an API call to fetch the user this ban event affects. Returns    - hikari.users.User The user affected by this event.", "f": 1}, {"r": "hikari.events.guild_events.BanEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.BanEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.BanEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.BanEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.BanEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.BanEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.BanCreateEvent", "u": 23, "d": "Event that is fired when a user is banned from a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_BANS Method generated by attrs for class BanCreateEvent."}, {"r": "hikari.events.guild_events.BanCreateEvent.fetch_ban", "u": 23, "d": "Perform an API call to fetch the details about this ban. This will include the optionally defined audit log reason for the ban. Returns    - hikari.guilds.GuildMemberBan The ban details.", "f": 1}, {"r": "hikari.events.guild_events.BanCreateEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.BanCreateEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.BanCreateEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.BanCreateEvent.user", "u": 23, "d": "User that this ban event affects. Returns    - hikari.users.User The user that this event concerns."}, {"r": "hikari.events.guild_events.BanCreateEvent.fetch_user", "u": 23, "d": "Perform an API call to fetch the user this ban event affects. Returns    - hikari.users.User The user affected by this event.", "f": 1}, {"r": "hikari.events.guild_events.BanCreateEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.BanCreateEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.BanCreateEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.BanDeleteEvent", "u": 23, "d": "Event that is fired when a user is unbanned from a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_BANS Method generated by attrs for class BanDeleteEvent."}, {"r": "hikari.events.guild_events.BanDeleteEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.BanDeleteEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.BanDeleteEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.BanDeleteEvent.user", "u": 23, "d": "User that this ban event affects. Returns    - hikari.users.User The user that this event concerns."}, {"r": "hikari.events.guild_events.BanDeleteEvent.fetch_user", "u": 23, "d": "Perform an API call to fetch the user this ban event affects. Returns    - hikari.users.User The user affected by this event.", "f": 1}, {"r": "hikari.events.guild_events.BanDeleteEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.BanDeleteEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.BanDeleteEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.EmojisUpdateEvent", "u": 23, "d": "Event that is fired when the emojis in a guild are updated. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_EMOJIS Method generated by attrs for class EmojisUpdateEvent."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.fetch_emojis", "u": 23, "d": "Perform an API call to retrieve an up-to-date view of the emojis. Returns    - typing.Sequence[emojis_.KnownCustomEmoji] All emojis in the guild.", "f": 1}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.emojis", "u": 23, "d": "Sequence of all emojis in this guild. Returns    - typing.Sequence[emojis_.KnownCustomEmoji] All emojis in the guild."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.old_emojis", "u": 23, "d": "Sequence of all old emojis in this guild. This will be  builtins.None if it's missing from the cache."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.EmojisUpdateEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationEvent", "u": 23, "d": "Event base for any integration related events. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_INTEGRATIONS Method generated by attrs for class IntegrationEvent."}, {"r": "hikari.events.guild_events.IntegrationEvent.application_id", "u": 23, "d": "ID of Discord bot application this integration is connected to. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of Discord bot application this integration is connected to."}, {"r": "hikari.events.guild_events.IntegrationEvent.id", "u": 23, "d": "ID of the integration. Returns    - hikari.snowflakes.Snowflake The ID of the integration."}, {"r": "hikari.events.guild_events.IntegrationEvent.fetch_integrations", "u": 23, "d": "Perform an API call to fetch some number of guild integrations.  ! warning The results of this are not clearly defined by Discord. The current behaviour appears to be that only the first 50 integrations actually get returned. Discord have made it clear that they are not willing to fix this in https: github.com/discord/discord-api-docs/issues/1990. Returns    - typing.Sequence[hikari.guilds.Integration] Some possibly random subset of the integrations in a guild, probably.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.IntegrationEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.IntegrationEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.IntegrationEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent", "u": 23, "d": "Event that is fired when an integration is created in a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_INTEGRATIONS Method generated by attrs for class IntegrationCreateEvent."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.application_id", "u": 23, "d": "ID of Discord bot application this integration is connected to. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of Discord bot application this integration is connected to."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.id", "u": 23, "d": "ID of the integration. Returns    - hikari.snowflakes.Snowflake The ID of the integration."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.integration", "u": 23, "d": "Integration that was created."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.fetch_integrations", "u": 23, "d": "Perform an API call to fetch some number of guild integrations.  ! warning The results of this are not clearly defined by Discord. The current behaviour appears to be that only the first 50 integrations actually get returned. Discord have made it clear that they are not willing to fix this in https: github.com/discord/discord-api-docs/issues/1990. Returns    - typing.Sequence[hikari.guilds.Integration] Some possibly random subset of the integrations in a guild, probably.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationCreateEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent", "u": 23, "d": "Event that is fired when an integration is deleted in a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_INTEGRATIONS Method generated by attrs for class IntegrationDeleteEvent."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.application_id", "u": 23, "d": "ID of Discord bot application this integration is connected to. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of Discord bot application this integration is connected to."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.id", "u": 23, "d": "ID of the integration. Returns    - hikari.snowflakes.Snowflake The ID of the integration."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.fetch_integrations", "u": 23, "d": "Perform an API call to fetch some number of guild integrations.  ! warning The results of this are not clearly defined by Discord. The current behaviour appears to be that only the first 50 integrations actually get returned. Discord have made it clear that they are not willing to fix this in https: github.com/discord/discord-api-docs/issues/1990. Returns    - typing.Sequence[hikari.guilds.Integration] Some possibly random subset of the integrations in a guild, probably.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationDeleteEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent", "u": 23, "d": "Event that is fired when an integration is updated in a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_INTEGRATIONS Method generated by attrs for class IntegrationUpdateEvent."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.application_id", "u": 23, "d": "ID of Discord bot application this integration is connected to. Returns    - typing.Optional[hikari.snowflakes.Snowflake] The ID of Discord bot application this integration is connected to."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.guild_id", "u": 23, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.id", "u": 23, "d": "ID of the integration. Returns    - hikari.snowflakes.Snowflake The ID of the integration."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.integration", "u": 23, "d": "Integration that was updated."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.fetch_integrations", "u": 23, "d": "Perform an API call to fetch some number of guild integrations.  ! warning The results of this are not clearly defined by Discord. The current behaviour appears to be that only the first 50 integrations actually get returned. Discord have made it clear that they are not willing to fix this in https: github.com/discord/discord-api-docs/issues/1990. Returns    - typing.Sequence[hikari.guilds.Integration] Some possibly random subset of the integrations in a guild, probably.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.guild", "u": 23, "d": "Get the cached guild that this event relates to, if known. If not known, this will return  builtins.None instead. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild this event relates to, or  builtins.None if not known."}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.fetch_guild", "u": 23, "d": "Perform an API call to get the guild that this event relates to. Returns    - hikari.guilds.RESTGuild The guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.IntegrationUpdateEvent.fetch_guild_preview", "u": 23, "d": "Perform an API call to get the preview of the event's guild. Returns    - hikari.guilds.GuildPreview The preview of the guild this event occurred in.", "f": 1}, {"r": "hikari.events.guild_events.PresenceUpdateEvent", "u": 23, "d": "Event fired when a user in a guild updates their presence in a guild. Sent when a guild member changes their presence in a specific guild. If the user is changed (e.g. new username), then this may fire many times (once for every guild the bot is part of). This is a limitation of how Discord implements their event system, unfortunately. Furthermore, if the target user is a bot and the bot only updates their presence on specific shards, this will only fire for the corresponding shards that saw the presence update. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_PRESENCES Method generated by attrs for class PresenceUpdateEvent."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.user_id", "u": 23, "d": "User ID of the user that updated their presence. Returns    - hikari.snowflakes.Snowflake ID of the user the event concerns."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.guild_id", "u": 23, "d": "Guild ID that the presence was updated in. Returns    - hikari.snowflakes.Snowflake ID of the guild the event occurred in."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.get_user", "u": 23, "d": "Get the full cached user, if it is available. Returns    - typing.Optional[hikari.users.User] The full cached user, or  builtins.None if not cached.", "f": 1}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.fetch_user", "u": 23, "d": "Perform an API call to fetch the user this event concerns. Returns    - hikari.users.User The user affected by this event.", "f": 1}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.app", "u": 23, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.old_presence", "u": 23, "d": "The old member presence object. This will be  builtins.None if the member presence missing from the cache."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.presence", "u": 23, "d": "Member presence. Returns    - hikari.presences.MemberPresence Presence for the user in this guild."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.shard", "u": 23, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.guild_events.PresenceUpdateEvent.user", "u": 23, "d": "User that was updated. This is a partial user object that only contains the fields that were updated on the user profile. Will be  builtins.None if the user itself did not change. This is always the case if the user only updated their member representation and did not change their user profile directly. Returns    - typing.Optional[hikari.users.PartialUser] The partial user containing the updated fields."}, {"r": "hikari.events.member_events", "u": 24, "d": "Events concerning manipulation of members within guilds."}, {"r": "hikari.events.member_events.MemberEvent", "u": 24, "d": "Event base for any events that concern guild members. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MEMBERS Method generated by attrs for class MemberEvent."}, {"r": "hikari.events.member_events.MemberEvent.guild_id", "u": 24, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.member_events.MemberEvent.user", "u": 24, "d": "User object for the member this event concerns. Returns    - hikari.users.User User object for the member this event concerns."}, {"r": "hikari.events.member_events.MemberEvent.user_id", "u": 24, "d": "ID of the user that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the user that this event relates to."}, {"r": "hikari.events.member_events.MemberEvent.guild", "u": 24, "d": "Get the cached view of the guild this member event occurred in. If the guild itself is not cached, this will return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild that this event occurred in, if known, else  builtins.None ."}, {"r": "hikari.events.member_events.MemberEvent.shard", "u": 14, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.member_events.MemberEvent.app", "u": 15, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.member_events.MemberCreateEvent", "u": 24, "d": "Event that is fired when a member joins a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MEMBERS Method generated by attrs for class MemberCreateEvent."}, {"r": "hikari.events.member_events.MemberCreateEvent.guild_id", "u": 24, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.member_events.MemberCreateEvent.user", "u": 24, "d": "User object for the member this event concerns. Returns    - hikari.users.User User object for the member this event concerns."}, {"r": "hikari.events.member_events.MemberCreateEvent.app", "u": 24, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.member_events.MemberCreateEvent.member", "u": 24, "d": "Member object for the member that joined the guild. Returns    - hikari.guilds.Member The member object for the member who just joined."}, {"r": "hikari.events.member_events.MemberCreateEvent.shard", "u": 24, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.member_events.MemberCreateEvent.user_id", "u": 24, "d": "ID of the user that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the user that this event relates to."}, {"r": "hikari.events.member_events.MemberCreateEvent.guild", "u": 24, "d": "Get the cached view of the guild this member event occurred in. If the guild itself is not cached, this will return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild that this event occurred in, if known, else  builtins.None ."}, {"r": "hikari.events.member_events.MemberUpdateEvent", "u": 24, "d": "Event that is fired when a member is updated in a guild. This may occur if roles are amended, or if the nickname is changed. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MEMBERS Method generated by attrs for class MemberUpdateEvent."}, {"r": "hikari.events.member_events.MemberUpdateEvent.guild_id", "u": 24, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.member_events.MemberUpdateEvent.user", "u": 24, "d": "User object for the member this event concerns. Returns    - hikari.users.User User object for the member this event concerns."}, {"r": "hikari.events.member_events.MemberUpdateEvent.app", "u": 24, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.member_events.MemberUpdateEvent.member", "u": 24, "d": "Member object for the member that was updated. Returns    - hikari.guilds.Member The member object for the member that was updated."}, {"r": "hikari.events.member_events.MemberUpdateEvent.old_member", "u": 24, "d": "The old member object. This will be  builtins.None if the member missing from the cache."}, {"r": "hikari.events.member_events.MemberUpdateEvent.shard", "u": 24, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.member_events.MemberUpdateEvent.user_id", "u": 24, "d": "ID of the user that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the user that this event relates to."}, {"r": "hikari.events.member_events.MemberUpdateEvent.guild", "u": 24, "d": "Get the cached view of the guild this member event occurred in. If the guild itself is not cached, this will return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild that this event occurred in, if known, else  builtins.None ."}, {"r": "hikari.events.member_events.MemberDeleteEvent", "u": 24, "d": "Event fired when a member is kicked from or leaves a guild. This requires one of the following combinations of intents in order to be dispatched: -  hikari.intents.Intents.GUILD_MEMBERS Method generated by attrs for class MemberDeleteEvent."}, {"r": "hikari.events.member_events.MemberDeleteEvent.app", "u": 24, "d": "App instance for this application. Returns    - hikari.traits.RESTAware The REST-aware app trait."}, {"r": "hikari.events.member_events.MemberDeleteEvent.guild_id", "u": 24, "d": "ID of the guild that this event relates to. Returns    - hikari.snowflakes.Snowflake The ID of the guild that relates to this event."}, {"r": "hikari.events.member_events.MemberDeleteEvent.shard", "u": 24, "d": "Shard that received this event. Returns    - hikari.api.shard.GatewayShard The shard that triggered the event."}, {"r": "hikari.events.member_events.MemberDeleteEvent.user", "u": 24, "d": "User object for the member this event concerns. Returns    - hikari.users.User User object for the member this event concerns."}, {"r": "hikari.events.member_events.MemberDeleteEvent.user_id", "u": 24, "d": "ID of the user that this event concerns. Returns    - hikari.snowflakes.Snowflake The ID of the user that this event relates to."}, {"r": "hikari.events.member_events.MemberDeleteEvent.guild", "u": 24, "d": "Get the cached view of the guild this member event occurred in. If the guild itself is not cached, this will return  builtins.None . Returns    - typing.Optional[hikari.guilds.GatewayGuild] The guild that this event occurred in, if known, else  builtins.None ."}, {"r": "hikari.undefined", "u": 25, "d": "Singleton used throughout the library to denote values that are not present."}, {"r": "hikari.undefined.UNDEFINED", "u": 25, "d": "A sentinel singleton that denotes a missing or omitted value."}, {"r": "hikari.undefined.UndefinedNoneOr", "u": 25, "d": "Type hint for a value that may be  undefined.UNDEFINED , or  builtins.None .  UndefinedNoneOr[T] is simply an alias for  UndefinedOr[typing.Optional[T  , which would expand to  typing.Union[UndefinedType, T, None] ."}, {"r": "hikari.undefined.UndefinedOr", "u": 25, "d": "Type hint to mark a type as being semantically optional.  NOTE THAT THIS IS NOT THE SAME AS  typing.Optional BY DEFINITION . If you see a type with this marker, it may be  UNDEFINED or the value it wraps. For example,  UndefinedOr[float] would mean the value could be a  builtins.float , or the literal  UNDEFINED value. On the other hand,  typing.Optional[float] would mean the value could be a  builtins.float , or the literal  builtins.None value. The reason for using this is in some places, there is a semantic difference between specifying something as being  builtins.None , i.e. \"no value\", and having a default to specify that the value has just not been mentioned. The main example of this is in  edit endpoints where the contents will only be changed if they are explicitly mentioned in the call. Editing a message content and setting it to  builtins.None would be expected to clear the content, whereas setting it to  UNDEFINED would be expected to leave the value as it is without changing it. Consider  UndefinedOr[T] semantically equivalent to  undefined versus  null in JavaScript, or  Optional  versus  null in Java and C . If in doubt, remember: -  UNDEFINED means there is no value present, or that it has been left to the default value. -  builtins.None means the value is present and explicitly empty/null/void, where this has a deterministic documented behaviour and no differentiation is made between a  builtins.None value, and one that has been omitted."}, {"r": "hikari.undefined.UndefinedType", "u": 25, "d": "The type of the  UNDEFINED singleton sentinel value."}, {"r": "hikari.undefined.count", "u": 25, "d": "Count the number of items that are provided that are  UNDEFINED .", "f": 1}, {"r": "hikari.cli", "u": 26, "d": "Provides the  python -m hikari and  hikari commands to the shell."}, {"r": "hikari.cli.main", "u": 26, "d": "Print package info and exit.", "f": 1}, {"r": "hikari.channels", "u": 27, "d": "Application and entities that are used to describe both DMs and guild channels on Discord."}, {"r": "hikari.channels.ChannelType", "u": 27, "d": "The known channel types that are exposed to us by the API."}, {"r": "hikari.channels.ChannelType.name", "u": 27, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.channels.ChannelType.value", "u": 27, "d": "Return the value of the enum member."}, {"r": "hikari.channels.ChannelType.GUILD_TEXT", "u": 27, "d": "A text channel in a guild."}, {"r": "hikari.channels.ChannelType.DM", "u": 27, "d": "A direct channel between two users."}, {"r": "hikari.channels.ChannelType.GUILD_VOICE", "u": 27, "d": "A voice channel in a guild."}, {"r": "hikari.channels.ChannelType.GROUP_DM", "u": 27, "d": "A direct channel between multiple users."}, {"r": "hikari.channels.ChannelType.GUILD_CATEGORY", "u": 27, "d": "An category used for organizing channels in a guild."}, {"r": "hikari.channels.ChannelType.GUILD_NEWS", "u": 27, "d": "A channel that can be followed and can crosspost."}, {"r": "hikari.channels.ChannelType.GUILD_STORE", "u": 27, "d": "A channel that show's a game's store page."}, {"r": "hikari.channels.ChannelFollow", "u": 27, "d": "Relationship between a news channel and a subscriber channel. The subscriber channel will receive crosspost messages that correspond to any \"broadcast\" announcements that the news channel creates. Method generated by attrs for class ChannelFollow."}, {"r": "hikari.channels.ChannelFollow.fetch_channel", "u": 27, "d": "Fetch the object of the guild channel being followed. Returns    - typing.Union[hikari.channels.GuildNewsChannel, hikari.channels.GuildTextChannel] The channel being followed. While this will usually be  GuildNewsChannel , if the channel's news status has been removed then this will be a  GuildTextChannel Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.channels.ChannelFollow.fetch_webhook", "u": 27, "d": "Fetch the webhook attached to this follow. Returns    - hikari.webhooks.Webhook The webhook attached to this follow. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission in the guild or channel this follow is targeting. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.channels.ChannelFollow.channel", "u": 27, "d": "Get the channel being followed from the cache.  ! warning This will always be  builtins.None if you are not in the guild that this channel exists in. Returns    - typing.Union[hikari.channels.GuildNewsChannel, hikari.channels.GuildTextChannel, builtins.None] The object of the guild channel that was found in the cache or  builtins.None . While this will usually be  GuildNewsChannel or  builtins.None , if the channel referenced has since lost it's news status then this will return a  GuildTextChannel ."}, {"r": "hikari.channels.ChannelFollow.app", "u": 27, "d": "Return the client application that models may use for procedures. Returns    - hikari.traits.RESTAware The REST-aware application object."}, {"r": "hikari.channels.ChannelFollow.channel_id", "u": 27, "d": "Return the channel ID of the channel being followed. Returns    - hikari.snowflakes.Snowflake The channel ID for the channel being followed."}, {"r": "hikari.channels.ChannelFollow.webhook_id", "u": 27, "d": "Return the ID of the webhook for this follow. Returns    - hikari.snowflakes.Snowflake The ID of the webhook that was created for this follow."}, {"r": "hikari.channels.PermissionOverwrite", "u": 27, "d": "Represents permission overwrites for a channel or role in a channel. You may sometimes need to make instances of this object to add/edit permission overwrites on channels. Example    - Creating a permission overwrite.   overwrite = PermissionOverwrite( type=PermissionOverwriteType.MEMBER, allow=( Permissions.VIEW_CHANNEL | Permissions.READ_MESSAGE_HISTORY | Permissions.SEND_MESSAGES ), deny=( Permissions.MANAGE_MESSAGES | Permissions.SPEAK ), )   Method generated by attrs for class PermissionOverwrite."}, {"r": "hikari.channels.PermissionOverwrite.unset", "u": 27, "d": "Bitfield of all permissions not explicitly allowed or denied by this overwrite."}, {"r": "hikari.channels.PermissionOverwrite.allow", "u": 27, "d": "The permissions this overwrite allows."}, {"r": "hikari.channels.PermissionOverwrite.deny", "u": 27, "d": "The permissions this overwrite denies."}, {"r": "hikari.channels.PermissionOverwrite.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.PermissionOverwrite.type", "u": 27, "d": "The type of entity this overwrite targets."}, {"r": "hikari.channels.PermissionOverwrite.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.PermissionOverwriteType", "u": 27, "d": "The type of entity a Permission Overwrite targets."}, {"r": "hikari.channels.PermissionOverwriteType.name", "u": 27, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.channels.PermissionOverwriteType.value", "u": 27, "d": "Return the value of the enum member."}, {"r": "hikari.channels.PermissionOverwriteType.ROLE", "u": 27, "d": "A permission overwrite that targets all the members with a specific role."}, {"r": "hikari.channels.PermissionOverwriteType.MEMBER", "u": 27, "d": "A permission overwrite that targets a specific guild member."}, {"r": "hikari.channels.PartialChannel", "u": 27, "d": "Channel representation for cases where further detail is not provided. This is commonly received in HTTP API responses where full information is not available from Discord. Method generated by attrs for class PartialChannel."}, {"r": "hikari.channels.PartialChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.PartialChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.PartialChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.PartialChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.PartialChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.TextChannel", "u": 27, "d": "A channel that can have text messages in it. Method generated by attrs for class PartialChannel."}, {"r": "hikari.channels.TextChannel.history", "u": 27, "d": "Browse the message history for a given text channel. Other Parameters         before : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages before this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. after : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages after this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. around : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages around this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.messages.Message] A iterator to fetch the messages. Raises    builtins.TypeError If you specify more than one of  before ,  after ,  about . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to read message history in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint (other than  builtins.TypeError ) will only be raised once the result is awaited or interacted with. Invoking this function itself will not raise anything (other than  builtins.TypeError ).", "f": 1}, {"r": "hikari.channels.TextChannel.send", "u": 27, "d": "Create a message in this channel. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be TTS (Text To Speech). nonce : hikari.undefined.UndefinedOr[builtins.str] If provided, a nonce that can be used for optimistic message sending. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request. builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.channels.TextChannel.trigger_typing", "u": 27, "d": "Trigger typing in a given channel. This returns an object that can either be  await ed to trigger typing once, or used as an async context manager to keep typing until the block completes.   await channel.trigger_typing()  type for 10s async with channel.trigger_typing(): await asyncio.sleep(35)  keep typing until this finishes    ! note Sending a message to this channel will stop the typing indicator. If using an  async with , it will start up again after a few seconds. This is a limitation of Discord's API. Returns    - hikari.api.special_endpoints.TypingIndicator The typing indicator object.", "f": 1}, {"r": "hikari.channels.TextChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.TextChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.TextChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.TextChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.TextChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.PrivateChannel", "u": 27, "d": "The base for anything that is a private (non-guild bound) channel. Method generated by attrs for class PrivateChannel."}, {"r": "hikari.channels.PrivateChannel.last_message_id", "u": 27, "d": "The ID of the last message sent in this channel.  ! warning This might point to an invalid or deleted message. Do not assume that this will always be valid."}, {"r": "hikari.channels.PrivateChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.PrivateChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.PrivateChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.PrivateChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.PrivateChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.DMChannel", "u": 27, "d": "Represents a direct message text channel that is between you and another user. Method generated by attrs for class DMChannel."}, {"r": "hikari.channels.DMChannel.shard_id", "u": 27, "d": "Return the shard ID for the shard."}, {"r": "hikari.channels.DMChannel.recipient", "u": 27, "d": "The user recipient of this DM."}, {"r": "hikari.channels.DMChannel.last_message_id", "u": 27, "d": "The ID of the last message sent in this channel.  ! warning This might point to an invalid or deleted message. Do not assume that this will always be valid."}, {"r": "hikari.channels.DMChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.DMChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.DMChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.DMChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.DMChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.DMChannel.history", "u": 27, "d": "Browse the message history for a given text channel. Other Parameters         before : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages before this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. after : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages after this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. around : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages around this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.messages.Message] A iterator to fetch the messages. Raises    builtins.TypeError If you specify more than one of  before ,  after ,  about . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to read message history in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint (other than  builtins.TypeError ) will only be raised once the result is awaited or interacted with. Invoking this function itself will not raise anything (other than  builtins.TypeError ).", "f": 1}, {"r": "hikari.channels.DMChannel.send", "u": 27, "d": "Create a message in this channel. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be TTS (Text To Speech). nonce : hikari.undefined.UndefinedOr[builtins.str] If provided, a nonce that can be used for optimistic message sending. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request. builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.channels.DMChannel.trigger_typing", "u": 27, "d": "Trigger typing in a given channel. This returns an object that can either be  await ed to trigger typing once, or used as an async context manager to keep typing until the block completes.   await channel.trigger_typing()  type for 10s async with channel.trigger_typing(): await asyncio.sleep(35)  keep typing until this finishes    ! note Sending a message to this channel will stop the typing indicator. If using an  async with , it will start up again after a few seconds. This is a limitation of Discord's API. Returns    - hikari.api.special_endpoints.TypingIndicator The typing indicator object.", "f": 1}, {"r": "hikari.channels.GroupDMChannel", "u": 27, "d": "Represents a group direct message channel.  ! note This doesn't have the methods found on  TextChannel as bots cannot interact with a group DM that they own by sending or seeing messages in it. Method generated by attrs for class GroupDMChannel."}, {"r": "hikari.channels.GroupDMChannel.icon_url", "u": 27, "d": "Icon for this groupd DM, if set."}, {"r": "hikari.channels.GroupDMChannel.format_icon", "u": 27, "d": "Generate the icon for this group, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL, or  builtins.None if no icon is present. Raises    builtins.ValueError If  size is not a power of two between 16 and 4096 (inclusive).", "f": 1}, {"r": "hikari.channels.GroupDMChannel.application_id", "u": 27, "d": "The ID of the application that created the group DM. If the group DM was not created by a bot, this will be  builtins.None ."}, {"r": "hikari.channels.GroupDMChannel.icon_hash", "u": 27, "d": "The CDN hash of the icon of the group, if an icon is set."}, {"r": "hikari.channels.GroupDMChannel.nicknames", "u": 27, "d": "A mapping of set nicknames within this group DMs to user IDs."}, {"r": "hikari.channels.GroupDMChannel.owner_id", "u": 27, "d": "The ID of the owner of the group."}, {"r": "hikari.channels.GroupDMChannel.recipients", "u": 27, "d": "The recipients of the group DM."}, {"r": "hikari.channels.GroupDMChannel.last_message_id", "u": 27, "d": "The ID of the last message sent in this channel.  ! warning This might point to an invalid or deleted message. Do not assume that this will always be valid."}, {"r": "hikari.channels.GroupDMChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GroupDMChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GroupDMChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GroupDMChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GroupDMChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.GuildCategory", "u": 27, "d": "Represents a guild category channel. These can contain other channels inside, and act as a method for organisation. Method generated by attrs for class GuildCategory."}, {"r": "hikari.channels.GuildCategory.guild_id", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildCategory.position", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildCategory.permission_overwrites", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildCategory.is_nsfw", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildCategory.parent_id", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildCategory.shard_id", "u": 27, "d": "Return the shard ID for the shard. This may be  builtins.None if the shard count is not known."}, {"r": "hikari.channels.GuildCategory.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GuildCategory.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GuildCategory.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GuildCategory.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GuildCategory.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.GuildChannel", "u": 27, "d": "The base for anything that is a guild channel. Method generated by attrs for class GuildChannel."}, {"r": "hikari.channels.GuildChannel.shard_id", "u": 27, "d": "Return the shard ID for the shard. This may be  builtins.None if the shard count is not known."}, {"r": "hikari.channels.GuildChannel.guild_id", "u": 27, "d": "The ID of the guild the channel belongs to."}, {"r": "hikari.channels.GuildChannel.is_nsfw", "u": 27, "d": "Whether the channel is marked as NSFW.  ! warning This will be  builtins.None when received over the gateway in certain events (e.g Guild Create)."}, {"r": "hikari.channels.GuildChannel.parent_id", "u": 27, "d": "The ID of the parent category the channel belongs to. If no parent category is set for the channel, this will be  builtins.None ."}, {"r": "hikari.channels.GuildChannel.permission_overwrites", "u": 27, "d": "The permission overwrites for the channel. This maps the ID of the entity in the overwrite to the overwrite data."}, {"r": "hikari.channels.GuildChannel.position", "u": 27, "d": "The sorting position of the channel. Higher numbers appear further down the channel list."}, {"r": "hikari.channels.GuildChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GuildChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GuildChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GuildChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GuildChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.GuildTextChannel", "u": 27, "d": "Represents a guild text channel. Method generated by attrs for class GuildTextChannel."}, {"r": "hikari.channels.GuildTextChannel.last_message_id", "u": 27, "d": "The ID of the last message sent in this channel.  ! warning This might point to an invalid or deleted message. Do not assume that this will always be valid."}, {"r": "hikari.channels.GuildTextChannel.last_pin_timestamp", "u": 27, "d": "The timestamp of the last-pinned message.  ! note This may be  builtins.None in several cases; Discord does not document what these cases are. Trust no one!"}, {"r": "hikari.channels.GuildTextChannel.rate_limit_per_user", "u": 27, "d": "The delay (in seconds) between a user can send a message to this channel. If there is no rate limit, this will be 0 seconds.  ! note Any user that has permissions allowing  MANAGE_MESSAGES ,  MANAGE_CHANNEL ,  ADMINISTRATOR will not be limited. Likewise, bots will not be affected by this rate limit."}, {"r": "hikari.channels.GuildTextChannel.topic", "u": 27, "d": "The topic of the channel."}, {"r": "hikari.channels.GuildTextChannel.shard_id", "u": 27, "d": "Return the shard ID for the shard. This may be  builtins.None if the shard count is not known."}, {"r": "hikari.channels.GuildTextChannel.guild_id", "u": 27, "d": "The ID of the guild the channel belongs to."}, {"r": "hikari.channels.GuildTextChannel.is_nsfw", "u": 27, "d": "Whether the channel is marked as NSFW.  ! warning This will be  builtins.None when received over the gateway in certain events (e.g Guild Create)."}, {"r": "hikari.channels.GuildTextChannel.parent_id", "u": 27, "d": "The ID of the parent category the channel belongs to. If no parent category is set for the channel, this will be  builtins.None ."}, {"r": "hikari.channels.GuildTextChannel.permission_overwrites", "u": 27, "d": "The permission overwrites for the channel. This maps the ID of the entity in the overwrite to the overwrite data."}, {"r": "hikari.channels.GuildTextChannel.position", "u": 27, "d": "The sorting position of the channel. Higher numbers appear further down the channel list."}, {"r": "hikari.channels.GuildTextChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GuildTextChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GuildTextChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GuildTextChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GuildTextChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.GuildTextChannel.history", "u": 27, "d": "Browse the message history for a given text channel. Other Parameters         before : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages before this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. after : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages after this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. around : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages around this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.messages.Message] A iterator to fetch the messages. Raises    builtins.TypeError If you specify more than one of  before ,  after ,  about . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to read message history in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint (other than  builtins.TypeError ) will only be raised once the result is awaited or interacted with. Invoking this function itself will not raise anything (other than  builtins.TypeError ).", "f": 1}, {"r": "hikari.channels.GuildTextChannel.send", "u": 27, "d": "Create a message in this channel. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be TTS (Text To Speech). nonce : hikari.undefined.UndefinedOr[builtins.str] If provided, a nonce that can be used for optimistic message sending. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request. builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.channels.GuildTextChannel.trigger_typing", "u": 27, "d": "Trigger typing in a given channel. This returns an object that can either be  await ed to trigger typing once, or used as an async context manager to keep typing until the block completes.   await channel.trigger_typing()  type for 10s async with channel.trigger_typing(): await asyncio.sleep(35)  keep typing until this finishes    ! note Sending a message to this channel will stop the typing indicator. If using an  async with , it will start up again after a few seconds. This is a limitation of Discord's API. Returns    - hikari.api.special_endpoints.TypingIndicator The typing indicator object.", "f": 1}, {"r": "hikari.channels.GuildNewsChannel", "u": 27, "d": "Represents an news channel. Method generated by attrs for class GuildNewsChannel."}, {"r": "hikari.channels.GuildNewsChannel.last_message_id", "u": 27, "d": "The ID of the last message sent in this channel.  ! warning This might point to an invalid or deleted message. Do not assume that this will always be valid."}, {"r": "hikari.channels.GuildNewsChannel.last_pin_timestamp", "u": 27, "d": "The timestamp of the last-pinned message.  ! note This may be  builtins.None in several cases; Discord does not document what these cases are. Trust no one!"}, {"r": "hikari.channels.GuildNewsChannel.topic", "u": 27, "d": "The topic of the channel."}, {"r": "hikari.channels.GuildNewsChannel.shard_id", "u": 27, "d": "Return the shard ID for the shard. This may be  builtins.None if the shard count is not known."}, {"r": "hikari.channels.GuildNewsChannel.guild_id", "u": 27, "d": "The ID of the guild the channel belongs to."}, {"r": "hikari.channels.GuildNewsChannel.is_nsfw", "u": 27, "d": "Whether the channel is marked as NSFW.  ! warning This will be  builtins.None when received over the gateway in certain events (e.g Guild Create)."}, {"r": "hikari.channels.GuildNewsChannel.parent_id", "u": 27, "d": "The ID of the parent category the channel belongs to. If no parent category is set for the channel, this will be  builtins.None ."}, {"r": "hikari.channels.GuildNewsChannel.permission_overwrites", "u": 27, "d": "The permission overwrites for the channel. This maps the ID of the entity in the overwrite to the overwrite data."}, {"r": "hikari.channels.GuildNewsChannel.position", "u": 27, "d": "The sorting position of the channel. Higher numbers appear further down the channel list."}, {"r": "hikari.channels.GuildNewsChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GuildNewsChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GuildNewsChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GuildNewsChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GuildNewsChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.GuildNewsChannel.history", "u": 27, "d": "Browse the message history for a given text channel. Other Parameters         before : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages before this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. after : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages after this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. around : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages around this snowflakes. If you provide a datetime object, it will be transformed into a snowflakes. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.messages.Message] A iterator to fetch the messages. Raises    builtins.TypeError If you specify more than one of  before ,  after ,  about . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to read message history in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint (other than  builtins.TypeError ) will only be raised once the result is awaited or interacted with. Invoking this function itself will not raise anything (other than  builtins.TypeError ).", "f": 1}, {"r": "hikari.channels.GuildNewsChannel.send", "u": 27, "d": "Create a message in this channel. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be TTS (Text To Speech). nonce : hikari.undefined.UndefinedOr[builtins.str] If provided, a nonce that can be used for optimistic message sending. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all mentions will be parsed. If provided, and  builtins.False , no mentions will be parsed. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you lack permissions to send messages in the given channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request. builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.channels.GuildNewsChannel.trigger_typing", "u": 27, "d": "Trigger typing in a given channel. This returns an object that can either be  await ed to trigger typing once, or used as an async context manager to keep typing until the block completes.   await channel.trigger_typing()  type for 10s async with channel.trigger_typing(): await asyncio.sleep(35)  keep typing until this finishes    ! note Sending a message to this channel will stop the typing indicator. If using an  async with , it will start up again after a few seconds. This is a limitation of Discord's API. Returns    - hikari.api.special_endpoints.TypingIndicator The typing indicator object.", "f": 1}, {"r": "hikari.channels.GuildStoreChannel", "u": 27, "d": "Represents a store channel. These were originally used to sell games when Discord had a game store. This was scrapped at the end of 2019, so these may disappear from the platform eventually. Method generated by attrs for class GuildStoreChannel."}, {"r": "hikari.channels.GuildStoreChannel.guild_id", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildStoreChannel.position", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildStoreChannel.permission_overwrites", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildStoreChannel.is_nsfw", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildStoreChannel.parent_id", "u": 27, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.channels.GuildStoreChannel.shard_id", "u": 27, "d": "Return the shard ID for the shard. This may be  builtins.None if the shard count is not known."}, {"r": "hikari.channels.GuildStoreChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GuildStoreChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GuildStoreChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GuildStoreChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GuildStoreChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.channels.GuildVoiceChannel", "u": 27, "d": "Represents an voice channel. Method generated by attrs for class GuildVoiceChannel."}, {"r": "hikari.channels.GuildVoiceChannel.bitrate", "u": 27, "d": "The bitrate for the voice channel (in bits per second)."}, {"r": "hikari.channels.GuildVoiceChannel.user_limit", "u": 27, "d": "The user limit for the voice channel. If this is  0 , then assume no limit."}, {"r": "hikari.channels.GuildVoiceChannel.shard_id", "u": 27, "d": "Return the shard ID for the shard. This may be  builtins.None if the shard count is not known."}, {"r": "hikari.channels.GuildVoiceChannel.guild_id", "u": 27, "d": "The ID of the guild the channel belongs to."}, {"r": "hikari.channels.GuildVoiceChannel.is_nsfw", "u": 27, "d": "Whether the channel is marked as NSFW.  ! warning This will be  builtins.None when received over the gateway in certain events (e.g Guild Create)."}, {"r": "hikari.channels.GuildVoiceChannel.parent_id", "u": 27, "d": "The ID of the parent category the channel belongs to. If no parent category is set for the channel, this will be  builtins.None ."}, {"r": "hikari.channels.GuildVoiceChannel.permission_overwrites", "u": 27, "d": "The permission overwrites for the channel. This maps the ID of the entity in the overwrite to the overwrite data."}, {"r": "hikari.channels.GuildVoiceChannel.position", "u": 27, "d": "The sorting position of the channel. Higher numbers appear further down the channel list."}, {"r": "hikari.channels.GuildVoiceChannel.app", "u": 27, "d": "The client application that models may use for procedures."}, {"r": "hikari.channels.GuildVoiceChannel.id", "u": 27, "d": "The ID of this entity."}, {"r": "hikari.channels.GuildVoiceChannel.name", "u": 27, "d": "The channel's name. This will be missing for DM channels."}, {"r": "hikari.channels.GuildVoiceChannel.type", "u": 27, "d": "The channel's type."}, {"r": "hikari.channels.GuildVoiceChannel.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.sessions", "u": 28, "d": "Entities directly related to creating and managing gateway shard sessions."}, {"r": "hikari.sessions.GatewayBot", "u": 28, "d": "Used to represent gateway information for the connected bot. Method generated by attrs for class GatewayBot."}, {"r": "hikari.sessions.GatewayBot.session_start_limit", "u": 28, "d": "Information about the bot's current session start limit."}, {"r": "hikari.sessions.GatewayBot.shard_count", "u": 28, "d": "The recommended number of shards to use when connecting to the gateway."}, {"r": "hikari.sessions.GatewayBot.url", "u": 28, "d": "The WSS URL that can be used for connecting to the gateway."}, {"r": "hikari.sessions.SessionStartLimit", "u": 28, "d": "Used to represent information about the current session start limits. Method generated by attrs for class SessionStartLimit."}, {"r": "hikari.sessions.SessionStartLimit.used", "u": 28, "d": "Return how many times you have sent an IDENTIFY in the window."}, {"r": "hikari.sessions.SessionStartLimit.reset_at", "u": 28, "d": "Return the approximate time that the IDENTIFY limit resets at."}, {"r": "hikari.sessions.SessionStartLimit.max_concurrency", "u": 28, "d": "Maximum connection concurrency. This defines how many shards can be started at once within a 5 second window. For most bots, this will always be  1 , but for very large bots, this may be increased to reduce startup times. Contact Discord for more information."}, {"r": "hikari.sessions.SessionStartLimit.remaining", "u": 28, "d": "The remaining number of session starts this bot has."}, {"r": "hikari.sessions.SessionStartLimit.reset_after", "u": 28, "d": "When  SessionStartLimit.remaining will reset for the current bot. After it resets it will be set to  SessionStartLimit.total ."}, {"r": "hikari.sessions.SessionStartLimit.total", "u": 28, "d": "The total number of session starts the current bot is allowed."}, {"r": "hikari.event_stream", "u": 29, "d": "Streamers used for asynchronously iterating through gateway events."}, {"r": "hikari.event_stream.Streamer", "u": 29, "d": "A base abstract class for all event streamers. Unlike  hikari.iterators.LazyIterator (which this extends), an event streamer must be started and closed. Examples     A streamer may either be started and closed using  async with syntax where  Streamer.open and  Streamer.close are implicitly called based on context.   async with Streamer(app, EventType, timeout=50) as stream: async for entry in stream:  .   A streamer may also be directly started and closed using the  Streamer.close and  Streamer.open . Note that if you don't call  Streamer.close after opening a streamer when you're finished with it then it may queue events events in memory indefinitely.   stream = Streamer(app, EventType, timeout=50) await stream.open() async for event in stream:  . await stream.close()   See Also     LazyIterator:  hikari.iterators.LazyIterator "}, {"r": "hikari.event_stream.Streamer.close", "u": 29, "d": "Mark this streamer as closed to stop it from queueing and receiving events. If called on an already closed streamer then this will do nothing.  ! note  async with streamer may be used as a short-cut for opening and closing a streamer.", "f": 1}, {"r": "hikari.event_stream.Streamer.open", "u": 29, "d": "Mark this streamer as opened to let it start receiving and queueing events. If called on an already started streamer then this will do nothing.  ! note  async with streamer may be used as a short-cut for opening and closing a stream.", "f": 1}, {"r": "hikari.event_stream.Streamer.chunk", "u": 30, "d": "Return results in chunks of up to  chunk_size amount of entries. Parameters      chunk_size : int The limit for how many results should be returned in each chunk. Returns    - LazyIterator[typing.Sequence[ValueT  LazyIterator that emits each chunked sequence.", "f": 1}, {"r": "hikari.event_stream.Streamer.map", "u": 30, "d": "Map the values to a different value. Parameters      transformation : typing.Union[typing.Callable ValueT], builtins.bool], builtins.str] The function to use to map the attribute. This may alternatively be a string attribute name to replace the input value with. You can provide nested attributes using the  . operator. Returns    - LazyIterator[AnotherValueT]  LazyIterator that maps each value to another value.", "f": 1}, {"r": "hikari.event_stream.Streamer.for_each", "u": 30, "d": "Pass each value to a given consumer immediately.", "f": 1}, {"r": "hikari.event_stream.Streamer.filter", "u": 30, "d": "Filter the items by one or more conditions. Each condition is treated as a predicate, being called with each item that this iterator would return when it is requested. All conditions must evaluate to  builtins.True for the item to be returned. If this is not met, then the item is discared and ignored, the next matching item will be returned instead, if there is one. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.filter \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT]  LazyIterator that only emits values where all conditions are matched.", "f": 1}, {"r": "hikari.event_stream.Streamer.take_while", "u": 30, "d": "Return each item until any conditions fail or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are not matched.", "f": 1}, {"r": "hikari.event_stream.Streamer.take_until", "u": 30, "d": "Return each item until any conditions pass or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are matched.", "f": 1}, {"r": "hikari.event_stream.Streamer.skip_while", "u": 30, "d": "Discard items while all conditions are True. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has been met. All items before this are discarded.", "f": 1}, {"r": "hikari.event_stream.Streamer.skip_until", "u": 30, "d": "Discard items while all conditions are False. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has failed. All items before this are discarded.", "f": 1}, {"r": "hikari.event_stream.Streamer.enumerate", "u": 30, "d": "Enumerate the paginated results lazily. This behaves as an asyncio-friendly version of  builtins.enumerate which uses much less memory than collecting all the results first and calling  builtins.enumerate across them. Parameters      start : builtins.int Optional int to start at. If omitted, this is  0 . Examples     >>> async for i, item in paginated_results.enumerate():  . print(i, item) (0, foo) (1, bar) (2, baz) (3, bork) (4, qux) >>> async for i, item in paginated_results.enumerate(start=9):  . print(i, item) (9, foo) (10, bar) (11, baz) (12, bork) (13, qux) >>> async for i, item in paginated_results.enumerate(start=9).limit(3):  . print(i, item) (9, foo) (10, bar) (11, baz) Returns    - LazyIterator[typing.Tuple[builtins.int, T A paginated results view that asynchronously yields an increasing counter in a tuple with each result, lazily.", "f": 1}, {"r": "hikari.event_stream.Streamer.limit", "u": 30, "d": "Limit the number of items you receive from this async iterator. Parameters      limit : builtins.int The number of items to get. This must be greater than zero. Examples     >>> async for item in paginated_results.limit(3):  . print(item) Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields a maximum of the given number of items before completing.", "f": 1}, {"r": "hikari.event_stream.Streamer.skip", "u": 30, "d": "Drop the given number of items, then yield anything after. Parameters      number : builtins.int The max number of items to drop before any items are yielded. Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields all items AFTER the given number of items are discarded first.", "f": 1}, {"r": "hikari.event_stream.Streamer.next", "u": 30, "d": "Return the next element of this iterator only. Returns    - ValueT The next result. Raises    builtins.LookupError If no more results exist.", "f": 1}, {"r": "hikari.event_stream.Streamer.last", "u": 30, "d": "Return the last element of this iterator only. Returns    - ValueT The last result.  ! note This method will consume the whole iterator if run. Raises    builtins.LookupError If no result exists.", "f": 1}, {"r": "hikari.event_stream.Streamer.reversed", "u": 30, "d": "Return a lazy iterator of the remainder of this iterator's values reversed. Returns    - LazyIterator[ValueT] The lazy iterator of this iterator's remaining values reversed.", "f": 1}, {"r": "hikari.event_stream.Streamer.sort", "u": 30, "d": "Collect all results, then sort the collection before returning it.", "f": 1}, {"r": "hikari.event_stream.Streamer.collect", "u": 30, "d": "Collect the results into a given type and return it. Parameters      collector A function that consumes a sequence of values and returns a collection.", "f": 1}, {"r": "hikari.event_stream.Streamer.count", "u": 30, "d": "Count the number of results. Returns    - builtins.int Number of results found.", "f": 1}, {"r": "hikari.event_stream.Streamer.flat_map", "u": 30, "d": "Perform a flat mapping operation. This will pass each item in the iterator to the given  function parameter, expecting a new  typing.Iterable or  typing.AsyncIterator to be returned as the result. This means you can map to a new  LazyIterator ,  typing.AsyncIterator ,  typing.Iterable , async generator, or generator. Remember that  typing.Iterator implicitly provides  typing.Iterable compatibility. This is used to provide lazy conversions, and can be used to implement reactive-like pipelines if desired. All results are combined into one large lazy iterator and yielded lazily. Parameters      flattener A function that returns either an async iterator or iterator of new values. Could be an attribute name instead. Example    - The following example generates a distinct collection of all mentioned users in the given channel from the past 500 messages.   def iter_mentioned_users(message: hikari.Message) -> typing.Iterable[Snowflake]: for match in re.findall(r\" \", message.content): yield Snowflake(match) mentioned_users = await ( channel .history() .limit(500) .map(\".content\") .flat_map(iter_mentioned_users) .distinct() )   Returns    - LazyIterator[AnotherValueT] The new lazy iterator to return.", "f": 1}, {"r": "hikari.event_stream.Streamer.awaiting", "u": 30, "d": "Await each item concurrently in a fixed size window. Parameters      window_size : int The window size of how many tasks to await at once. You can set this to  0 to await everything at once, but see the below warning. Returns    - LazyIterator[ValueT] The new lazy iterator to return.  ! warning Setting a large window size, or setting it to 0 to await everything is a dangerous thing to do if you are making API calls. Some endpoints will get ratelimited and cause a backup of waiting tasks, others may begin to spam global rate limits instead (the  fetch_user endpoint seems to be notorious for doing this).  ! note This call assumes that the iterator contains awaitable values as input. MyPy cannot detect this nicely, so any cast is forced internally. If the item is not awaitable, you will receive a  builtins.TypeError instead. You have been warned. You cannot escape the ways of the duck type young grasshopper.", "f": 1}, {"r": "hikari.event_stream.EventStream", "u": 29, "d": "An implementation of an event  Streamer class.  ! note While calling  EventStream.filter on an active \"opened\" event stream will return a wrapping lazy iterator, calling it on an inactive \"closed\" event stream will return the event stream and add the given predicates to the streamer."}, {"r": "hikari.event_stream.EventStream.close", "u": 29, "d": "Mark this streamer as closed to stop it from queueing and receiving events. If called on an already closed streamer then this will do nothing.  ! note  async with streamer may be used as a short-cut for opening and closing a streamer.", "f": 1}, {"r": "hikari.event_stream.EventStream.filter", "u": 29, "d": "Filter the items by one or more conditions. Each condition is treated as a predicate, being called with each item that this iterator would return when it is requested. All conditions must evaluate to  builtins.True for the item to be returned. If this is not met, then the item is discared and ignored, the next matching item will be returned instead, if there is one. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.filter \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT]  LazyIterator that only emits values where all conditions are matched.", "f": 1}, {"r": "hikari.event_stream.EventStream.open", "u": 29, "d": "Mark this streamer as opened to let it start receiving and queueing events. If called on an already started streamer then this will do nothing.  ! note  async with streamer may be used as a short-cut for opening and closing a stream.", "f": 1}, {"r": "hikari.event_stream.EventStream.chunk", "u": 30, "d": "Return results in chunks of up to  chunk_size amount of entries. Parameters      chunk_size : int The limit for how many results should be returned in each chunk. Returns    - LazyIterator[typing.Sequence[ValueT  LazyIterator that emits each chunked sequence.", "f": 1}, {"r": "hikari.event_stream.EventStream.map", "u": 30, "d": "Map the values to a different value. Parameters      transformation : typing.Union[typing.Callable ValueT], builtins.bool], builtins.str] The function to use to map the attribute. This may alternatively be a string attribute name to replace the input value with. You can provide nested attributes using the  . operator. Returns    - LazyIterator[AnotherValueT]  LazyIterator that maps each value to another value.", "f": 1}, {"r": "hikari.event_stream.EventStream.for_each", "u": 30, "d": "Pass each value to a given consumer immediately.", "f": 1}, {"r": "hikari.event_stream.EventStream.take_while", "u": 30, "d": "Return each item until any conditions fail or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are not matched.", "f": 1}, {"r": "hikari.event_stream.EventStream.take_until", "u": 30, "d": "Return each item until any conditions pass or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are matched.", "f": 1}, {"r": "hikari.event_stream.EventStream.skip_while", "u": 30, "d": "Discard items while all conditions are True. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has been met. All items before this are discarded.", "f": 1}, {"r": "hikari.event_stream.EventStream.skip_until", "u": 30, "d": "Discard items while all conditions are False. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has failed. All items before this are discarded.", "f": 1}, {"r": "hikari.event_stream.EventStream.enumerate", "u": 30, "d": "Enumerate the paginated results lazily. This behaves as an asyncio-friendly version of  builtins.enumerate which uses much less memory than collecting all the results first and calling  builtins.enumerate across them. Parameters      start : builtins.int Optional int to start at. If omitted, this is  0 . Examples     >>> async for i, item in paginated_results.enumerate():  . print(i, item) (0, foo) (1, bar) (2, baz) (3, bork) (4, qux) >>> async for i, item in paginated_results.enumerate(start=9):  . print(i, item) (9, foo) (10, bar) (11, baz) (12, bork) (13, qux) >>> async for i, item in paginated_results.enumerate(start=9).limit(3):  . print(i, item) (9, foo) (10, bar) (11, baz) Returns    - LazyIterator[typing.Tuple[builtins.int, T A paginated results view that asynchronously yields an increasing counter in a tuple with each result, lazily.", "f": 1}, {"r": "hikari.event_stream.EventStream.limit", "u": 30, "d": "Limit the number of items you receive from this async iterator. Parameters      limit : builtins.int The number of items to get. This must be greater than zero. Examples     >>> async for item in paginated_results.limit(3):  . print(item) Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields a maximum of the given number of items before completing.", "f": 1}, {"r": "hikari.event_stream.EventStream.skip", "u": 30, "d": "Drop the given number of items, then yield anything after. Parameters      number : builtins.int The max number of items to drop before any items are yielded. Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields all items AFTER the given number of items are discarded first.", "f": 1}, {"r": "hikari.event_stream.EventStream.next", "u": 30, "d": "Return the next element of this iterator only. Returns    - ValueT The next result. Raises    builtins.LookupError If no more results exist.", "f": 1}, {"r": "hikari.event_stream.EventStream.last", "u": 30, "d": "Return the last element of this iterator only. Returns    - ValueT The last result.  ! note This method will consume the whole iterator if run. Raises    builtins.LookupError If no result exists.", "f": 1}, {"r": "hikari.event_stream.EventStream.reversed", "u": 30, "d": "Return a lazy iterator of the remainder of this iterator's values reversed. Returns    - LazyIterator[ValueT] The lazy iterator of this iterator's remaining values reversed.", "f": 1}, {"r": "hikari.event_stream.EventStream.sort", "u": 30, "d": "Collect all results, then sort the collection before returning it.", "f": 1}, {"r": "hikari.event_stream.EventStream.collect", "u": 30, "d": "Collect the results into a given type and return it. Parameters      collector A function that consumes a sequence of values and returns a collection.", "f": 1}, {"r": "hikari.event_stream.EventStream.count", "u": 30, "d": "Count the number of results. Returns    - builtins.int Number of results found.", "f": 1}, {"r": "hikari.event_stream.EventStream.flat_map", "u": 30, "d": "Perform a flat mapping operation. This will pass each item in the iterator to the given  function parameter, expecting a new  typing.Iterable or  typing.AsyncIterator to be returned as the result. This means you can map to a new  LazyIterator ,  typing.AsyncIterator ,  typing.Iterable , async generator, or generator. Remember that  typing.Iterator implicitly provides  typing.Iterable compatibility. This is used to provide lazy conversions, and can be used to implement reactive-like pipelines if desired. All results are combined into one large lazy iterator and yielded lazily. Parameters      flattener A function that returns either an async iterator or iterator of new values. Could be an attribute name instead. Example    - The following example generates a distinct collection of all mentioned users in the given channel from the past 500 messages.   def iter_mentioned_users(message: hikari.Message) -> typing.Iterable[Snowflake]: for match in re.findall(r\" \", message.content): yield Snowflake(match) mentioned_users = await ( channel .history() .limit(500) .map(\".content\") .flat_map(iter_mentioned_users) .distinct() )   Returns    - LazyIterator[AnotherValueT] The new lazy iterator to return.", "f": 1}, {"r": "hikari.event_stream.EventStream.awaiting", "u": 30, "d": "Await each item concurrently in a fixed size window. Parameters      window_size : int The window size of how many tasks to await at once. You can set this to  0 to await everything at once, but see the below warning. Returns    - LazyIterator[ValueT] The new lazy iterator to return.  ! warning Setting a large window size, or setting it to 0 to await everything is a dangerous thing to do if you are making API calls. Some endpoints will get ratelimited and cause a backup of waiting tasks, others may begin to spam global rate limits instead (the  fetch_user endpoint seems to be notorious for doing this).  ! note This call assumes that the iterator contains awaitable values as input. MyPy cannot detect this nicely, so any cast is forced internally. If the item is not awaitable, you will receive a  builtins.TypeError instead. You have been warned. You cannot escape the ways of the duck type young grasshopper.", "f": 1}, {"r": "hikari.templates", "u": 31, "d": "Application and entities that are used to describe guild templates on Discord."}, {"r": "hikari.templates.Template", "u": 31, "d": "Represents a template used for creating guilds. Method generated by attrs for class Template."}, {"r": "hikari.templates.Template.code", "u": 31, "d": "The template's unique ID."}, {"r": "hikari.templates.Template.created_at", "u": 31, "d": "When the template was created."}, {"r": "hikari.templates.Template.creator", "u": 31, "d": "The user who created the template."}, {"r": "hikari.templates.Template.description", "u": 31, "d": "The template's description."}, {"r": "hikari.templates.Template.is_unsynced", "u": 31, "d": "Whether this template is missing changes from it's source guild."}, {"r": "hikari.templates.Template.name", "u": 31, "d": "The template's name."}, {"r": "hikari.templates.Template.source_guild", "u": 31, "d": "The partial object of the guild this template is based on."}, {"r": "hikari.templates.Template.updated_at", "u": 31, "d": "When the template was last synced with the source guild."}, {"r": "hikari.templates.Template.usage_count", "u": 31, "d": "The number of times the template has been used to create a guild."}, {"r": "hikari.templates.TemplateGuild", "u": 31, "d": "The partial guild object attached to  Template . Method generated by attrs for class TemplateGuild."}, {"r": "hikari.templates.TemplateGuild.afk_channel_id", "u": 31, "d": "The ID for the channel that AFK voice users get sent to. If  builtins.None , then no AFK channel is set up for this guild."}, {"r": "hikari.templates.TemplateGuild.afk_timeout", "u": 31, "d": "Timeout for activity before a member is classed as AFK. How long a voice user has to be AFK for before they are classed as being AFK and are moved to the AFK channel ( Guild.afk_channel_id )."}, {"r": "hikari.templates.TemplateGuild.channels", "u": 31, "d": "The channels for the guild.  ! note  hikari.channels.GuildChannel.id will be a unique placeholder on all the channel objects found attached this template guild."}, {"r": "hikari.templates.TemplateGuild.default_message_notifications", "u": 31, "d": "The default setting for message notifications in this guild."}, {"r": "hikari.templates.TemplateGuild.description", "u": 31, "d": "The guild's description, if set."}, {"r": "hikari.templates.TemplateGuild.explicit_content_filter", "u": 31, "d": "The setting for the explicit content filter in this guild."}, {"r": "hikari.templates.TemplateGuild.preferred_locale", "u": 31, "d": "The preferred locale to use for this guild. This can only be change if  GuildFeature.COMMUNITY is in  Guild.features for this guild and will otherwise default to  en-US ."}, {"r": "hikari.templates.TemplateGuild.region", "u": 31, "d": "The voice region for the guild."}, {"r": "hikari.templates.TemplateGuild.roles", "u": 31, "d": "The roles in the guild.  ! note  hikari.guilds.Role.id will be a unique placeholder on all the role objects found attached this template guild."}, {"r": "hikari.templates.TemplateGuild.system_channel_flags", "u": 31, "d": "Return flags for the guild system channel. These are used to describe which notifications are suppressed."}, {"r": "hikari.templates.TemplateGuild.system_channel_id", "u": 31, "d": "The ID of the system channel or  builtins.None if it is not enabled. Welcome messages and Nitro boost messages may be sent to this channel."}, {"r": "hikari.templates.TemplateGuild.verification_level", "u": 31, "d": "The verification level needed for a user to participate in this guild."}, {"r": "hikari.templates.TemplateGuild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.templates.TemplateGuild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.templates.TemplateGuild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.templates.TemplateGuild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.templates.TemplateGuild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.templates.TemplateGuild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.templates.TemplateGuild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.templates.TemplateGuild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.templates.TemplateRole", "u": 31, "d": "The partial role object attached to  Template . Method generated by attrs for class TemplateRole."}, {"r": "hikari.templates.TemplateRole.color", "u": 31, "d": "The colour of this role. This will be applied to a member's name in chat if it's their top coloured role."}, {"r": "hikari.templates.TemplateRole.is_hoisted", "u": 31, "d": "Whether this role is hoisting the members it's attached to in the member list. members will be hoisted under their highest role where this is set to  builtins.True ."}, {"r": "hikari.templates.TemplateRole.is_mentionable", "u": 31, "d": "Whether this role can be mentioned by all regardless of permissions."}, {"r": "hikari.templates.TemplateRole.permissions", "u": 31, "d": "The guild wide permissions this role gives to the members it's attached to, This may be overridden by channel overwrites."}, {"r": "hikari.templates.TemplateRole.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.templates.TemplateRole.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.templates.TemplateRole.name", "u": 7, "d": "The role's name."}, {"r": "hikari.templates.TemplateRole.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.templates.Templateish", "u": 31, "d": "Type hint for a  Template object or  builtin.str template code."}, {"r": "hikari.presences", "u": 32, "d": "Application and entities that are used to describe guilds on Discord."}, {"r": "hikari.presences.Activity", "u": 32, "d": "Represents a regular activity that can be associated with a presence. Method generated by attrs for class Activity."}, {"r": "hikari.presences.Activity.name", "u": 32, "d": "The activity name."}, {"r": "hikari.presences.Activity.type", "u": 32, "d": "The activity type."}, {"r": "hikari.presences.Activity.url", "u": 32, "d": "The activity URL. Only valid for  STREAMING activities."}, {"r": "hikari.presences.ActivityAssets", "u": 32, "d": "Used to represent possible assets for an activity. Method generated by attrs for class ActivityAssets."}, {"r": "hikari.presences.ActivityAssets.large_image", "u": 32, "d": "The ID of the asset's large image, if set."}, {"r": "hikari.presences.ActivityAssets.large_text", "u": 32, "d": "The text that'll appear when hovering over the large image, if set."}, {"r": "hikari.presences.ActivityAssets.small_image", "u": 32, "d": "The ID of the asset's small image, if set."}, {"r": "hikari.presences.ActivityAssets.small_text", "u": 32, "d": "The text that'll appear when hovering over the small image, if set."}, {"r": "hikari.presences.ActivityFlag", "u": 32, "d": "Flags that describe what an activity includes. This can be more than one using bitwise-combinations."}, {"r": "hikari.presences.ActivityFlag.name", "u": 32, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.presences.ActivityFlag.value", "u": 32, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.presences.ActivityFlag.all", "u": 32, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.presences.ActivityFlag.any", "u": 32, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.presences.ActivityFlag.difference", "u": 32, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.presences.ActivityFlag.intersection", "u": 32, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.presences.ActivityFlag.invert", "u": 32, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.presences.ActivityFlag.is_disjoint", "u": 32, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.presences.ActivityFlag.is_subset", "u": 32, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.presences.ActivityFlag.is_superset", "u": 32, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.presences.ActivityFlag.none", "u": 32, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.presences.ActivityFlag.split", "u": 32, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.presences.ActivityFlag.symmetric_difference", "u": 32, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.presences.ActivityFlag.union", "u": 32, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.presences.ActivityFlag.isdisjoint", "u": 32, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.presences.ActivityFlag.issubset", "u": 32, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.presences.ActivityFlag.issuperset", "u": 32, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.presences.ActivityFlag.symmetricdifference", "u": 32, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.presences.ActivityFlag.INSTANCE", "u": 32, "d": "Instance"}, {"r": "hikari.presences.ActivityFlag.JOIN", "u": 32, "d": "Join"}, {"r": "hikari.presences.ActivityFlag.SPECTATE", "u": 32, "d": "Spectate"}, {"r": "hikari.presences.ActivityFlag.JOIN_REQUEST", "u": 32, "d": "Join Request"}, {"r": "hikari.presences.ActivityFlag.SYNC", "u": 32, "d": "Sync"}, {"r": "hikari.presences.ActivityFlag.PLAY", "u": 32, "d": "Play"}, {"r": "hikari.presences.ActivitySecret", "u": 32, "d": "The secrets used for interacting with an activity party. Method generated by attrs for class ActivitySecret."}, {"r": "hikari.presences.ActivitySecret.join", "u": 32, "d": "The secret used for joining a party, if applicable."}, {"r": "hikari.presences.ActivitySecret.match", "u": 32, "d": "The secret used for matching a party, if applicable."}, {"r": "hikari.presences.ActivitySecret.spectate", "u": 32, "d": "The secret used for spectating a party, if applicable."}, {"r": "hikari.presences.ActivityTimestamps", "u": 32, "d": "The datetimes for the start and/or end of an activity session. Method generated by attrs for class ActivityTimestamps."}, {"r": "hikari.presences.ActivityTimestamps.end", "u": 32, "d": "When this activity's session will end, if applicable."}, {"r": "hikari.presences.ActivityTimestamps.start", "u": 32, "d": "When this activity's session was started, if applicable."}, {"r": "hikari.presences.ActivityType", "u": 32, "d": "The activity type."}, {"r": "hikari.presences.ActivityType.name", "u": 32, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.presences.ActivityType.value", "u": 32, "d": "Return the value of the enum member."}, {"r": "hikari.presences.ActivityType.PLAYING", "u": 32, "d": "Shows up as  Playing   "}, {"r": "hikari.presences.ActivityType.STREAMING", "u": 32, "d": "Shows up as  Streaming and links to a Twitch or YouTube stream/video.  ! warning You  MUST provide a valid Twitch or YouTube stream URL to the activity you create in order for this to be valid. If you fail to do this, then the activity  WILL NOT update."}, {"r": "hikari.presences.ActivityType.LISTENING", "u": 32, "d": "Shows up as  Listening to   ."}, {"r": "hikari.presences.ActivityType.WATCHING", "u": 32, "d": "Shows up as  Watching   .  ! warning This is not documented by Discord, and was supposedly going to be removed a long time ago, but that never happened. This may be removed at any time without warning by Discord, so use this at your own risk."}, {"r": "hikari.presences.ActivityType.CUSTOM", "u": 32, "d": "A custom status. To set an emoji with the status, place a unicode emoji or Discord emoji ( :smiley: ) as the first part of the status activity name.  ! warning Bots  DO NOT support setting custom statuses."}, {"r": "hikari.presences.ActivityType.COMPETING", "u": 32, "d": "Shows up as  Competing in   ."}, {"r": "hikari.presences.ActivityParty", "u": 32, "d": "Used to represent activity groups of users. Method generated by attrs for class ActivityParty."}, {"r": "hikari.presences.ActivityParty.current_size", "u": 32, "d": "Current size of this party, if applicable."}, {"r": "hikari.presences.ActivityParty.id", "u": 32, "d": "The string id of this party instance, if set."}, {"r": "hikari.presences.ActivityParty.max_size", "u": 32, "d": "Maximum size of this party, if applicable."}, {"r": "hikari.presences.ClientStatus", "u": 32, "d": "The client statuses for this member. Method generated by attrs for class ClientStatus."}, {"r": "hikari.presences.ClientStatus.desktop", "u": 32, "d": "The status of the target user's desktop session."}, {"r": "hikari.presences.ClientStatus.mobile", "u": 32, "d": "The status of the target user's mobile session."}, {"r": "hikari.presences.ClientStatus.web", "u": 32, "d": "The status of the target user's web session."}, {"r": "hikari.presences.MemberPresence", "u": 32, "d": "Used to represent a guild member's presence. Method generated by attrs for class MemberPresence."}, {"r": "hikari.presences.MemberPresence.activities", "u": 32, "d": "All active user activities. You can assume the first activity is the one that the GUI Discord client will show."}, {"r": "hikari.presences.MemberPresence.app", "u": 32, "d": "The client application that models may use for procedures."}, {"r": "hikari.presences.MemberPresence.client_status", "u": 32, "d": "Platform-specific user-statuses."}, {"r": "hikari.presences.MemberPresence.guild_id", "u": 32, "d": "The ID of the guild this presence belongs to."}, {"r": "hikari.presences.MemberPresence.user_id", "u": 32, "d": "The ID of the user this presence belongs to."}, {"r": "hikari.presences.MemberPresence.visible_status", "u": 32, "d": "This user's current status being displayed by the client."}, {"r": "hikari.presences.RichActivity", "u": 32, "d": "Represents a rich activity that can be associated with a presence. Method generated by attrs for class RichActivity."}, {"r": "hikari.presences.RichActivity.application_id", "u": 32, "d": "The ID of the application this activity is for, if applicable."}, {"r": "hikari.presences.RichActivity.assets", "u": 32, "d": "Images and their hover over text for the activity."}, {"r": "hikari.presences.RichActivity.created_at", "u": 32, "d": "When this activity was added to the user's session."}, {"r": "hikari.presences.RichActivity.details", "u": 32, "d": "The text that describes what the activity's target is doing, if set."}, {"r": "hikari.presences.RichActivity.emoji", "u": 32, "d": "The emoji of this activity, if it is a custom status and set."}, {"r": "hikari.presences.RichActivity.flags", "u": 32, "d": "Flags that describe what the activity includes, if present."}, {"r": "hikari.presences.RichActivity.is_instance", "u": 32, "d": "Whether this activity is an instanced game session."}, {"r": "hikari.presences.RichActivity.party", "u": 32, "d": "Information about the party associated with this activity, if set."}, {"r": "hikari.presences.RichActivity.secrets", "u": 32, "d": "Secrets for Rich Presence joining and spectating."}, {"r": "hikari.presences.RichActivity.state", "u": 32, "d": "The current status of this activity's target, if set."}, {"r": "hikari.presences.RichActivity.timestamps", "u": 32, "d": "The timestamps for when this activity's current state will start and end, if applicable."}, {"r": "hikari.presences.RichActivity.name", "u": 32, "d": "The activity name."}, {"r": "hikari.presences.RichActivity.type", "u": 32, "d": "The activity type."}, {"r": "hikari.presences.RichActivity.url", "u": 32, "d": "The activity URL. Only valid for  STREAMING activities."}, {"r": "hikari.presences.Status", "u": 32, "d": "The status of a member."}, {"r": "hikari.presences.Status.name", "u": 32, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.presences.Status.value", "u": 32, "d": "Return the value of the enum member."}, {"r": "hikari.presences.Status.ONLINE", "u": 32, "d": "Online/green."}, {"r": "hikari.presences.Status.IDLE", "u": 32, "d": "Idle/yellow."}, {"r": "hikari.presences.Status.DO_NOT_DISTURB", "u": 32, "d": "Do not disturb/red."}, {"r": "hikari.presences.Status.OFFLINE", "u": 32, "d": "Offline or invisible/grey."}, {"r": "hikari.snowflakes", "u": 2, "d": "Implementation of a Snowflake type."}, {"r": "hikari.snowflakes.Snowflake", "u": 2, "d": "A concrete representation of a unique ID for an entity on Discord. This object can be treated as a regular  builtins.int for most purposes."}, {"r": "hikari.snowflakes.Snowflake.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.snowflakes.Snowflake.internal_worker_id", "u": 2, "d": "ID of the worker that created this snowflake on Discord's systems."}, {"r": "hikari.snowflakes.Snowflake.internal_process_id", "u": 2, "d": "ID of the process that created this snowflake on Discord's systems."}, {"r": "hikari.snowflakes.Snowflake.increment", "u": 2, "d": "Increment of Discord's system when this object was made."}, {"r": "hikari.snowflakes.Snowflake.from_datetime", "u": 2, "d": "Get a snowflake object from a datetime object.", "f": 1}, {"r": "hikari.snowflakes.Snowflake.min", "u": 2, "d": "Minimum value for a snowflakes.", "f": 1}, {"r": "hikari.snowflakes.Snowflake.max", "u": 2, "d": "Maximum value for a snowflakes.", "f": 1}, {"r": "hikari.snowflakes.Snowflake.from_data", "u": 2, "d": "Convert the pieces of info that comprise an ID into a Snowflake.", "f": 1}, {"r": "hikari.snowflakes.Unique", "u": 2, "d": "Mixin for a class that enforces uniqueness by a snowflake ID."}, {"r": "hikari.snowflakes.Unique.id", "u": 2, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.snowflakes.Unique.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.snowflakes.calculate_shard_id", "u": 2, "d": "Calculate the shard ID for a guild based on it's shard aware app or shard count. Parameters      app_or_count : typing.Union[hikari.traits.ShardAware, builtins.int] The shard aware app of the current application or the integer count of the current app's shards. guild : SnowflakeishOr[hikari.guilds.PartialGuild] The object or ID of the guild to get the shard ID of. Returns    - builtins.int The zero-indexed integer ID of the shard that should cover this guild.", "f": 1}, {"r": "hikari.snowflakes.Snowflakeish", "u": 2, "d": "Type hint for a value that resembles a  Snowflake object functionally. This is a value that is  Snowflake -ish. A value is  Snowflake -ish if casting it to an  int allows it to be cast to a  Snowflake . The valid types for this type hint are: -  builtins.int -  Snowflake "}, {"r": "hikari.snowflakes.SearchableSnowflakeish", "u": 2, "d": "Type hint for a snowflakeish that can be searched for in history. This is just a  Snowflakeish that can alternatively be some form of  datetime.datetime instance. The valid types for this type hint are: -  builtins.str containing digits. -  builtins.int -  Snowflake -  datetime.datetime "}, {"r": "hikari.snowflakes.SnowflakeishOr", "u": 2, "d": "Type hint representing a unique object entity. This is a value that is  Snowflake -ish or a specific type covariant. If you see  SnowflakeishOr[Foo] anywhere as a type hint, it means the value may be a  Foo instance, a  Snowflake , a  builtins.int or a  builtins.str with numeric digits only. Essentially this represents any concrete object, or ID of that object. It is used across Hikari's API to allow use of functions when information is only partially available (due to Discord inconsistencies, edge case behaviour, or use of intents). The valid types for this type hint are: -  buitlins.int -  Snowflake "}, {"r": "hikari.snowflakes.SearchableSnowflakeishOr", "u": 2, "d": "Type hint for a unique object entity that can be searched for. This is a variant of  SnowflakeishOr that also allows an alternative value of a  datetime.datetime to be specified. Essentially this represents any concrete object, or ID of that object. It is used across Hikari's API to allow use of functions when information is only partially available (due to Discord inconsistencies, edge case behaviour, or use of intents). The valid types for this type hint are: -  buitlins.int -  Snowflake -  datetime.datetime "}, {"r": "hikari.snowflakes.SnowflakeishSequence", "u": 2, "d": "Type hint representing a collection of unique object entities."}, {"r": "hikari.intents", "u": 33, "d": "Shard intents for controlling which events the application receives."}, {"r": "hikari.intents.Intents", "u": 33, "d": "Represents an intent on the gateway. This is a bitfield representation of all the categories of event that you wish to receive. Any events not in an intent category will be fired regardless of what intents you provide.  ! info Discord now places limits on certain events you can receive without whitelisting your bot first. On the  Bot tab in the developer's portal for your bot, you should now have the option to enable functionality for receiving these events. If you attempt to request an intent type that you have not whitelisted your bot for, you will be disconnected on startup with a  4014 closure code.  ! warning If you are using the V7 Gateway, you will be REQUIRED to provide some form of intent value when you connect. Failure to do so may result in immediate termination of the session server-side. This enum is an  enum.IntFlag , which means that you can use bitwise operators to join and splice multiple intents into one value. For example, if we wish to only refer to the  GUILDS intent, then it is simply a case of accessing it normally.   my_intents = Intents.GUILDS   If we wanted to have several intents grouped together, we would use the bitwise-or operator to combine them ( | ). This can be done in-place with the  |= operator if needed.    One or two values that fit on one line. my_intents = Intents.GUILD_MESSAGES | Intents.PRIVATE_MESSAGES  Several intents together. You may find it useful to format these like  so to keep your code readable. my_intents = ( Intents.GUILDS | Intents.GUILD_BANS | Intents.GUILD_EMOJIS | Intents.GUILD_INTEGRATIONS | Intents.GUILD_MESSAGES | Intents.PRIVATE_MESSAGES )   To check if an intent  is present in a given intents bitfield, you can use the bitwise-and operator ( & ) to check. This returns the \"intersection\" or \"crossover\" between the left and right-hand side of the  & . You can then use the    operator to check that specific values are present. You can check in-place with the  &= operator if needed.    Check if an intent is set: if (my_intents & Intents.GUILD_MESSAGES)  Intents.GUILD_MESSAGES: print(\"Guild messages are enabled\")  Checking if ALL in a combination are set: expected_intents = (Intents.GUILD_MESSAGES | Intents.PRIVATE_MESSAGES) if (my_intents & expected_intents)  expected_intents: print(\"Messages are enabled in guilds and private messages.\")  Checking if AT LEAST ONE in a combination is set: expected_intents = (Intents.GUILD_MESSAGES | Intents.PRIVATE_MESSAGES) if my_intents & expected_intents: print(\"Messages are enabled in guilds or private messages.\")   Removing one or more intents from a combination can be done with the bitwise-xor ( ^ ) operator. The  ^= operator can do this in-place.    Remove GUILD_MESSAGES my_intents = my_intents ^ Intents.GUILD_MESSAGES  or, simplifying: my_intents ^= Intents.GUILD_MESSAGES  Remove all messages events. my_intents = my_intents ^ (Intents.GUILD_MESSAGES | Intents.PRIVATE_MESSAGES)  or, simplifying my_intents ^= (Intents.GUILD_MESSAGES | Intents.PRIVATE_MESSAGES)   What is and is not covered by intents?                    The following unprivileged events require intents to be dispatched: -  GUILD_CREATE -  GUILD_UPDATE -  GUILD_DELETE -  GUILD_ROLE_CREATE -  GUILD_ROLE_UPDATE -  GUILD_ROLE_DELETE -  GUILD_BAN_ADD -  GUILD_BAN_REMOVE -  GUILD_EMOJIS_UPDATE -  INTEGRATION_CREATE -  INTEGRATION_DELETE -  INTEGRATION_UPDATE -  INVITE_CREATE -  INVITE_DELETE -  CHANNEL_CREATE -  CHANNEL_UPDATE -  CHANNEL_DELETE -  CHANNEL_PINS_UPDATE (guilds only) -  MESSAGE_CREATE -  MESSAGE_UPDATE -  MESSAGE_DELETE -  MESSAGE_BULK_DELETE -  MESSAGE_REACTION_ADD -  MESSAGE_REACTION_REMOVE -  MESSAGE_REACTION_REMOVE_ALL -  MESSAGE_REACTION_REMOVE_EMOJI -  TYPING_START -  VOICE_STATE_UPDATE -  WEBHOOKS_UPDATE The following privileged events require intents to be dispatched: -  GUILD_MEMBER_ADD -  GUILD_MEMBER_UPDATE -  GUILD_MEMBER_REMOVE -  PRESENCE_UPDATE All events not listed above will be dispatched regardless of whether intents are used or not."}, {"r": "hikari.intents.Intents.is_privileged", "u": 33, "d": "Determine whether the intent requires elevated privileges. If this is  builtins.True , you will be required to opt-in to using this intent on the Discord Developer Portal before you can utilise it in your application."}, {"r": "hikari.intents.Intents.name", "u": 33, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.intents.Intents.value", "u": 33, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.intents.Intents.all", "u": 33, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.intents.Intents.any", "u": 33, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.intents.Intents.difference", "u": 33, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.intents.Intents.intersection", "u": 33, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.intents.Intents.invert", "u": 33, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.intents.Intents.is_disjoint", "u": 33, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.intents.Intents.is_subset", "u": 33, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.intents.Intents.is_superset", "u": 33, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.intents.Intents.none", "u": 33, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.intents.Intents.split", "u": 33, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.intents.Intents.symmetric_difference", "u": 33, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.intents.Intents.union", "u": 33, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.intents.Intents.isdisjoint", "u": 33, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.intents.Intents.issubset", "u": 33, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.intents.Intents.issuperset", "u": 33, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.intents.Intents.symmetricdifference", "u": 33, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.intents.Intents.NONE", "u": 33, "d": "Represents no intents."}, {"r": "hikari.intents.Intents.GUILDS", "u": 33, "d": "Subscribes to the following events:   GUILD_CREATE   GUILD_UPDATE   GUILD_DELETE   GUILD_ROLE_CREATE   GUILD_ROLE_UPDATE   GUILD_ROLE_DELETE   CHANNEL_CREATE   CHANNEL_UPDATE   CHANNEL_DELETE   CHANNEL_PINS_UPDATE "}, {"r": "hikari.intents.Intents.GUILD_MEMBERS", "u": 33, "d": "Subscribes to the following events:   GUILD_MEMBER_ADD   GUILD_MEMBER_UPDATE   GUILD_MEMBER_REMOVE  ! warning This intent is privileged, and requires enabling/whitelisting to use."}, {"r": "hikari.intents.Intents.GUILD_BANS", "u": 33, "d": "Subscribes to the following events:   GUILD_BAN_ADD   GUILD_BAN_REMOVE "}, {"r": "hikari.intents.Intents.GUILD_EMOJIS", "u": 33, "d": "Subscribes to the following events:   GUILD_EMOJIS_UPDATE "}, {"r": "hikari.intents.Intents.GUILD_INTEGRATIONS", "u": 33, "d": "Subscribes to the following events:   INTEGRATION_CREATE   INTEGRATION_DELETE   INTEGRATION_UPDATE "}, {"r": "hikari.intents.Intents.GUILD_WEBHOOKS", "u": 33, "d": "Subscribes to the following events:   WEBHOOKS_UPDATE "}, {"r": "hikari.intents.Intents.GUILD_INVITES", "u": 33, "d": "Subscribes to the following events:   INVITE_CREATE   INVITE_DELETE "}, {"r": "hikari.intents.Intents.GUILD_VOICE_STATES", "u": 33, "d": "Subscribes to the following events:   VOICE_STATE_UPDATE "}, {"r": "hikari.intents.Intents.GUILD_PRESENCES", "u": 33, "d": "Subscribes to the following events:   PRESENCE_UPDATE  ! warning This intent is privileged, and requires enabling/whitelisting to use."}, {"r": "hikari.intents.Intents.GUILD_MESSAGES", "u": 33, "d": "Subscribes to the following events:   MESSAGE_CREATE (in guilds only)   MESSAGE_UPDATE (in guilds only)   MESSAGE_DELETE (in guilds only)   MESSAGE_BULK_DELETE (in guilds only)"}, {"r": "hikari.intents.Intents.GUILD_MESSAGE_REACTIONS", "u": 33, "d": "Subscribes to the following events:   MESSAGE_REACTION_ADD (in guilds only)   MESSAGE_REACTION_REMOVE (in guilds only)   MESSAGE_REACTION_REMOVE_ALL (in guilds only)   MESSAGE_REACTION_REMOVE_EMOJI (in guilds only)"}, {"r": "hikari.intents.Intents.GUILD_MESSAGE_TYPING", "u": 33, "d": "Subscribes to the following events:   TYPING_START (in guilds only)"}, {"r": "hikari.intents.Intents.DM_MESSAGES", "u": 33, "d": "Subscribes to the following events:   MESSAGE_CREATE (in private message channels (non-guild bound) only)   MESSAGE_UPDATE (in private message channels (non-guild bound) only)   MESSAGE_DELETE (in private message channels (non-guild bound) only)"}, {"r": "hikari.intents.Intents.DM_MESSAGE_REACTIONS", "u": 33, "d": "Subscribes to the following events:   MESSAGE_REACTION_ADD (in private message channels (non-guild bound) only)   MESSAGE_REACTION_REMOVE (in private message channels (non-guild bound) only)   MESSAGE_REACTION_REMOVE_ALL (in private message channels (non-guild bound) only)   MESSAGE_REACTION_REMOVE_EMOJI (in private message channels (non-guild bound) only)"}, {"r": "hikari.intents.Intents.DM_MESSAGE_TYPING", "u": 33, "d": "Subscribes to the following events   TYPING_START (in private message channels (non-guild bound) only)"}, {"r": "hikari.intents.Intents.ALL_GUILDS_UNPRIVILEGED", "u": 33, "d": "All unprivileged guild-related intents."}, {"r": "hikari.intents.Intents.ALL_GUILDS_PRIVILEGED", "u": 33, "d": "All privileged guild intents.  ! warning This set of intent is privileged, and requires enabling/whitelisting to use."}, {"r": "hikari.intents.Intents.ALL_GUILDS", "u": 33, "d": "All unprivileged guild intents and all privileged guild intents. This combines  Intents.ALL_GUILDS_UNPRIVILEGED and  Intents.ALL_GUILDS_PRIVILEGED .  ! warning This set of intent is privileged, and requires enabling/whitelisting to use."}, {"r": "hikari.intents.Intents.ALL_DMS", "u": 33, "d": "All private message channel (non-guild bound) intents."}, {"r": "hikari.intents.Intents.ALL_MESSAGES", "u": 33, "d": "All message intents."}, {"r": "hikari.intents.Intents.ALL_MESSAGE_REACTIONS", "u": 33, "d": "All message reaction intents."}, {"r": "hikari.intents.Intents.ALL_MESSAGE_TYPING", "u": 33, "d": "All typing indicator intents."}, {"r": "hikari.intents.Intents.ALL_UNPRIVILEGED", "u": 33, "d": "All unprivileged intents."}, {"r": "hikari.intents.Intents.ALL_PRIVILEGED", "u": 33, "d": "All privileged intents.  ! warning This set of intent is privileged, and requires enabling/whitelisting to use."}, {"r": "hikari.intents.Intents.ALL", "u": 33, "d": "All unprivileged and privileged intents.  ! warning This set of intent is privileged, and requires enabling/whitelisting to use."}, {"r": "hikari.colors", "u": 34, "d": "Model that represents a common RGB color and provides simple conversions to other common color systems."}, {"r": "hikari.colors.Color", "u": 34, "d": "Representation of a color. This value is immutable. This is a specialization of  builtins.int which provides alternative overrides for common methods and color system conversions. This currently supports:  RGB  RGB (float)  3-digit hex codes (e.g. 0xF1A  web safe)  6-digit hex codes (e.g. 0xFF11AA)  3-digit RGB strings (e.g.  1A2  web safe)  6-digit RGB hash strings (e.g.  1A2B3C) Examples     Examples of conversions to given formats include:   >>> c = Color(0xFF051A) Color(r=0xff, g=0x5, b=0x1a) >>> hex(c) 0xff051a >>> c.hex_code  FF051A >>> str(c)  FF051A >>> int(c) 16712986 >>> c.rgb (255, 5, 26) >>> c.rgb_float (1.0, 0.0196078431372549, 0.10196078431372549)   Alternatively, if you have an arbitrary input in one of the above formats that you wish to become a color, you can use  Color.of on the class itself to automatically attempt to resolve the color:   >>> Color.of(0xFF051A) Color(r=0xff, g=0x5, b=0x1a) >>> Color.of(16712986) Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of 255, 5, 26 Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of(255, 5, 26) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of([0xFF, 0x5, 0x1a]) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of(\" 1a2b3c\") Color(r=0x1a, g=0x2b, b=0x3c) >>> c = Color.of(\" 1AB\") Color(r=0x11, g=0xaa, b=0xbb) >>> c = Color.of 1.0, 0.0196078431372549, 0.10196078431372549 Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of([1.0, 0.0196078431372549, 0.10196078431372549]) Color(r=0xff, g=0x5, b=0x1a)   Examples of initialization of Color objects from given formats include:   >>> c = Color(16712986) Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.from_rgb(255, 5, 26) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.from_hex_code(\" 1a2b3c\") Color(r=0x1a, g=0x2b, b=0x3c) >>> c = Color.from_hex_code(\" 1AB\") Color(r=0x11, g=0xaa, b=0xbb) >>> c = Color.from_rgb_float(1.0, 0.0196078431372549, 0.10196078431372549) Color(r=0xff, g=0x5, b=0x1a)  "}, {"r": "hikari.colors.Color.rgb", "u": 34, "d": "The RGB representation of this Color. Represented as a tuple of R, G, B. Each value is in the range [0, 0xFF]. Example    -  (123, 234, 47) "}, {"r": "hikari.colors.Color.rgb_float", "u": 34, "d": "Return the floating-point RGB representation of this Color. Represented as a tuple of R, G, B. Each value is in the range [0, 1]. Example    -  (0.1, 0.2, 0.76) "}, {"r": "hikari.colors.Color.hex_code", "u": 34, "d": "Six-digit hexadecimal color code for this Color. This is prepended with a  symbol, and will be in upper case. Example    -  1A2B3C "}, {"r": "hikari.colors.Color.raw_hex_code", "u": 34, "d": "Raw hex code. Example    -  1A2B3C "}, {"r": "hikari.colors.Color.is_web_safe", "u": 34, "d": " builtins.True if the color is web safe,  builtins.False otherwise."}, {"r": "hikari.colors.Color.from_rgb", "u": 34, "d": "Convert the given RGB to a  Color object. Each channel must be withing the range [0, 255] (0x0, 0xFF). Parameters      red : builtins.int Red channel. green : builtins.int Green channel. blue : builtins.int Blue channel. Returns    - Color A Color object. Raises    builtins.ValueError If red, green, or blue are outside the range [0x0, 0xFF].", "f": 1}, {"r": "hikari.colors.Color.from_rgb_float", "u": 34, "d": "Convert the given RGB to a  Color object. The color-space represented values have to be within the range [0, 1]. Parameters      red : builtins.float Red channel. green : builtins.float Green channel. blue : builtins.float Blue channel. Returns    - Color A Color object. Raises    builtins.ValueError If red, green or blue are outside the range [0, 1].", "f": 1}, {"r": "hikari.colors.Color.from_hex_code", "u": 34, "d": "Convert the given hexadecimal color code to a  Color . The inputs may be of the following format (case insensitive):  1a2 ,  1a2 ,  0x1a2 (for web-safe colors), or  1a2b3c ,  1a2b3c ,  0x1a2b3c (for regular 3-byte color-codes). Parameters      hex_code : builtins.str A hexadecimal color code to parse. This may optionally start with a case insensitive  0x or  . Returns    - Color A corresponding Color object. Raises    builtins.ValueError If  hex_code is not a hexadecimal or is a invalid length.", "f": 1}, {"r": "hikari.colors.Color.from_int", "u": 34, "d": "Convert the given  typing.SupportsInt to a  Color . Parameters      integer : typing.SupportsInt The raw color integer. Returns    - Color The Color object.", "f": 1}, {"r": "hikari.colors.Color.from_tuple_string", "u": 34, "d": "Convert a string in a tuple-like format to a  Color . This allows formats that are optionally enclosed by  () ,  {} , or  [] , and contain three floats or ints, either space separated or comma separated. If comma separated, trailing and leading whitespace around each member is truncated. This is provided to allow command frontends to directly pass user input for representing a given colour into this class safely. Examples        Floats \"1.0 1.0 1.0\" \"(1.0 1.0 1.0)\" \"[1.0 1.0 1.0]\" \"{1.0 1.0 1.0}\" \"1.0, 1.0, 1.0\" \"(1.0, 1.0, 1.0)\" \"[1.0, 1.0, 1.0]\" \"{1.0, 1.0, 1.0}\"  Ints \"252 252 252\" \"(252 252 252)\" \"[252 252 252]\" \"{252 252 252}\" \"252, 252, 252\" \"(252, 252, 252)\" \"[252, 252, 252]\" \"{252, 252, 252}\"   Parameters      tuple_str : builtins.str The string to parse. Returns    - Color The parsed colour object. Raises    ValueError If an invalid format is given, or if any values exceed 1.0 for floats or 255 for ints.", "f": 1}, {"r": "hikari.colors.Color.from_bytes", "u": 34, "d": "Convert the bytes to a  Color . Parameters      bytes_ : typing.Iterable[builtins.int] A iterable of int byte values. byteorder : builtins.str The endianess of the value represented by the bytes. Can be  \"big\" endian or  \"little\" endian. signed : builtins.bool Whether the value is signed or unsigned. Returns    - Color The Color object.", "f": 1}, {"r": "hikari.colors.Color.of", "u": 34, "d": "Convert the value to a  Color . This attempts to determine the correct data format based on the information provided. Parameters      value : Colorish A color compatible values. Examples       >>> Color.of(0xFF051A) Color(r=0xff, g=0x5, b=0x1a) >>> Color.of(16712986) Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of 255, 5, 26 Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of([0xFF, 0x5, 0x1a]) Color(r=0xff, g=0x5, b=1xa) >>> c = Color.of(\" 1a2b3c\") Color(r=0x1a, g=0x2b, b=0x3c) >>> c = Color.of(\" 1AB\") Color(r=0x11, g=0xaa, b=0xbb) >>> c = Color.of 1.0, 0.0196078431372549, 0.10196078431372549 Color(r=0xff, g=0x5, b=0x1a) >>> c = Color.of([1.0, 0.0196078431372549, 0.10196078431372549]) Color(r=0xff, g=0x5, b=0x1a)  Commas and brackets are optional, whitespace is ignored, and these  are compatible with all-ints between 0-255 or all-floats between  0.0 and 1.0 only. >>> c = Color.of(\"5, 22, 33\") Color(r=0x5, g=0x16, b=0x21) >>> c = Color.of(\"(5, 22, 33)\") Color(r=0x5, g=0x16, b=0x21) >>> c = Color.of(\"[5, 22, 33]\") Color(r=0x5, g=0x16, b=0x21) >>> c = Color.of(\"{5, 22, 33}\") Color(r=0x5, g=0x16, b=0x21)   Returns    - Color The Color object.", "f": 1}, {"r": "hikari.colors.Color.to_bytes", "u": 34, "d": "Convert the color code to bytes. Parameters      length : builtins.int The number of bytes to produce. Should be around  3 , but not less. byteorder : builtins.str The endianess of the value represented by the bytes. Can be  \"big\" endian or  \"little\" endian. signed : builtins.bool Whether the value is signed or unsigned. Returns    - builtins.bytes The bytes representation of the Color.", "f": 1}, {"r": "hikari.colors.Colorish", "u": 34, "d": "Type hint representing types of value compatible with a colour type. This may be: 1.  hikari.colors.Color 2.  hikari.colours.Colour (an alias for  hikari.colors.Color ). 3. A value that can be cast to an  builtins.int (RGB hex-code). 4. a 3- builtins.tuple of  builtins.int (RGB integers in range 0 through 255). 5. a 3- builtins.tuple of  builtins.int (RGB floats in range 0 through 1). 6. a list of  builtins.int . 7. a list of  builtins.float . 8. a  builtins.str hex colour code. A hex colour code is expected to be in one of the following formats. Each of the following examples means the same thing semantically. 1. (web-safe)  \"12F\" (equivalent to  \"1122FF\" ) 2. (web-safe)  \"0x12F\" (equivalent to  \"0x1122FF\" ) 3. (web-safe)  \"0X12F\" (equivalent to  \"0X1122FF\" ) 4. (web-safe)  \" 12F\" (equivalent to  \" 1122FF\" ) 5.  \"1122FF\" 6.  \"0x1122FF\" 7.  \"0X1122FF\" 8.  \" 1122FF\" Web-safe colours are three hex-digits wide,  XYZ becomes  XXYYZZ in full-form."}, {"r": "hikari.voices", "u": 35, "d": "Application and entities that are used to describe voice state on Discord."}, {"r": "hikari.voices.VoiceRegion", "u": 35, "d": "Represents a voice region server. Method generated by attrs for class VoiceRegion."}, {"r": "hikari.voices.VoiceRegion.id", "u": 35, "d": "The string ID of this region.  ! note Unlike most parts of this API, this ID will always be a string type. This is intentional."}, {"r": "hikari.voices.VoiceRegion.is_custom", "u": 35, "d": "Whether this region is custom (e.g. used for events)."}, {"r": "hikari.voices.VoiceRegion.is_deprecated", "u": 35, "d": "Whether this region is deprecated."}, {"r": "hikari.voices.VoiceRegion.is_optimal_location", "u": 35, "d": "Whether this region's server is closest to the current user's client."}, {"r": "hikari.voices.VoiceRegion.is_vip", "u": 35, "d": "Whether this region is vip-only."}, {"r": "hikari.voices.VoiceRegion.name", "u": 35, "d": "The name of this region."}, {"r": "hikari.voices.VoiceState", "u": 35, "d": "Represents a user's voice connection status. Method generated by attrs for class VoiceState."}, {"r": "hikari.voices.VoiceState.app", "u": 35, "d": "The client application that models may use for procedures."}, {"r": "hikari.voices.VoiceState.channel_id", "u": 35, "d": "The ID of the channel this user is connected to. This will be  builtins.None if they are leaving voice."}, {"r": "hikari.voices.VoiceState.guild_id", "u": 35, "d": "The ID of the guild this voice state is in."}, {"r": "hikari.voices.VoiceState.is_guild_deafened", "u": 35, "d": "Whether this user is deafened by the guild."}, {"r": "hikari.voices.VoiceState.is_guild_muted", "u": 35, "d": "Whether this user is muted by the guild."}, {"r": "hikari.voices.VoiceState.is_self_deafened", "u": 35, "d": "Whether this user is deafened by their client."}, {"r": "hikari.voices.VoiceState.is_self_muted", "u": 35, "d": "Whether this user is muted by their client."}, {"r": "hikari.voices.VoiceState.is_streaming", "u": 35, "d": "Whether this user is streaming using \"Go Live\"."}, {"r": "hikari.voices.VoiceState.is_suppressed", "u": 35, "d": "Whether this user is muted by the current user."}, {"r": "hikari.voices.VoiceState.is_video_enabled", "u": 35, "d": "Whether this user's camera is enabled."}, {"r": "hikari.voices.VoiceState.member", "u": 35, "d": "The guild member this voice state is for."}, {"r": "hikari.voices.VoiceState.session_id", "u": 35, "d": "The string ID of this voice state's session."}, {"r": "hikari.voices.VoiceState.user_id", "u": 35, "d": "The ID of the user this voice state is for."}, {"r": "hikari.voices.VoiceRegionish", "u": 35, "d": "Type hint for a voice region or name of a voice region. Must be either a  VoiceRegion or  builtins.str ."}, {"r": "hikari.iterators", "u": 30, "d": "Lazy iterators for data that requires repeated API calls to retrieve. For consumers of this API, the only class you need to worry about is  LazyIterator . Everything else is internal detail only exposed for people who wish to extend this API further!"}, {"r": "hikari.iterators.LazyIterator", "u": 30, "d": "A set of results that are fetched asynchronously from the API as needed. This is a  typing.AsyncIterable and  typing.AsyncIterator with several additional helpful methods provided for convenience. Examples     You can use this in multiple ways. As an async iterable:   >>> async for item in paginated_results:  . process(item)   As an eagerly retrieved set of results (performs all API calls at once, which may be slow for large sets of data):   >>> results = await paginated_results >>>   . which is equivalent to this . >>> results = [item async for item in paginated_results]   As an async iterator (not recommended):   >>> try:  . while True:  . process(await paginated_results.__anext__(  . except StopAsyncIteration:  . pass   Additionally, you can make use of some of the provided helper methods on this class to perform basic operations easily. Iterating across the items with indexes (like  builtins.enumerate for normal iterables):   >>> async for i, item in paginated_results.enumerate():  . print(i, item) (0, foo) (1, bar) (2, baz)   Limiting the number of results you iterate across:   >>> async for item in paginated_results.limit(3):  . process(item)  "}, {"r": "hikari.iterators.LazyIterator.chunk", "u": 30, "d": "Return results in chunks of up to  chunk_size amount of entries. Parameters      chunk_size : int The limit for how many results should be returned in each chunk. Returns    - LazyIterator[typing.Sequence[ValueT  LazyIterator that emits each chunked sequence.", "f": 1}, {"r": "hikari.iterators.LazyIterator.map", "u": 30, "d": "Map the values to a different value. Parameters      transformation : typing.Union[typing.Callable ValueT], builtins.bool], builtins.str] The function to use to map the attribute. This may alternatively be a string attribute name to replace the input value with. You can provide nested attributes using the  . operator. Returns    - LazyIterator[AnotherValueT]  LazyIterator that maps each value to another value.", "f": 1}, {"r": "hikari.iterators.LazyIterator.for_each", "u": 30, "d": "Pass each value to a given consumer immediately.", "f": 1}, {"r": "hikari.iterators.LazyIterator.filter", "u": 30, "d": "Filter the items by one or more conditions. Each condition is treated as a predicate, being called with each item that this iterator would return when it is requested. All conditions must evaluate to  builtins.True for the item to be returned. If this is not met, then the item is discared and ignored, the next matching item will be returned instead, if there is one. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.filter \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT]  LazyIterator that only emits values where all conditions are matched.", "f": 1}, {"r": "hikari.iterators.LazyIterator.take_while", "u": 30, "d": "Return each item until any conditions fail or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are not matched.", "f": 1}, {"r": "hikari.iterators.LazyIterator.take_until", "u": 30, "d": "Return each item until any conditions pass or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are matched.", "f": 1}, {"r": "hikari.iterators.LazyIterator.skip_while", "u": 30, "d": "Discard items while all conditions are True. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has been met. All items before this are discarded.", "f": 1}, {"r": "hikari.iterators.LazyIterator.skip_until", "u": 30, "d": "Discard items while all conditions are False. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has failed. All items before this are discarded.", "f": 1}, {"r": "hikari.iterators.LazyIterator.enumerate", "u": 30, "d": "Enumerate the paginated results lazily. This behaves as an asyncio-friendly version of  builtins.enumerate which uses much less memory than collecting all the results first and calling  builtins.enumerate across them. Parameters      start : builtins.int Optional int to start at. If omitted, this is  0 . Examples     >>> async for i, item in paginated_results.enumerate():  . print(i, item) (0, foo) (1, bar) (2, baz) (3, bork) (4, qux) >>> async for i, item in paginated_results.enumerate(start=9):  . print(i, item) (9, foo) (10, bar) (11, baz) (12, bork) (13, qux) >>> async for i, item in paginated_results.enumerate(start=9).limit(3):  . print(i, item) (9, foo) (10, bar) (11, baz) Returns    - LazyIterator[typing.Tuple[builtins.int, T A paginated results view that asynchronously yields an increasing counter in a tuple with each result, lazily.", "f": 1}, {"r": "hikari.iterators.LazyIterator.limit", "u": 30, "d": "Limit the number of items you receive from this async iterator. Parameters      limit : builtins.int The number of items to get. This must be greater than zero. Examples     >>> async for item in paginated_results.limit(3):  . print(item) Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields a maximum of the given number of items before completing.", "f": 1}, {"r": "hikari.iterators.LazyIterator.skip", "u": 30, "d": "Drop the given number of items, then yield anything after. Parameters      number : builtins.int The max number of items to drop before any items are yielded. Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields all items AFTER the given number of items are discarded first.", "f": 1}, {"r": "hikari.iterators.LazyIterator.next", "u": 30, "d": "Return the next element of this iterator only. Returns    - ValueT The next result. Raises    builtins.LookupError If no more results exist.", "f": 1}, {"r": "hikari.iterators.LazyIterator.last", "u": 30, "d": "Return the last element of this iterator only. Returns    - ValueT The last result.  ! note This method will consume the whole iterator if run. Raises    builtins.LookupError If no result exists.", "f": 1}, {"r": "hikari.iterators.LazyIterator.reversed", "u": 30, "d": "Return a lazy iterator of the remainder of this iterator's values reversed. Returns    - LazyIterator[ValueT] The lazy iterator of this iterator's remaining values reversed.", "f": 1}, {"r": "hikari.iterators.LazyIterator.sort", "u": 30, "d": "Collect all results, then sort the collection before returning it.", "f": 1}, {"r": "hikari.iterators.LazyIterator.collect", "u": 30, "d": "Collect the results into a given type and return it. Parameters      collector A function that consumes a sequence of values and returns a collection.", "f": 1}, {"r": "hikari.iterators.LazyIterator.count", "u": 30, "d": "Count the number of results. Returns    - builtins.int Number of results found.", "f": 1}, {"r": "hikari.iterators.LazyIterator.flat_map", "u": 30, "d": "Perform a flat mapping operation. This will pass each item in the iterator to the given  function parameter, expecting a new  typing.Iterable or  typing.AsyncIterator to be returned as the result. This means you can map to a new  LazyIterator ,  typing.AsyncIterator ,  typing.Iterable , async generator, or generator. Remember that  typing.Iterator implicitly provides  typing.Iterable compatibility. This is used to provide lazy conversions, and can be used to implement reactive-like pipelines if desired. All results are combined into one large lazy iterator and yielded lazily. Parameters      flattener A function that returns either an async iterator or iterator of new values. Could be an attribute name instead. Example    - The following example generates a distinct collection of all mentioned users in the given channel from the past 500 messages.   def iter_mentioned_users(message: hikari.Message) -> typing.Iterable[Snowflake]: for match in re.findall(r\" \", message.content): yield Snowflake(match) mentioned_users = await ( channel .history() .limit(500) .map(\".content\") .flat_map(iter_mentioned_users) .distinct() )   Returns    - LazyIterator[AnotherValueT] The new lazy iterator to return.", "f": 1}, {"r": "hikari.iterators.LazyIterator.awaiting", "u": 30, "d": "Await each item concurrently in a fixed size window. Parameters      window_size : int The window size of how many tasks to await at once. You can set this to  0 to await everything at once, but see the below warning. Returns    - LazyIterator[ValueT] The new lazy iterator to return.  ! warning Setting a large window size, or setting it to 0 to await everything is a dangerous thing to do if you are making API calls. Some endpoints will get ratelimited and cause a backup of waiting tasks, others may begin to spam global rate limits instead (the  fetch_user endpoint seems to be notorious for doing this).  ! note This call assumes that the iterator contains awaitable values as input. MyPy cannot detect this nicely, so any cast is forced internally. If the item is not awaitable, you will receive a  builtins.TypeError instead. You have been warned. You cannot escape the ways of the duck type young grasshopper.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator", "u": 30, "d": "A lazy iterator that has all items in-memory and ready. This can be iterated across as a normal iterator, or as an async iterator."}, {"r": "hikari.iterators.FlatLazyIterator.chunk", "u": 30, "d": "Return results in chunks of up to  chunk_size amount of entries. Parameters      chunk_size : int The limit for how many results should be returned in each chunk. Returns    - LazyIterator[typing.Sequence[ValueT  LazyIterator that emits each chunked sequence.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.map", "u": 30, "d": "Map the values to a different value. Parameters      transformation : typing.Union[typing.Callable ValueT], builtins.bool], builtins.str] The function to use to map the attribute. This may alternatively be a string attribute name to replace the input value with. You can provide nested attributes using the  . operator. Returns    - LazyIterator[AnotherValueT]  LazyIterator that maps each value to another value.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.for_each", "u": 30, "d": "Pass each value to a given consumer immediately.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.filter", "u": 30, "d": "Filter the items by one or more conditions. Each condition is treated as a predicate, being called with each item that this iterator would return when it is requested. All conditions must evaluate to  builtins.True for the item to be returned. If this is not met, then the item is discared and ignored, the next matching item will be returned instead, if there is one. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.filter \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT]  LazyIterator that only emits values where all conditions are matched.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.take_while", "u": 30, "d": "Return each item until any conditions fail or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are not matched.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.take_until", "u": 30, "d": "Return each item until any conditions pass or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are matched.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.skip_while", "u": 30, "d": "Discard items while all conditions are True. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has been met. All items before this are discarded.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.skip_until", "u": 30, "d": "Discard items while all conditions are False. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has failed. All items before this are discarded.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.enumerate", "u": 30, "d": "Enumerate the paginated results lazily. This behaves as an asyncio-friendly version of  builtins.enumerate which uses much less memory than collecting all the results first and calling  builtins.enumerate across them. Parameters      start : builtins.int Optional int to start at. If omitted, this is  0 . Examples     >>> async for i, item in paginated_results.enumerate():  . print(i, item) (0, foo) (1, bar) (2, baz) (3, bork) (4, qux) >>> async for i, item in paginated_results.enumerate(start=9):  . print(i, item) (9, foo) (10, bar) (11, baz) (12, bork) (13, qux) >>> async for i, item in paginated_results.enumerate(start=9).limit(3):  . print(i, item) (9, foo) (10, bar) (11, baz) Returns    - LazyIterator[typing.Tuple[builtins.int, T A paginated results view that asynchronously yields an increasing counter in a tuple with each result, lazily.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.limit", "u": 30, "d": "Limit the number of items you receive from this async iterator. Parameters      limit : builtins.int The number of items to get. This must be greater than zero. Examples     >>> async for item in paginated_results.limit(3):  . print(item) Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields a maximum of the given number of items before completing.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.skip", "u": 30, "d": "Drop the given number of items, then yield anything after. Parameters      number : builtins.int The max number of items to drop before any items are yielded. Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields all items AFTER the given number of items are discarded first.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.next", "u": 30, "d": "Return the next element of this iterator only. Returns    - ValueT The next result. Raises    builtins.LookupError If no more results exist.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.last", "u": 30, "d": "Return the last element of this iterator only. Returns    - ValueT The last result.  ! note This method will consume the whole iterator if run. Raises    builtins.LookupError If no result exists.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.reversed", "u": 30, "d": "Return a lazy iterator of the remainder of this iterator's values reversed. Returns    - LazyIterator[ValueT] The lazy iterator of this iterator's remaining values reversed.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.sort", "u": 30, "d": "Collect all results, then sort the collection before returning it.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.collect", "u": 30, "d": "Collect the results into a given type and return it. Parameters      collector A function that consumes a sequence of values and returns a collection.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.count", "u": 30, "d": "Count the number of results. Returns    - builtins.int Number of results found.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.flat_map", "u": 30, "d": "Perform a flat mapping operation. This will pass each item in the iterator to the given  function parameter, expecting a new  typing.Iterable or  typing.AsyncIterator to be returned as the result. This means you can map to a new  LazyIterator ,  typing.AsyncIterator ,  typing.Iterable , async generator, or generator. Remember that  typing.Iterator implicitly provides  typing.Iterable compatibility. This is used to provide lazy conversions, and can be used to implement reactive-like pipelines if desired. All results are combined into one large lazy iterator and yielded lazily. Parameters      flattener A function that returns either an async iterator or iterator of new values. Could be an attribute name instead. Example    - The following example generates a distinct collection of all mentioned users in the given channel from the past 500 messages.   def iter_mentioned_users(message: hikari.Message) -> typing.Iterable[Snowflake]: for match in re.findall(r\" \", message.content): yield Snowflake(match) mentioned_users = await ( channel .history() .limit(500) .map(\".content\") .flat_map(iter_mentioned_users) .distinct() )   Returns    - LazyIterator[AnotherValueT] The new lazy iterator to return.", "f": 1}, {"r": "hikari.iterators.FlatLazyIterator.awaiting", "u": 30, "d": "Await each item concurrently in a fixed size window. Parameters      window_size : int The window size of how many tasks to await at once. You can set this to  0 to await everything at once, but see the below warning. Returns    - LazyIterator[ValueT] The new lazy iterator to return.  ! warning Setting a large window size, or setting it to 0 to await everything is a dangerous thing to do if you are making API calls. Some endpoints will get ratelimited and cause a backup of waiting tasks, others may begin to spam global rate limits instead (the  fetch_user endpoint seems to be notorious for doing this).  ! note This call assumes that the iterator contains awaitable values as input. MyPy cannot detect this nicely, so any cast is forced internally. If the item is not awaitable, you will receive a  builtins.TypeError instead. You have been warned. You cannot escape the ways of the duck type young grasshopper.", "f": 1}, {"r": "hikari.iterators.All", "u": 30, "d": "Helper that wraps predicates and invokes them together. Calling this object will pass the input item to each item, returning  builtins.True only when all wrapped predicates return True when called with the given item. For example .   if w(foo) and x(foo) andy(foo) and z(foo):  .   is equivalent to   condition = All([w, x, y, z]) if condition(foo):  .   This behaves like a lazy wrapper implementation of the  builtins.all builtin.  ! note Like the rest of the standard library, this is a short-circuiting operation. This means that if a predicate returns  builtins.False , no predicates after this are invoked, as the result is already known. In this sense, they are invoked in-order.  ! warning You should not generally need to use this outside of extending the iterators API in this library! Operators     -   this(value : ValueT) -> bool : Return  builtins.True if all conditions return  builtins.True when invoked with the given value.   ~this : Return a condition that, when invoked with the value, returns  builtins.False if all conditions were  builtins.True in this object. Parameters       conditions : typing.Callable ValueT], builtins.bool] The predicates to wrap."}, {"r": "hikari.iterators.All.conditions", "u": 30, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.iterators.AttrComparator", "u": 30, "d": "A comparator that compares the result of a call with something else. This uses the  spel module internally. Parameters      attr_name : builtins.str The attribute name. Can be prepended with a  . optionally. If the attribute name ends with a  () , then the call is invoked rather than treated as a property (useful for methods like  str.isupper , for example). expected_value : typing.Any The expected value. cast : typing.Optional[typing.Callable ValueT], typing.Any Optional cast to perform on the input value when being called before comparing it to the expected value but after accessing the attribute."}, {"r": "hikari.iterators.AttrComparator.attr_getter", "u": 30, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.iterators.AttrComparator.cast", "u": 30, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.iterators.AttrComparator.expected_value", "u": 30, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.iterators.BufferedLazyIterator", "u": 30, "d": "A special kind of lazy iterator that is used by internal components. The purpose of this is to provide an interface to lazily deserialize collections of payloads received from paginated API endpoints such as  GET /channels/{channel_id}/messages , which will return a certain number of messages at a time on a low level. This class provides the base interface for handling lazily decoding each item in those responses and returning them in the expected format when iterating across this object. Implementations are expected to provide a  _next_chunk private method which when awaited returns a lazy generator of each deserialized object to later yield. This will be iterated across lazily by this implementation, thus reducing the amount of work needed if only a few objects out of, say, 100, need to be deserialized. This  _next_chunk should return  builtins.None once the end of all items has been reached. An example would look like the following:   async def some_http_call(i):  . class SomeEndpointLazyIterator(BufferedLazyIterator[SomeObject]): def __init__(self): super().__init__() self._i = 0 def _next_chunk(self) -> typing.Optional[typing.Generator[ValueT, None, None : raw_items = await some_http_call(self._i) self._i += 1 if not raw_items: return None generator = (SomeObject(raw_item) for raw_item in raw_items) return generator  "}, {"r": "hikari.iterators.BufferedLazyIterator.chunk", "u": 30, "d": "Return results in chunks of up to  chunk_size amount of entries. Parameters      chunk_size : int The limit for how many results should be returned in each chunk. Returns    - LazyIterator[typing.Sequence[ValueT  LazyIterator that emits each chunked sequence.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.map", "u": 30, "d": "Map the values to a different value. Parameters      transformation : typing.Union[typing.Callable ValueT], builtins.bool], builtins.str] The function to use to map the attribute. This may alternatively be a string attribute name to replace the input value with. You can provide nested attributes using the  . operator. Returns    - LazyIterator[AnotherValueT]  LazyIterator that maps each value to another value.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.for_each", "u": 30, "d": "Pass each value to a given consumer immediately.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.filter", "u": 30, "d": "Filter the items by one or more conditions. Each condition is treated as a predicate, being called with each item that this iterator would return when it is requested. All conditions must evaluate to  builtins.True for the item to be returned. If this is not met, then the item is discared and ignored, the next matching item will be returned instead, if there is one. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.filter \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT]  LazyIterator that only emits values where all conditions are matched.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.take_while", "u": 30, "d": "Return each item until any conditions fail or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are not matched.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.take_until", "u": 30, "d": "Return each item until any conditions pass or the end is reached. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.take_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values until any conditions are matched.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.skip_while", "u": 30, "d": "Discard items while all conditions are True. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_while \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has been met. All items before this are discarded.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.skip_until", "u": 30, "d": "Discard items while all conditions are False. Items after this will be yielded as normal. Parameters       predicates : typing.Union[typing.Callable ValueT], builtins.bool], typing.Tuple[builtins.str, typing.Any Predicates to invoke. These are functions that take a value and return  builtins.True if it is of interest, or  builtins.False otherwise. These may instead include 2- builtins.tuple objects consisting of a  builtins.str attribute name (nested attributes are referred to using the  . operator), and values to compare for equality. This allows you to specify conditions such as  members.skip_until \"user.bot\", True  .  attrs : typing.Any Alternative to passing 2-tuples. Cannot specify nested attributes using this method. Returns    - LazyIterator[ValueT] LazyIterator that only emits values once a condition has failed. All items before this are discarded.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.enumerate", "u": 30, "d": "Enumerate the paginated results lazily. This behaves as an asyncio-friendly version of  builtins.enumerate which uses much less memory than collecting all the results first and calling  builtins.enumerate across them. Parameters      start : builtins.int Optional int to start at. If omitted, this is  0 . Examples     >>> async for i, item in paginated_results.enumerate():  . print(i, item) (0, foo) (1, bar) (2, baz) (3, bork) (4, qux) >>> async for i, item in paginated_results.enumerate(start=9):  . print(i, item) (9, foo) (10, bar) (11, baz) (12, bork) (13, qux) >>> async for i, item in paginated_results.enumerate(start=9).limit(3):  . print(i, item) (9, foo) (10, bar) (11, baz) Returns    - LazyIterator[typing.Tuple[builtins.int, T A paginated results view that asynchronously yields an increasing counter in a tuple with each result, lazily.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.limit", "u": 30, "d": "Limit the number of items you receive from this async iterator. Parameters      limit : builtins.int The number of items to get. This must be greater than zero. Examples     >>> async for item in paginated_results.limit(3):  . print(item) Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields a maximum of the given number of items before completing.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.skip", "u": 30, "d": "Drop the given number of items, then yield anything after. Parameters      number : builtins.int The max number of items to drop before any items are yielded. Returns    - LazyIterator[ValueT] A paginated results view that asynchronously yields all items AFTER the given number of items are discarded first.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.next", "u": 30, "d": "Return the next element of this iterator only. Returns    - ValueT The next result. Raises    builtins.LookupError If no more results exist.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.last", "u": 30, "d": "Return the last element of this iterator only. Returns    - ValueT The last result.  ! note This method will consume the whole iterator if run. Raises    builtins.LookupError If no result exists.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.reversed", "u": 30, "d": "Return a lazy iterator of the remainder of this iterator's values reversed. Returns    - LazyIterator[ValueT] The lazy iterator of this iterator's remaining values reversed.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.sort", "u": 30, "d": "Collect all results, then sort the collection before returning it.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.collect", "u": 30, "d": "Collect the results into a given type and return it. Parameters      collector A function that consumes a sequence of values and returns a collection.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.count", "u": 30, "d": "Count the number of results. Returns    - builtins.int Number of results found.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.flat_map", "u": 30, "d": "Perform a flat mapping operation. This will pass each item in the iterator to the given  function parameter, expecting a new  typing.Iterable or  typing.AsyncIterator to be returned as the result. This means you can map to a new  LazyIterator ,  typing.AsyncIterator ,  typing.Iterable , async generator, or generator. Remember that  typing.Iterator implicitly provides  typing.Iterable compatibility. This is used to provide lazy conversions, and can be used to implement reactive-like pipelines if desired. All results are combined into one large lazy iterator and yielded lazily. Parameters      flattener A function that returns either an async iterator or iterator of new values. Could be an attribute name instead. Example    - The following example generates a distinct collection of all mentioned users in the given channel from the past 500 messages.   def iter_mentioned_users(message: hikari.Message) -> typing.Iterable[Snowflake]: for match in re.findall(r\" \", message.content): yield Snowflake(match) mentioned_users = await ( channel .history() .limit(500) .map(\".content\") .flat_map(iter_mentioned_users) .distinct() )   Returns    - LazyIterator[AnotherValueT] The new lazy iterator to return.", "f": 1}, {"r": "hikari.iterators.BufferedLazyIterator.awaiting", "u": 30, "d": "Await each item concurrently in a fixed size window. Parameters      window_size : int The window size of how many tasks to await at once. You can set this to  0 to await everything at once, but see the below warning. Returns    - LazyIterator[ValueT] The new lazy iterator to return.  ! warning Setting a large window size, or setting it to 0 to await everything is a dangerous thing to do if you are making API calls. Some endpoints will get ratelimited and cause a backup of waiting tasks, others may begin to spam global rate limits instead (the  fetch_user endpoint seems to be notorious for doing this).  ! note This call assumes that the iterator contains awaitable values as input. MyPy cannot detect this nicely, so any cast is forced internally. If the item is not awaitable, you will receive a  builtins.TypeError instead. You have been warned. You cannot escape the ways of the duck type young grasshopper.", "f": 1}, {"r": "hikari.iterators.ValueT", "u": 30, "d": "Type-hint of the type of the value returned by a lazy iterator."}, {"r": "hikari.iterators.AnotherValueT", "u": 30, "d": "Type-hint of the type of a value by a mapped lazy iterator."}, {"r": "hikari.permissions", "u": 36, "d": "Bitfield of permissions."}, {"r": "hikari.permissions.Permissions", "u": 36, "d": "Represents the permissions available in a given channel or guild. This enum is an  enum.IntFlag . This means that you can  combine multiple permissions together into one value using the bitwise-OR operator ( | ). my_perms = Permissions.MANAGE_CHANNELS | Permissions.MANAGE_GUILD your_perms = ( Permissions.CREATE_INSTANT_INVITE | Permissions.KICK_MEMBERS | Permissions.BAN_MEMBERS | Permissions.MANAGE_GUILD ) You can  check if a permission is present in a set of combined permissions by using the bitwise-AND operator ( & ). This will return the int-value of the permission if it is present, or  0 if not present. my_perms = Permissions.MANAGE_CHANNELS | Permissions.MANAGE_GUILD if my_perms & Permissions.MANAGE_CHANNELS: if my_perms & Permissions.MANAGE_GUILD: print(\"I have the permission to both manage the guild and the channels in it!\") else: print(\"I have the permission to manage channels!\") else: print(\"I don't have the permission to manage channels!\")  Or you could simplify it: if my_perms & (Permissions.MANAGE_CHANNELS | Permissions.MANAGE_GUILD): print(\"I have the permission to both manage the guild and the channels in it!\") elif my_perms & Permissions.MANAGE_CHANNELS: print(\"I have the permission to manage channels!\") else: print(\"I don't have the permission to manage channels!\") If you need to  check that a permission is not present , you can use the bitwise-XOR operator ( ^ ) to check. If the permission is not present, it will return a non-zero value, otherwise if it is present, it will return  0 . my_perms = Permissions.MANAGE_CHANNELS | Permissions.MANAGE_GUILD if my_perms ^ Permissions.MANAGE_CHANNELS: print(\"Please give me the MANAGE_CHANNELS permission!\") Lastly, if you need all the permissions set except the permission you want, you can use the inversion operator ( ~ ) to do that.  All permissions except ADMINISTRATOR. my_perms = ~Permissions.ADMINISTRATOR"}, {"r": "hikari.permissions.Permissions.name", "u": 36, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.permissions.Permissions.value", "u": 36, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.permissions.Permissions.all", "u": 36, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.permissions.Permissions.any", "u": 36, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.permissions.Permissions.difference", "u": 36, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.permissions.Permissions.intersection", "u": 36, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.permissions.Permissions.invert", "u": 36, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.permissions.Permissions.is_disjoint", "u": 36, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.permissions.Permissions.is_subset", "u": 36, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.permissions.Permissions.is_superset", "u": 36, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.permissions.Permissions.none", "u": 36, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.permissions.Permissions.split", "u": 36, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.permissions.Permissions.symmetric_difference", "u": 36, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.permissions.Permissions.union", "u": 36, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.permissions.Permissions.isdisjoint", "u": 36, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.permissions.Permissions.issubset", "u": 36, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.permissions.Permissions.issuperset", "u": 36, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.permissions.Permissions.symmetricdifference", "u": 36, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.permissions.Permissions.NONE", "u": 36, "d": "Empty permission."}, {"r": "hikari.permissions.Permissions.CREATE_INSTANT_INVITE", "u": 36, "d": "Allows creation of instant invites."}, {"r": "hikari.permissions.Permissions.KICK_MEMBERS", "u": 36, "d": "Allows kicking members"}, {"r": "hikari.permissions.Permissions.BAN_MEMBERS", "u": 36, "d": "Allows banning members."}, {"r": "hikari.permissions.Permissions.ADMINISTRATOR", "u": 36, "d": "Allows all permissions and bypasses channel permission overwrites."}, {"r": "hikari.permissions.Permissions.MANAGE_CHANNELS", "u": 36, "d": "Allows management and editing of channels."}, {"r": "hikari.permissions.Permissions.MANAGE_GUILD", "u": 36, "d": "Allows management and editing of the guild."}, {"r": "hikari.permissions.Permissions.ADD_REACTIONS", "u": 36, "d": "Allows for the addition of reactions to messages."}, {"r": "hikari.permissions.Permissions.VIEW_AUDIT_LOG", "u": 36, "d": "Allows for viewing of audit logs."}, {"r": "hikari.permissions.Permissions.PRIORITY_SPEAKER", "u": 36, "d": "Allows for using priority speaker in a voice channel."}, {"r": "hikari.permissions.Permissions.STREAM", "u": 36, "d": "Allows the user to go live."}, {"r": "hikari.permissions.Permissions.VIEW_CHANNEL", "u": 36, "d": "Allows guild members to view a channel, which includes reading messages in text channels."}, {"r": "hikari.permissions.Permissions.SEND_MESSAGES", "u": 36, "d": "Allows for sending messages in a channel."}, {"r": "hikari.permissions.Permissions.SEND_TTS_MESSAGES", "u": 36, "d": "Allows for sending of  /tts messages."}, {"r": "hikari.permissions.Permissions.MANAGE_MESSAGES", "u": 36, "d": "Allows for deletion of other users messages."}, {"r": "hikari.permissions.Permissions.EMBED_LINKS", "u": 36, "d": "Links sent by users with this permission will be auto-embedded."}, {"r": "hikari.permissions.Permissions.ATTACH_FILES", "u": 36, "d": "Allows for uploading images and files."}, {"r": "hikari.permissions.Permissions.READ_MESSAGE_HISTORY", "u": 36, "d": "Allows for reading of message history."}, {"r": "hikari.permissions.Permissions.MENTION_ROLES", "u": 36, "d": "Allows for using the  @everyone tag to notify all users in a channel, and the  @here tag to notify all online users in a channel, and the  @role tag (even if the role is not mentionable) to notify all users with that role in a channel."}, {"r": "hikari.permissions.Permissions.USE_EXTERNAL_EMOJIS", "u": 36, "d": "Allows the usage of custom emojis from other guilds."}, {"r": "hikari.permissions.Permissions.VIEW_GUILD_INSIGHTS", "u": 36, "d": "Allows the user to view guild insights for eligible guilds."}, {"r": "hikari.permissions.Permissions.CONNECT", "u": 36, "d": "Allows for joining of a voice channel."}, {"r": "hikari.permissions.Permissions.SPEAK", "u": 36, "d": "Allows for speaking in a voice channel."}, {"r": "hikari.permissions.Permissions.MUTE_MEMBERS", "u": 36, "d": "Allows for muting members in a voice channel."}, {"r": "hikari.permissions.Permissions.DEAFEN_MEMBERS", "u": 36, "d": "Allows for deafening of members in a voice channel."}, {"r": "hikari.permissions.Permissions.MOVE_MEMBERS", "u": 36, "d": "Allows for moving of members between voice channels."}, {"r": "hikari.permissions.Permissions.USE_VOICE_ACTIVITY", "u": 36, "d": "Allows for using voice-activity-detection in a voice channel."}, {"r": "hikari.permissions.Permissions.CHANGE_NICKNAME", "u": 36, "d": "Allows for modification of own nickname."}, {"r": "hikari.permissions.Permissions.MANAGE_NICKNAMES", "u": 36, "d": "Allows for modification of other users nicknames."}, {"r": "hikari.permissions.Permissions.MANAGE_ROLES", "u": 36, "d": "Allows management and editing of roles."}, {"r": "hikari.permissions.Permissions.MANAGE_WEBHOOKS", "u": 36, "d": "Allows management and editing of webhooks."}, {"r": "hikari.permissions.Permissions.MANAGE_EMOJIS", "u": 36, "d": "Allows management and editing of emojis."}, {"r": "hikari.api", "u": 37, "d": "Interfaces for components that make up Hikari applications. These are provided to uncouple specific implementation details from each implementation, thus allowing custom solutions to be engineered such as bots relying on a distributed event bus or cache."}, {"r": "hikari.api.event_manager", "u": 38, "d": "Core interface for components that manage events in the library."}, {"r": "hikari.api.event_manager.EventManager", "u": 38, "d": "Base interface for event manager implementations. This is a listener of a  hikari.events.base_events.Event object and consumer of raw event payloads, and is expected to invoke one or more corresponding event listeners where appropriate."}, {"r": "hikari.api.event_manager.EventManager.consume_raw_event", "u": 38, "d": "Consume a raw event. Parameters      event_name : str The case-insensitive name of the event being triggered. shard : hikari.api.shard.GatewayShard Object of the shard that received this event. payload : hikari.internal.data_binding.JSONObject Payload of the event being triggered. Raises    builtins.LookupError If there is no consumer for the event.", "f": 1}, {"r": "hikari.api.event_manager.EventManager.dispatch", "u": 38, "d": "Dispatch an event. Parameters      event : hikari.events.base_events.Event The event to dispatch. Example    - We can dispatch custom events by first defining a class that derives from  hikari.events.base_events.Event .   import attr from hikari.traits import RESTAware from hikari.events.base_events import Event from hikari.users import User from hikari.snowflakes import Snowflake @attr.s() class EveryoneMentionedEvent(Event): app: RESTAware = attr.ib() author: User = attr.ib()  'The user who mentioned everyone. ' content: str = attr.ib()  'The message that was sent. ' message_id: Snowflake = attr.ib()  'The message ID. ' channel_id: Snowflake = attr.ib()  'The channel ID. '   We can then dispatch our event as we see fit.   from hikari.events.messages import MessageCreateEvent @bot.listen(MessageCreateEvent) async def on_message(event): if \"@everyone\" in event.content or \"@here\" in event.content: event = EveryoneMentionedEvent( author=event.author, content=event.content, message_id=event.id, channel_id=event.channel_id, ) bot.dispatch(event)   This event can be listened to elsewhere by subscribing to it with  EventManager.subscribe .   @bot.listen(EveryoneMentionedEvent) async def on_everyone_mentioned(event): print(event.user, \"just pinged everyone in\", event.channel_id)   Returns    - asyncio.Future[typing.Any] A future that can be optionally awaited. If awaited, the future will complete once all corresponding event listeners have been invoked. If not awaited, this will schedule the dispatch of the events in the background for later. See Also     Subscribe:  hikari.api.event_manager.EventManager.subscribe Stream:  hikari.api.event_manager.EventManager.stream Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.api.event_manager.EventManager.subscribe", "u": 38, "d": "Subscribe a given callback to a given event type. Parameters      event_type : typing.Type[T] The event type to listen for. This will also listen for any subclasses of the given type.  T must be a subclass of  hikari.events.base_events.Event . callback Must be a coroutine function to invoke. This should consume an instance of the given event, or an instance of a valid subclass if one exists. Any result is discarded. Example    - The following demonstrates subscribing a callback to message creation events.   from hikari.events.messages import MessageCreateEvent async def on_message(event):  . bot.subscribe(MessageCreateEvent, on_message)   Returns    - typing.Callable T], typing.Coroutine[typing.Any, typing.Any, builtins.None] The event callback that was passed in. See Also     Listen:  hikari.api.event_manager.EventManager.listen Stream:  hikari.api.event_manager.EventManager.stream Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.api.event_manager.EventManager.unsubscribe", "u": 38, "d": "Unsubscribe a given callback from a given event type, if present. Parameters      event_type : typing.Type[T] The event type to unsubscribe from. This must be the same exact type as was originally subscribed with to be removed correctly.  T must derive from  hikari.events.base_events.Event . callback The callback to unsubscribe. Example    - The following demonstrates unsubscribing a callback from a message creation event.   from hikari.events.messages import MessageCreateEvent async def on_message(event):  . bot.unsubscribe(MessageCreateEvent, on_message)  ", "f": 1}, {"r": "hikari.api.event_manager.EventManager.get_listeners", "u": 38, "d": "Get the listeners for a given event type, if there are any. Parameters      event_type : typing.Type[T] The event type to look for.  T must be a subclass of  hikari.events.base_events.Event . polymorphic : builtins.bool If  builtins.True , this will also return the listeners of the subclasses of the given event type. If  builtins.False , then only listeners for this class specifically are returned. The default is  builtins.True . Returns    - typing.Collection[typing.Callable T], typing.Coroutine[typing.Any, typing.Any, builtins.None A copy of the collection of listeners for the event. Will return an empty collection if nothing is registered.  T must be a subclass of  hikari.events.base_events.Event . See Also     Has listener:  hikari.api.event_manager.EventManager.has_listener ", "f": 1}, {"r": "hikari.api.event_manager.EventManager.listen", "u": 38, "d": "Generate a decorator to subscribe a callback to an event type. This is a second-order decorator. Parameters      event_type : typing.Optional[typing.Type[T The event type to subscribe to. The implementation may allow this to be undefined. If this is the case, the event type will be inferred instead from the type hints on the function signature.  T must be a subclass of  hikari.events.base_events.Event . Returns    - typing.Callable T], T] A decorator for a coroutine function that passes it to  EventManager.subscribe before returning the function reference. See Also     Dispatch:  hikari.api.event_manager.EventManager.dispatch Stream:  hikari.api.event_manager.EventManager.stream Subscribe:  hikari.api.event_manager.EventManager.subscribe Unsubscribe:  hikari.api.event_manager.EventManager.unsubscribe Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.api.event_manager.EventManager.stream", "u": 38, "d": "Return a stream iterator for the given event and sub-events. Parameters      event_type : typing.Type[hikari.events.base_events.Event] The event type to listen for. This will listen for subclasses of this type additionally. timeout : typing.Optional[builtins.int, builtins.float] How long this streamer should wait for the next event before ending the iteration. If  builtins.None then this will continue until explicitly broken from. limit : typing.Optional[builtins.int] The limit for how many events this should queue at one time before dropping extra incoming events, leave this as  builtins.None for the cache size to be unlimited. Returns    - hikari.event_stream.Streamer[hikari.events.base_events.Event] The async iterator to handle streamed events. This must be started with  async with stream: or  await stream.open() before asynchronously iterating over it.  ! warning If you use  await stream.open() to start the stream then you must also close it with  await stream.close() otherwise it may queue events in memory indefinitely. Examples       async with bot.stream(events.ReactionAddEvent, timeout=30).filter \"message_id\", message.id as stream: async for user_id in stream.map(\"user_id\").limit(50):  .   or using await  open() and await  close()   stream = bot.stream(events.ReactionAddEvent, timeout=30).filter \"message_id\", message.id await stream.open() async for user_id in stream.map(\"user_id\").limit(50)  . await stream.close()   See Also     Dispatch:  hikari.api.event_manager.EventManager.dispatch Listen:  hikari.api.event_manager.EventManager.listen Subscribe:  hikari.api.event_manager.EventManager.subscribe Unsubscribe:  hikari.api.event_manager.EventManager.unsubscribe Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.api.event_manager.EventManager.wait_for", "u": 38, "d": "Wait for a given event to occur once, then return the event. Parameters      event_type : typing.Type[hikari.events.base_events.Event] The event type to listen for. This will listen for subclasses of this type additionally. predicate A function taking the event as the single parameter. This should return  builtins.True if the event is one you want to return, or  builtins.False if the event should not be returned. If left as  None (the default), then the first matching event type that the bot receives (or any subtype) will be the one returned.  ! warning Async predicates are not supported. timeout : typing.Union[builtins.float, builtins.int, builtins.None] The amount of time to wait before raising an  asyncio.TimeoutError and giving up instead. This is measured in seconds. If  builtins.None , then no timeout will be waited for (no timeout can result in \"leaking\" of coroutines that never complete if called in an uncontrolled way, so is not recommended). Returns    - hikari.events.base_events.Event The event that was provided. Raises    asyncio.TimeoutError If the timeout is not  builtins.None and is reached before an event is received that the predicate returns  builtins.True for. See Also     Listen:  hikari.api.event_manager.EventManager.listen Stream:  hikari.api.event_manager.EventManager.stream Subscribe:  hikari.api.event_manager.EventManager.subscribe Dispatch:  hikari.api.event_manager.EventManager.dispatch ", "f": 1}, {"r": "hikari.api.rest", "u": 39, "d": "Provides an interface for REST API implementations to follow."}, {"r": "hikari.api.rest.ConnectorFactory", "u": 39, "d": "Provider of a connector."}, {"r": "hikari.api.rest.ConnectorFactory.close", "u": 39, "d": "Close any resources if they exist.", "f": 1}, {"r": "hikari.api.rest.ConnectorFactory.acquire", "u": 39, "d": "Acquire the connector.", "f": 1}, {"r": "hikari.api.rest.RESTClient", "u": 39, "d": "Interface for functionality that a REST API implementation provides."}, {"r": "hikari.api.rest.RESTClient.close", "u": 39, "d": "Close the client session.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_channel", "u": 39, "d": "Fetch a channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.PartialChannel] The channel to fetch. This may be the object or the ID of an existing channel. Returns    - hikari.channels.PartialChannel The channel. This will be a _derivative_ of  hikari.channels.PartialChannel , depending on the type of channel you request for. This means that you may get one of  hikari.channels.DMChannel ,  hikari.channels.GroupDMChannel ,  hikari.channels.GuildTextChannel ,  hikari.channels.GuildVoiceChannel ,  hikari.channels.GuildStoreChannel ,  hikari.channels.GuildNewsChannel . Likewise, the  hikari.channels.GuildChannel can be used to determine if a channel is guild-bound, and  hikari.channels.TextChannel can be used to determine if the channel provides textual functionality to the application. You can check for these using the  builtins.isinstance builtin function. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_channel", "u": 39, "d": "Edit a channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to edit. This may be the object or the ID of an existing channel. Other Parameters         name : hikari.undefined.UndefinedOr builtins.str] If provided, the new name for the channel. position : hikari.undefined.UndefinedOr builtins.int] If provided, the new position for the channel. topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the new topic for the channel. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the channel should be marked as NSFW or not. bitrate : hikari.undefined.UndefinedOr[builtins.int] If provided, the new bitrate for the channel. user_limit : hikari.undefined.UndefinedOr[builtins.int] If provided, the new user limit in the channel. rate_limit_per_user : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the new rate limit per user in the channel. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the new permission overwrites for the channel. parent_category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory If provided, the new guild category for the channel. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.PartialChannel The edited channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing permissions to edit the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.follow_channel", "u": 39, "d": "Follow a news channel to send messages to a target channel. Parameters      news_channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildNewsChannel] The object or ID of the news channel to follow. target_channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The object or ID of the channel to target. Returns    - hikari.channels.ChannelFollow Information about the new relationship that was made. Raises    hikari.errors.BadRequestError If you try to follow a channel that's not a news channel or if the target channel has reached it's webhook limit, which is 10 at the time of writing. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission in the target channel or are missing the  VIEW_CHANNEL permission in the origin channel. hikari.errors.NotFoundError If the origin or target channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_channel", "u": 39, "d": "Delete a channel in a guild, or close a DM. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.PartialChannel] The channel to delete. This may be the object or the ID of an existing channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note For Public servers, the set 'Rules' or 'Guidelines' channels and the 'Public Server Updates' channel cannot be deleted.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_permission_overwrites", "u": 39, "d": "Edit permissions for a specific entity in the given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to edit a permission overwrite in. This may be the object, or the ID of an existing channel. target : typing.Union[hikari.users.PartialUser, hikari.guilds.PartialRole, hikari.channels.PermissionOverwrite, hikari.snowflakes.Snowflakeish] The channel overwrite to edit. This may be the object or the ID of an existing overwrite. Other Parameters         target_type : hikari.undefined.UndefinedOr[hikari.channels.PermissionOverwriteType] If provided, the type of the target to update. If unset, will attempt to get the type from  target . allow : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the new vale of all allowed permissions. deny : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the new vale of all disallowed permissions. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    builtins.TypeError If  target_type is unset and we were unable to determine the type from  target . hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_PERMISSIONS permission in the channel. hikari.errors.NotFoundError If the channel is not found or the target is not found if it is a role. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_permission_overwrite", "u": 39, "d": "Delete a custom permission for an entity in a given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to delete a permission overwrite in. This may be the object, or the ID of an existing channel. target : typing.Union[hikari.users.PartialUser, hikari.guilds.PartialRole, hikari.channels.PermissionOverwrite, hikari.snowflakes.Snowflakeish] The channel overwrite to delete. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_PERMISSIONS permission in the channel. hikari.errors.NotFoundError If the channel is not found or the target is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_channel_invites", "u": 39, "d": "Fetch all invites pointing to the given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to fetch the invites from. This may be a channel object, or the ID of an existing channel. Returns    - typing.Sequence[hikari.invites.InviteWithMetadata] The invites pointing to the given guild channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission in the channel. hikari.errors.NotFoundError If the channel is not found in any guilds you are a member of. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_invite", "u": 39, "d": "Create an invite to the given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to create a invite for. This may be the object or the ID of an existing channel. Other Parameters         max_age : hikari.undefined.UndefinedOr[typing.Union[datetime.timedelta, builtins.float, builtins.int If provided, the duration of the invite before expiry. max_uses : hikari.undefined.UndefinedOr[builtins.int] If provided, the max uses the invite can have. temporary : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the invite only grants temporary membership. unique : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the invite should be unique. target_user : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser If provided, the target user id for this invite. This may be the object or the ID of an existing user. target_user_type : hikari.undefined.UndefinedOr[hikari.invites.TargetUserType] If provided, the type of target user for this invite. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.invites.InviteWithMetadata The invite to the given guild channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNELS permission. hikari.errors.NotFoundError If the channel is not found, or if the target user does not exist, if provided. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.trigger_typing", "u": 39, "d": "Trigger typing in a text channel. The result of this call can be awaited to trigger typing once, or can be used as an async context manager to continually type until the context manager is left. Examples        Trigger typing just once. await rest.trigger_typing(channel)  Trigger typing repeatedly for 1 minute. async with rest.trigger_typing(channel): await asyncio.sleep(60)    ! warning Sending a message to the channel will cause the typing indicator to disappear until it is re-triggered. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to trigger typing in. This may be the object or the ID of an existing channel. Returns    - hikari.api.special_endpoints.TypingIndicator A typing indicator to use. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise any of the above types.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_pins", "u": 39, "d": "Fetch the pinned messages in this text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch pins from. This may be the object or the ID of an existing channel. Returns    - typing.Sequence[hikari.messages.Message] The pinned messages in this text channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.pin_message", "u": 39, "d": "Pin an existing message in the given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to pin a message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to pin. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES in the channel. hikari.errors.NotFoundError If the channel is not found, or if the message does not exist in the given channel. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.unpin_message", "u": 39, "d": "Unpin a given message from a given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to unpin a message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to unpin. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.NotFoundError If the channel is not found or the message is not a pinned message in the given channel. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_messages", "u": 39, "d": "Browse the message history for a given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch messages in. This may be the object or the ID of an existing channel. Other Parameters         before : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages before this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. after : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages after this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. around : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages around this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.messages.Message] An iterator to fetch the messages.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    builtins.TypeError If you specify more than one of  before ,  after ,  about . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGE_HISTORY in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint (other than  builtins.TypeError ) will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything (other than  builtins.TypeError ).", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_message", "u": 39, "d": "Fetch a specific message in the given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch messages in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to fetch. This may be the object or the ID of an existing channel. Returns    - hikari.messages.Message The requested message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGE_HISTORY in the channel. hikari.errors.NotFoundError If the channel is not found or the message is not found in the given text channel. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_message", "u": 39, "d": "Create a message in the given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to create the message in. content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content; if  reply is not found or not in the same channel as  channel . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.api.rest.RESTClient.crosspost_message", "u": 39, "d": "Broadcast an announcement message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildNewsChannel] The object or ID of the news channel to crosspost a message in. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The object or ID of the message to crosspost. Returns    - hikari.messages.Message The message object that was crossposted. Raises    hikari.errors.BadRequestError If you tried to crosspost a message that has already been broadcast. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you try to crosspost a message by the current user without the  SEND_MESSAGES permission for the target news channel or try to crosspost a message by another user without both the  SEND_MESSAGES and  MANAGE_MESSAGES permissions for the target channel. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_message", "u": 39, "d": "Edit an existing message in a given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to create the message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to edit. This may be the object or the ID of an existing message. content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message content to update with. If  hikari.undefined.UNDEFINED , then the content will not be changed. If  builtins.None , then the content will be removed. Any other value will be cast to a  builtins.str before sending. If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the embed to set on the message. If  hikari.undefined.UNDEFINED , the previous embed if present is not changed. If this is  builtins.None , then the embed is removed if present. Otherwise, the new embed value that was provided will be used as the replacement. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, sanitation for  @everyone mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , then  @everyone / @here mentions in the message content will show up as mentioning everyone that can view the chat. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if  message is not a reply message. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, sanitation for user mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid user mentions will behave as mentions. If  builtins.False , all valid user mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake user IDs, or  hikari.users.PartialUser -derived objects. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, sanitation for role mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid role mentions will behave as mentions. If  builtins.False , all valid role mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake role IDs, or  hikari.guilds.PartialRole -derived objects. flags : hikari.undefined.UndefinedOr[hikari.messages.MessageFlag] If provided, optional flags to set on the message. If  hikari.undefined.UNDEFINED , then nothing is changed. Note that some flags may not be able to be set. Currently the only flags that can be set are  NONE and  SUPPRESS_EMBEDS . If you have  MANAGE_MESSAGES permissions, you can use this call to suppress embeds on another user's message.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this, delete the message and re-send it. This also applies to embed attachments.  ! warning If you specify one of  mentions_everyone ,  user_mentions , or  role_mentions , then all others will default to  builtins.False , even if they were enabled previously. This is a limitation of Discord's design. If in doubt, specify all three of them each time.  ! warning If the message was not sent by your user, the only parameter you may provide to this call is the  flags parameter. Anything else will result in a  hikari.errors.ForbiddenError being raised. Returns    - hikari.messages.Message The edited message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel; if you try to change the contents of another user's message; or if you try to edit the flags on another user's message without the  MANAGE_MESSAGES permission. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_message", "u": 39, "d": "Delete a given message in a given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to delete the message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES , and the message is not sent by you. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_messages", "u": 39, "d": "Bulk-delete messages from the channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to bulk delete the messages in. This may be the object or the ID of an existing channel.  messages : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The messages to delete. This may be one or more objects or IDs of existing messages.  ! note This API endpoint will only be able to delete 100 messages at a time. For anything more than this, multiple requests will be executed one-after-the-other, since the rate limits for this endpoint do not favour more than one request per bucket. If one message is left over from chunking per 100 messages, or only one message is passed to this coroutine function, then the logic is expected to defer to  delete_message . The implication of this is that the  delete_message endpoint is ratelimited by a different bucket with different usage rates.  ! warning This endpoint is not atomic. If an error occurs midway through a bulk delete, you will  not be able to revert any changes made up to this point.  ! warning Specifying any messages more than 14 days old will cause the call to fail, potentially with partial completion. Raises    hikari.errors.BulkDeleteError An error containing the messages successfully deleted, and the messages that were not removed. The  builtins.BaseException.__cause__ of the exception will be the original error that terminated this process.", "f": 1}, {"r": "hikari.api.rest.RESTClient.add_reaction", "u": 39, "d": "Add a reaction emoji to a message in a given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to add the reaction to is. This may be a  hikari.channels.TextChannel or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to add a reaction to. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to react to the message with. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  ADD_REACTIONS (this is only necessary if you are the first person to add the reaction). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_my_reaction", "u": 39, "d": "Delete a reaction that your application user created. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete the reaction from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete a reaction from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to remove your reaction from. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_all_reactions_for_emoji", "u": 39, "d": "Delete all reactions for a single emoji on a given message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete the reactions from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete a reactions from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to delete all reactions from. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_reaction", "u": 39, "d": "Delete a reaction from a message. If you are looking to delete your own applications reaction, use  delete_my_reaction . Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete the reaction from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete a reaction from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to delete all reactions from. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_all_reactions", "u": 39, "d": "Delete all reactions from a message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete all reactions from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete all reaction from. This may be the object or the ID of an existing message. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_reactions_for_emoji", "u": 39, "d": "Fetch reactions for an emoji from a message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete all reactions from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete all reaction from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to filter reactions by. Returns    - hikari.iterators.LazyIterator[hikari.users.User] An iterator to fetch the users.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_webhook", "u": 39, "d": "Create webhook in a channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the webhook will be created. This may be the object or the ID of an existing channel. name : str The name for the webhook. This cannnot be  clyde . Other Parameters         avatar : typing.Optional[hikari.files.Resourceish] If provided, the avatar for the webhook. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.webhooks.Webhook The created webhook. Raises    hikari.errors.BadRequestError If  name doesnt follow the restrictions enforced by discord. hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_webhook", "u": 39, "d": "Fetch an existing webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to fetch. This may be the object or the ID of an existing webhook. Other Parameters         token : hikari.undefined.UndefinedOr[builtins.str] If provided, the webhoook token that will be used to fetch the webhook instead of the token the client was initialized with. Returns    - hikari.webhooks.Webhook The requested webhook. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission when not using a token. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_channel_webhooks", "u": 39, "d": "Fetch all channel webhooks. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch the webhooks for. This may be a  hikari.channels.TextChannel or the ID of an existing channel. Returns    - typing.Sequence[hikari.webhooks.Webhook] The fetched webhooks. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_webhooks", "u": 39, "d": "Fetch all guild webhooks. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the webhooks for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.webhooks.Webhook] The fetched webhooks. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_webhook", "u": 39, "d": "Edit a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to edit. This may be the object or the ID of an existing webhook. Other Parameters         token : hikari.undefined.UndefinedOr[builtins.str] If provided, the webhoook token that will be used to edit the webhook instead of the token the client was initialized with. name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new webhook name. avatar : hikari.undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new webhook avatar. If  builtins.None , will remove the webhook avatar. channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel If provided, the text channel to move the webhook to. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.webhooks.Webhook The edited webhook. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission when not using a token. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_webhook", "u": 39, "d": "Delete a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to delete. This may be the object or the ID of an existing webhook. Other Parameters         token : hikari.undefined.UndefinedOr[builtins.str] If provided, the webhoook token that will be used to delete the webhook instead of the token the client was initialized with. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission when not using a token. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhoook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.execute_webhook", "u": 39, "d": "Execute a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to execute. This may be the object or the ID of an existing webhook. token: builtins.str The webhook token. content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed nor no  embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. embeds : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embeds. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified or if both  embed and  embeds are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_webhook_message", "u": 39, "d": "Edit a message sent by a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to execute. This may be the object or the ID of an existing webhook. token: builtins.str The webhook token. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. content : hikari.undefined.UndefinedNoneOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed nor no  embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the message embed. embeds : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the message embeds. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this, delete the message and re-send it. This also applies to embed attachments.  ! warning If you specify one of  mentions_everyone ,  user_mentions , or  role_mentions , then all others will default to  builtins.False , even if they were enabled previously. This is a limitation of Discord's design. If in doubt, specify all three of them each time. Returns    - hikari.messages.Message The edited message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified or if both  embed and  embeds are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook or the message are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_webhook_message", "u": 39, "d": "Delete a given message in a given channel. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to execute. This may be the object or the ID of an existing webhook. token: builtins.str The webhook token. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook or the message are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_gateway_url", "u": 39, "d": "Fetch the gateway url.  ! note This endpoint does not require any valid authorization. Raises    hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_gateway_bot", "u": 39, "d": "Fetch the gateway gateway info for the bot. Returns    - hikari.sessions.GatewayBot The gateway bot. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_invite", "u": 39, "d": "Fetch an existing invite. Parameters      invite : hikari.invites.Inviteish The invite to fetch. This may be an invite object or the code of an existing invite. Returns    - hikari.invites.Invite The requested invite. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the invite is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_invite", "u": 39, "d": "Delete an existing invite. Parameters      invite : hikari.invites.Inviteish The invite to delete. This may be an invite object or the code of an existing invite. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission in the guild the invite is from or if you are missing the  MANAGE_CHANNELS permission in the channel the invite is from. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the invite is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_my_user", "u": 39, "d": "Fetch the token's associated user. Returns    - hikari.users.OwnUser The token's associated user. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_my_user", "u": 39, "d": "Edit the token's associated user. Other Parameters         username : undefined.UndefinedOr[builtins.str] If provided, the new username. avatar : undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new avatar. If  builtins.None , the avatar will be removed. Returns    - hikari.users.OwnUser The edited token's associated user. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. Discord also returns this on a ratelimit: https: github.com/discord/discord-api-docs/issues/1462 hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_my_connections", "u": 39, "d": "Fetch the token's associated connections. Returns    - hikari.applications.OwnConnection The token's associated connections. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_my_guilds", "u": 39, "d": "Fetch the token's associated guilds. Other Parameters         newest_first : builtins.bool Whether to fetch the newest first or the olders first. Defaults to  builtins.False . start_at : hikari.undefined.UndefinedOr[hikari.snowflakes.SearchableSnowflakeishOr[hikari.guilds.PartialGuild If provided, will start at this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may also be a guild object. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.applications.OwnGuild] The token's associated guilds.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.", "f": 1}, {"r": "hikari.api.rest.RESTClient.leave_guild", "u": 39, "d": "Leave a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to leave. This may be the object or the ID of an existing guild. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found or you own the guild. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_dm_channel", "u": 39, "d": "Create a DM channel with a user. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to create the DM channel with. This may be the object or the ID of an existing user. Returns    - hikari.channels.DMChannel The created DM channel. Raises    hikari.errors.BadRequestError If the user is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_application", "u": 39, "d": "Fetch the token's associated application. Returns    - hikari.applications.Application The token's associated application. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.add_user_to_guild", "u": 39, "d": "Add a user to a guild.  ! note This requires the  access_token to have the  hikari.applications.OAuth2Scope.GUILDS_JOIN scope enabled. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to add the user to. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to add to the guild. This may be the object or the ID of an existing user. Other Parameters         nick : hikari.undefined.UndefinedOr[builtins.str] If provided, the nick to add to the user when he joins the guild. Requires the  MANAGE_NICKNAMES permission on the guild. roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the roles to add to the user when he joins the guild. This may be a collection objects or IDs of existing roles. Requires the  MANAGE_ROLES permission on the guild. mute : hikari.undefined.UndefinedOr[builtins.bool] If provided, the mute state to add the user when he joins the guild. Requires the  MUTE_MEMBERS permission on the guild. deaf : hikari.undefined.UndefinedOr[builtins.bool] If provided, the deaf state to add the user when he joins the guild. Requires the  DEAFEN_MEMBERS permission on the guild. Returns    - typing.Optional[hikari.guilds.Member]  builtins.None if the user was already part of the guild, else  hikari.guilds.Member . Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are not part of the guild you want to add the user to, if you are missing permissions to do one of the things you specified, if you are using an access token for another user, if the token is bound to annother bot or if the access token doesnt have the  hikari.applications.OAuth2Scope.GUILDS_JOIN scope enabled. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If you own the guild or the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_voice_regions", "u": 39, "d": "Fetch available voice regions.  ! note This endpoint doesn't return VIP voice regions. Returns    - typing.Sequence[hikari.voices.VoiceRegion] The available voice regions. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_user", "u": 39, "d": "Fetch a user. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to fetch. This can be the object or the ID of an existing user. Returns    - hikari.users.User The requested user Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_audit_log", "u": 39, "d": "Fetch the guild's audit log. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the audit logs from. This can be a guild object or the ID of an existing guild. Other Parameters         before : hikari.undefined.UndefinedOr[hikari.snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, filter to only actions after this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. user : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser If provided, the user to filter for. event_type : hikari.undefined.UndefinedOr[hikari.audit_logs.AuditLogEventType] If provided, the event type to filter for. Returns    - hikari.iterators.LazyIterator[hikari.audit_logs.AuditLog] The guild's audit log.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  VIEW_AUDIT_LOG permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_emoji", "u": 39, "d": "Fetch a guild emoji. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the emoji from. This can be a guild object or the ID of an existing guild. emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The emoji to fetch. This can be a  hikari.emojis.CustomEmoji or the ID of an existing emoji. Returns    - hikari.emojis.KnownCustomEmoji The requested emoji. Raises    hikari.errors.NotFoundError If the guild or the emoji are not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_emojis", "u": 39, "d": "Fetch the emojis of a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the emojis from. This can be a guild object or the ID of an existing guild. Returns    - typing.Sequence[hikari.emojis.KnownCustomEmoji] The requested emojis. Raises    hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_emoji", "u": 39, "d": "Create an emoji in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the emoji on. This can be a guild object or the ID of an existing guild. name : builtins.str The name for the emoji. image : hikari.files.Resourceish The 128x128 image for the emoji. Maximum upload size is 256kb. This can be a still or an animated image. Other Parameters         roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, a collection of the roles that will be able to use this emoji. This can be a  hikari.guilds.PartialRole or the ID of an existing role. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.emojis.KnownCustomEmoji The created emoji. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value or if there are no more spaces for the type of emoji in the guild. hikari.errors.ForbiddenError If you are missing  MANAGE_EMOJIS in the server. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_emoji", "u": 39, "d": "Edit an emoji in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit the emoji on. This can be a guild object or the ID of an existing guild. emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The emoji to edit. This can be a  hikari.emojis.CustomEmoji or the ID of an existing emoji. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name for the emoji. roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the new collection of roles that will be able to use this emoji. This can be a  hikari.guilds.PartialRole or the ID of an existing role. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.emojis.KnownCustomEmoji The edited emoji. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing  MANAGE_EMOJIS in the server. hikari.errors.NotFoundError If the guild or the emoji are not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_emoji", "u": 39, "d": "Delete an emoji in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete the emoji on. This can be a guild object or the ID of an existing guild. emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The emoji to delete. This can be a  hikari.emojis.CustomEmoji or the ID of an existing emoji. Raises    hikari.errors.ForbiddenError If you are missing  MANAGE_EMOJIS in the server. hikari.errors.NotFoundError If the guild or the emoji are not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.guild_builder", "u": 39, "d": "Make a guild builder to create a guild with. Parameters      name : builtins.str The new guilds name. Returns    - hikari.api.special_endpoints.GuildBuilder The guild builder to use. This will allow to create a guild later with  hikari.api.special_endpoints.GuildBuilder.create .  ! note This endpoint can only be used by bots in less than 10 guilds. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value or if you call this as a bot that's in more than 10 guilds. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once  hikari.api.special_endpoints.GuildBuilder.create is called. Invoking this function itself will not raise any of the above types. See Also     Guild builder:  hikari.api.special_endpoints.GuildBuilder ", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild", "u": 39, "d": "Fetch a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch. This can be the object or the ID of an existing guild. Returns    - hikari.guilds.RESTGuild The requested guild. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_preview", "u": 39, "d": "Fetch a guild preview. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the preview of. This can be a guild object or the ID of an existing guild. Returns    - hikari.guilds.GuildPreview The requested guild preview.  ! note This will only work for guilds you are a part of or are public. Raises    hikari.errors.NotFoundError If the guild is not found or you are not part of the guild. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_guild", "u": 39, "d": "Edit a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name for the guild. region : hikari.undefined.UndefinedOr[hikari.voices.VoiceRegionish] If provided, the new voice region for the guild. verification_level : hikari.undefined.UndefinedOr[hikari.guilds.GuildVerificationLevel] If provided, the new verification level. default_message_notifications : hikari.undefined.UndefinedOr[hikari.guilds.GuildMessageNotificationsLevel] If provided, the new default message notifications level. explicit_content_filter_level : hikari.undefined.UndefinedOr[hikari.guilds.GuildExplicitContentFilterLevel] If provided, the new explicit content filter level. afk_channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel If provided, the new afk channel. Requires  afk_timeout to be set to work. afk_timeout : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the new afk timeout. icon : hikari.undefined.UndefinedOr[hikari.files.Resourceish] If provided, the new guild icon. Must be a 1024x1024 image or can be an animated gif when the guild has the  ANIMATED_ICON feature. owner : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser ] If provided, the new guild owner.  ! warning You need to be the owner of the server to use this. splash : hikari.undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new guild splash. Must be a 16:9 image and the guild must have the  INVITE_SPLASH feature. banner : hikari.undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new guild banner. Must be a 16:9 image and the guild must have the  BANNER feature. system_channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildTextChannel If provided, the new system channel. rules_channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildTextChannel If provided, the new rules channel. public_updates_channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildTextChannel If provided, the new public updates channel. preferred_locale : hikari.undefined.UndefinedNoneOr[builtins.str] If provided, the new preferred locale. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.RESTGuild The edited guild. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. Or you are missing the hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission or if you tried to pass ownership without being the server owner. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_guild", "u": 39, "d": "Delete a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete. This may be the object or the ID of an existing guild. Raises    hikari.errors.ForbiddenError If you are not the owner of the guild. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If you own the guild or if you are not in it. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_channels", "u": 39, "d": "Fetch the channels in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the channels from. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.channels.GuildChannel] The requested channels. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_guild_text_channel", "u": 39, "d": "Create a text channel in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the channels topic. Maximum 1024 characters. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mark the channel as NSFW. rate_limit_per_user : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the ammount of seconds a user has to wait before being able to send another message in the channel. Maximum 21600 seconds. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildTextChannel The created channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_guild_news_channel", "u": 39, "d": "Create a news channel in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the channels topic. Maximum 1024 characters. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mark the channel as NSFW. rate_limit_per_user : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the ammount of seconds a user has to wait before being able to send another message in the channel. Maximum 21600 seconds. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildNewsChannel The created channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_guild_voice_channel", "u": 39, "d": "Create a voice channel in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). user_limit : hikari.undefined.UndefinedOr[builtins.int] If provided, the maximum users in the channel at once. Must be between 0 and 99 with 0 meaning no limit. bitrate : hikari.undefined.UndefinedOr[builtins.int] If provided, the bitrate for the channel. Must be between 8000 and 96000 or 8000 and 128000 for VIP servers. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildVoiceChannel The created channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_guild_category", "u": 39, "d": "Create a category in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the category. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildCategory The created category. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.reposition_channels", "u": 39, "d": "Reposition the channels in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to reposition the channels in. This may be the object or the ID of an existing guild. positions : typing.Mapping[builtins.int, hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel A mapping of of the object or the ID of an existing channel to the new position, relative to their parent category, if any. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_member", "u": 39, "d": "Fetch a guild member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to get the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to get the member for. This may be the object or the ID of an existing user. Returns    - hikari.guilds.Member The requested member. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or the user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_members", "u": 39, "d": "Fetch the members from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the members of. This may be the object or the ID of an existing guild. Returns    - hikari.iterators.LazyIterator[hikari.guilds.Member] An iterator to fetch the members.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.  ! warning This endpoint requires the  GUILD_MEMBERS intent. Alternatively, you can use  search_members which doesn't require any intents.", "f": 1}, {"r": "hikari.api.rest.RESTClient.search_members", "u": 39, "d": "Search the members in a guild by nickname and username. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The object or ID of the guild to search members in. name : str The query to match username(s) and nickname(s) against. Returns    - typing.Sequence[hikari.guilds.Member] A sequence of the members who matched the provided  name . Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note Unlike  RESTClient.fetch_members this endpoint isn't paginated and therefore will return all the members in one go rather than needing to be asynchronously iterated over.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_member", "u": 39, "d": "Edit a guild member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. Other Parameters         nick : hikari.undefined.UndefinedNoneOr[builtins.str] If provided, the new nick for the member. If  builtins.None , will remove the members nick. Requires the  MANAGE_NICKNAMES permission. roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the new roles for the member. Requires the  MANAGE_ROLES permission. mute : hikari.undefined.UndefinedOr[builtins.bool] If provided, the new server mute state for the member. Requires the  MUTE_MEMBERS permission. deaf : hikari.undefined.UndefinedOr[builtins.bool] If provided, the new server deaf state for the member. Requires the  DEAFEN_MEMBERS permission. voice_channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel ] If provided,  builtins.None or the object or the ID of an existing voice channel to move the member to. If  builtins.None , will disconnect the member from voice. Requires the  MOVE_MEMBERS permission and the  CONNECT permission in the original voice channel and the target voice channel.  ! note If the member is not in a voice channel, this will take no effect. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.Member Object of the member that was updated. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing a permission to do an action. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or the user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_my_nick", "u": 39, "d": "Edit the associated token's member nick. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. nick : typing.Optional[builtins.str] The new nick. If  builtins.None , will remove the nick. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  CHANGE_NICKNAME permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.add_role_to_member", "u": 39, "d": "Add a role to a member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild where the member is in. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to add the role to. This may be the object or the ID of an existing user. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to add. This may be the object or the ID of an existing role. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild, user or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.remove_role_from_member", "u": 39, "d": "Remove a role from a member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild where the member is in. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to remove the role from. This may be the object or the ID of an existing user. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to remove. This may be the object or the ID of an existing role. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild, user or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.kick_user", "u": 39, "d": "Kick a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to kick the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.kick_member", "u": 39, "d": "Kick a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to kick the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.ban_user", "u": 39, "d": "Ban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to ban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         delete_message_days : hikari.undefined.UndefinedNoneOr[builtins.int] If provided, the number of days to delete messages for. This must be between 0 and 7. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.ban_member", "u": 39, "d": "Ban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to ban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         delete_message_days : hikari.undefined.UndefinedNoneOr[builtins.int] If provided, the number of days to delete messages for. This must be between 0 and 7. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.unban_user", "u": 39, "d": "Unban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to unban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to unban. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.unban_member", "u": 39, "d": "Unban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to unban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to unban. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_ban", "u": 39, "d": "Fetch the guild's ban info for a user. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the ban from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to fetch the ban of. This may be the object or the ID of an existing user. Returns    - hikari.guilds.GuildMemberBan The requested ban info. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found or if the user is not banned. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_bans", "u": 39, "d": "Fetch the bans of a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the bans from. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.guilds.GuildMemberBan] The requested bans. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_roles", "u": 39, "d": "Fetch the roles of a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the roles from. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.guilds.Role] The requested roles. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_role", "u": 39, "d": "Create a role. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the role in. This may be the object or the ID of an existing guild. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the name for the role. permissions : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] The permissions to give the role. This will default to setting NO roles if left to the default value. This is in contrast to default behaviour on Discord where some random permissions will be set by default. color : hikari.undefined.UndefinedOr[hikari.colors.Colorish] If provided, the role's color. colour : hikari.undefined.UndefinedOr[hikari.colors.Colorish] An alias for  color . hoist : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to hoist the role. mentionable : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to make the role mentionable. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.Role The created role. Raises    builtins.TypeError If both  color and  colour are specified. hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.reposition_roles", "u": 39, "d": "Reposition the roles in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to reposition the roles in. This may be the object or the ID of an existing guild. positions : typing.Mapping[builtins.int, hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole A mapping of the position to the role. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_role", "u": 39, "d": "Edit a role. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit the role in. This may be the object or the ID of an existing guild. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to edit. This may be the object or the ID of an existing role. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name for the role. permissions : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the new permissions for the role. color : hikari.undefined.UndefinedOr[hikari.colors.Colorish] If provided, the new color for the role. colour : hikari.undefined.UndefinedOr[hikari.colors.Colorish] An alias for  color . hoist : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to hoist the role. mentionable : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to make the role mentionable. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.Role The edited role. Raises    builtins.TypeError If both  color and  colour are specified. hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_role", "u": 39, "d": "Delete a role. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete the role in. This may be the object or the ID of an existing guild. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to delete. This may be the object or the ID of an existing role. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.estimate_guild_prune_count", "u": 39, "d": "Estimate the guild prune count. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to estimate the guild prune count for. This may be the object or the ID of an existing guild. Other Parameters         days : hikari.undefined.UndefinedOr[builtins.int] If provided, number of days to count prune for. include_roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole ] If provided, the role(s) to include. By default, this endpoint will not count users with roles. Providing roles using this attribute will make members with the specified roles also get included into the count. Returns    - builtins.int The estimated guild prune count. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.begin_guild_prune", "u": 39, "d": "Begin the guild prune. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to begin the guild prune in. This may be the object or the ID of an existing guild. Other Parameters         days : hikari.undefined.UndefinedOr[builtins.int] If provided, number of days to count prune for. compute_prune_count: hikari.snowflakes.SnowflakeishOr[builtins.bool] If provided, whether to return the prune count. This is discouraged for large guilds. include_roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the role(s) to include. By default, this endpoint will not count users with roles. Providing roles using this attribute will make members with the specified roles also get included into the count. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - typing.Optional[builtins.int] If  compute_prune_count is not provided or  builtins.True , the number of members pruned. Else  builtins.None . Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_voice_regions", "u": 39, "d": "Fetch the available voice regions for a guild.  ! note Unlike  RESTClient.fetch_voice_regions , this will return the VIP regions if the guild has access to them. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the voice regions for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.voices.VoiceRegion] The available voice regions for the guild. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_invites", "u": 39, "d": "Fetch the guild's invites. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the invites for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.invites.InviteWithMetadata] The invites for the guild. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_integrations", "u": 39, "d": "Fetch the guild's integrations. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the integrations for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.guilds.Integration] The integrations for the guild. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_widget", "u": 39, "d": "Fetch a guilds's widget. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the widget from. This can be the object or the ID of an existing guild. Returns    - hikari.guilds.GuildWidget The requested guild widget. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_widget", "u": 39, "d": "Fetch a guilds's widget. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit the widget in. This can be the object or the ID of an existing guild. Other Parameters         channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel If provided, the channel to set the widget to. If  builtins.None , will not set to any. enabled : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to enable the widget. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.GuildWidget The edited guild widget. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_welcome_screen", "u": 39, "d": "Fetch a guild's welcome screen. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] Object or ID of the guild to fetch the welcome screen for. Returns    - hikari.invites.WelcomeScreen The requested welcome screen. Raises    hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_welcome_screen", "u": 39, "d": "Edit the welcome screen of a community guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] ID or object of the guild to edit the welcome screen for. Other Parameters         description : undefined.UndefinedNoneOr[builtins.str] The description to set for the guild's welcome screen. This may be  builtins.None to unset the description or left as  hikari.undefined.UNDEFINED to leave the description unchanged. enabled : undefined.UndefinedOr[builtins.bool] Whether the guild's welcome screen should be enabled. Leave as  hikari.undefined.UNDEFINED to leave this unchanged. channels : hikari.undefined.UndefinedNoneOr[typing.Sequence[hikari.guilds.WelcomeChanne; A sequence of up to 5 public channels to set in this guild's welcome screen. This may be passed as  builtins.None to remove all welcome channels or left as  hikari.undefined.UNDEFINED to leave unchanged.  ! note Custom emojis may only be included in a guild's welcome channels if it's boost status is tier 2 or above. Returns    - hikari.guilds.WelcomeScreen The edited guild welcome screen. Raises    hikari.errors.BadRequestError If more than 5 welcome channels are provided or if a custom emoji is included on a welcome channel in a guild that doesn't have tier 2 of above boost status or if a private channel is included as a welcome channel. hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission, are not part of the guild or the guild doesn't have access to the community welcome screen feature. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_vanity_url", "u": 39, "d": "Fetch a guild's vanity url. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the vanity url from. This can be the object or the ID of an existing guild. Returns    - hikari.invites.VanityURL The requested invite. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_template", "u": 39, "d": "Create a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create a template from. name : str The name to use for the created template. Other Parameters         description : hikari.undefined.UndefinedNoneOr[builtins.str] The description to set for the template. Returns    - hikari.templates.Template The object of the created template. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.create_guild_from_template", "u": 39, "d": "Make a guild from a template. Parameters      template: hikari.templates.Templateish The objecr or code of the template to create a guild based on. name : builtins.str The new guilds name. Other Parameters         icon : hikari.undefined.UndefinedOr[hikari.files.Resourceish] If provided, the guild icon to set. Must be a 1024x1024 image or can be an animated gif when the guild has the  ANIMATED_ICON feature. Returns    - hikari.guilds.RESTGuild Object of the created guild.  ! note This endpoint can only be used by bots in less than 10 guilds. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value or if you call this as a bot that's in more than 10 guilds. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.delete_template", "u": 39, "d": "Delete a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete a template in. template : hikari.templates.Templateish Object or ID of the template to delete. Returns    - hikari.templates.Template The deleted template's object. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.edit_template", "u": 39, "d": "Modify a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit a template in. template : hikari.templates.Templateish Object or ID of the template to modify. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] The name to set for this template. description : hikari.undefined.UndefinedNoneOr[builtins.str] The description to set for the template. Returns    - hikari.templates.Template The object of the edited template. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_template", "u": 39, "d": "Fetch a guild template. Parameters      template : hikari.templates.Templateish The object or string code of the template to fetch. Returns    - hikari.templates.Template The object of the found template. Raises    hikari.errors.NotFoundError If the template was not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.fetch_guild_templates", "u": 39, "d": "Fetch the templates for a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The object or ID of the guild to get the templates for. Returns    - typing.Sequence[hikari.templates.Template] A sequence of the found template objects. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.sync_guild_template", "u": 39, "d": "Create a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to sync a template in template : hikari.templates.Templateish Object or ID of the template to sync. Returns    - hikari.templates.Template The object of the synced template. Raises    hikari.errors.ForbiddenError If you are not part of the guild or are missing the  MANAGE_GUILD permission. hikari.errors.NotFoundError If the guild or template is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.rest.RESTClient.http_settings", "u": 9, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.api.rest.RESTClient.proxy_settings", "u": 9, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.api.voice", "u": 40, "d": "Interfaces used to describe voice client implementations."}, {"r": "hikari.api.voice.VoiceComponent", "u": 40, "d": "Interface for a voice system implementation."}, {"r": "hikari.api.voice.VoiceComponent.connections", "u": 40, "d": "Return a mapping of guild-id to active voice connection."}, {"r": "hikari.api.voice.VoiceComponent.close", "u": 40, "d": "Shut down all connections, waiting for them to terminate. Once this is done, unsubscribe from any events. If you simply wish to disconnect every connection, use  disconnect instead.", "f": 1}, {"r": "hikari.api.voice.VoiceComponent.disconnect", "u": 40, "d": "Shut down all connections, waiting for them to terminate. This will not close the voice component.", "f": 1}, {"r": "hikari.api.voice.VoiceComponent.connect_to", "u": 40, "d": "Connect to a given voice channel. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.Guild] The guild to connect to. channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel] The channel or channel ID to connect to. voice_connection_type : typing.Type[VoiceConnection] The type of voice connection to use. This should be initialized internally using the  VoiceConnection.initialize  builtins.classmethod . deaf : builtins.bool Defaulting to  builtins.False , if  builtins.True , the client will enter the voice channel deafened (thus unable to hear other users). mute : builtins.bool Defaulting to  builtins.False , if  builtins.True , the client will enter the voice channel muted (thus unable to send audio).  kwargs : typing.Any Any arguments to provide to the  VoiceConnection.initialize method. Returns    - VoiceConnection A voice connection implementation of some sort.", "f": 1}, {"r": "hikari.api.voice.VoiceConnection", "u": 40, "d": "An abstract interface for defining how bots can interact with voice. Since voice will generally be run in a subprocess to prevent interfering with the bot when performing CPU-bound encoding/encryption, any implementation of this is expected to implement the appropriate mechanisms for communicating with a voice subprocess and controlling it, however, this is left to the discretion of each implementation. Control is left to the implementation to define how to perform it. The idea is to allow various decoders to be implemented to allow this to direct interface with other types of system outside this library, such as LavaLink, for example."}, {"r": "hikari.api.voice.VoiceConnection.initialize", "u": 40, "d": "Initialize and connect the voice connection. Parameters      channel_id : hikari.snowflakes.Snowflake The channel ID that the voice connection is actively connected to. debug : builtins.bool  builtins.True if debugging mode should be enabled. This is up to each implementation to decide how to provide this, if at all. endpoint : str The voice websocket endpoint to connect to. Will contain the protocol at the start (i.e.  wss:  ), and end with the  correct port (the port and protocol are sanitized since Discord still provide the wrong information four years later). guild_id : hikari.snowflakes.Snowflake The guild ID that the websocket should connect to. on_close : typing.Callable T], typing.Awaitable[None A shutdown hook to invoke when closing a connection to ensure the connection is unregistered from the voice component safely. owner : VoiceComponent The component that made this connection object. session_id : builtins.str The voice session ID to use. shard_id : builtins.int The associated shard ID that the voice connection was generated from. token : builtins.str The voice token to use. user_id : hikari.snowflakes.Snowflake The user ID of the account that just joined the voice channel.  kwargs : typing.Any Any implementation-specific arguments to provide to the voice connection that is being initialized. Returns    - T The type of this connection object.", "f": 1}, {"r": "hikari.api.voice.VoiceConnection.channel_id", "u": 40, "d": "Return the ID of the voice channel this voice connection is in."}, {"r": "hikari.api.voice.VoiceConnection.guild_id", "u": 40, "d": "Return the ID of the guild this voice connection is in."}, {"r": "hikari.api.voice.VoiceConnection.is_alive", "u": 40, "d": "Return  builtins.True if the connection is alive."}, {"r": "hikari.api.voice.VoiceConnection.shard_id", "u": 40, "d": "Return the ID of the shard that requested the connection."}, {"r": "hikari.api.voice.VoiceConnection.owner", "u": 40, "d": "Return the component that is managing this connection."}, {"r": "hikari.api.voice.VoiceConnection.disconnect", "u": 40, "d": "Signal the process to shut down.", "f": 1}, {"r": "hikari.api.voice.VoiceConnection.join", "u": 40, "d": "Wait for the process to halt before continuing.", "f": 1}, {"r": "hikari.api.voice.VoiceConnection.notify", "u": 40, "d": "Submit an event to the voice connection to be processed.", "f": 1}, {"r": "hikari.api.cache", "u": 41, "d": "Core interface for a cache implementation."}, {"r": "hikari.api.cache.CacheView", "u": 41, "d": "Interface describing an immutable snapshot view of part of a cache. This can be treated as a normal  typing.Mapping but with some special methods."}, {"r": "hikari.api.cache.CacheView.get_item_at", "u": 41, "d": "Get an entry in the view at position  index .", "f": 1}, {"r": "hikari.api.cache.CacheView.iterator", "u": 41, "d": "Get a lazy iterator of the entities in the view.", "f": 1}, {"r": "hikari.api.cache.Cache", "u": 41, "d": "Interface describing the operations a cache component should provide. This will be used by the gateway to cache specific types of objects that the application should attempt to remember for later, depending on how this is implemented. The requirement for this stems from the assumption by Discord that bot applications will maintain some form of \"memory\" of the events that occur. The implementation may choose to use a simple in-memory collection of objects, or may decide to use a distributed system such as a Redis cache for cross-process bots."}, {"r": "hikari.api.cache.Cache.get_emoji", "u": 41, "d": "Get a known custom emoji from the cache. Parameters      emoji_id : hikari.snowflakes.Snowflakeish The ID of the emoji to get from the cache. Returns    - typing.Optional[hikari.emojis.KnownCustomEmoji] The object of the emoji that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_emojis_view", "u": 41, "d": "Get a view of the known custom emoji objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of the known custom emojis found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_emojis_view_for_guild", "u": 41, "d": "Get a view of the known custom emojis cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached emoji objects for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of emojis found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.Cache.get_guild", "u": 41, "d": "Get a guild from the cache.  ! warning This will return a guild regardless of whether it is available or not. To only query available guilds, use  get_available_guild instead. Likewise, to only query unavailable guilds, use  get_unavailable_guild . Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_available_guild", "u": 41, "d": "Get the object of an available guild from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_unavailable_guild", "u": 41, "d": "Get the object of a unavailable guild from the cache.  ! note Unlike  Cache.get_available_guild , the objects returned by this method will likely be out of date and inaccurate as they are considered unavailable, meaning that we are not receiving gateway events for this guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_available_guilds_view", "u": 41, "d": "Get a view of the available guild objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] A view of guild IDs to the guild objects found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_unavailable_guilds_view", "u": 41, "d": "Get a view of the unavailable guild objects in the cache.  ! note Unlike  Cache.get_available_guilds_view , the objects returned by this method will likely be out of date and inaccurate as they are considered unavailable, meaning that we are not receiving gateway events for this guild. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] A view of guild IDs to the guild objects found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_guild_channel", "u": 41, "d": "Get a guild channel from the cache. Parameters      channel_id : hikari.snowflakes.Snowflakeish The ID of the guild channel to get from the cache. Returns    - typing.Optional[hikari.channels.GuildChannel] The object of the guild channel that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_guild_channels_view", "u": 41, "d": "Get a view of the guild channels in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_guild_channels_view_for_guild", "u": 41, "d": "Get a view of the guild channels in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.Cache.get_invite", "u": 41, "d": "Get an invite object from the cache. Parameters      code : str The string code of the invite to get from the cache. Returns    - typing.Optional[hikari.invites.InviteWithMetadata] The object of the invite that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_invites_view", "u": 41, "d": "Get a view of the invite objects in the cache. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of string codes to objects of the invites that were found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_invites_view_for_guild", "u": 41, "d": "Get a view of the invite objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of string code to objects of the invites that were found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.Cache.get_invites_view_for_channel", "u": 41, "d": "Get a view of the invite objects in the cache for a specified channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get invite objects for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to get invite objects for. Returns    - CacheView[str, invites.InviteWithMetadata] A view of string codes to objects of the invites there were found in the cache for the specified channel.", "f": 1}, {"r": "hikari.api.cache.Cache.get_me", "u": 41, "d": "Get the own user object from the cache. Returns    - typing.Optional[hikari.users.OwnUser] The own user object that was found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_member", "u": 41, "d": "Get a member object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish user_id : hikari.snowflakes.Snowflakeish Returns    - typing.Optional[hikari.guilds.Member] The object of the member found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_members_view", "u": 41, "d": "Get a view of all the members objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member A view of guild IDs to views of user IDs to objects of the members that were found from the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_members_view_for_guild", "u": 41, "d": "Get a view of the members cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached member view for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member] The view of user IDs to the members cached for the specified guild.", "f": 1}, {"r": "hikari.api.cache.Cache.get_message", "u": 41, "d": "Get a message object from the cache. Parameters      message_id : hikari.snowflakes.Snowflakeish The ID of the message to get from the cache. Returns    - typing.Optional[hikari.messages.Message] The object of the message found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_messages_view", "u": 41, "d": "Get a view of all the message objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.messages.Message] A view of message objects found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_presence", "u": 41, "d": "Get a presence object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get a presence for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to get a presence for. Returns    - typing.Optional[hikari.presences.MemberPresence] The object of the presence that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_presences_view", "u": 41, "d": "Get a view of all the presence objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake A view of guild IDs to views of user IDs to objects of the presences found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_presences_view_for_guild", "u": 41, "d": "Get a view of the presence objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached presence objects for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] A view of user IDs to objects of the presence found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.Cache.get_role", "u": 41, "d": "Get a role object from the cache. Parameters      role_id : hikari.snowflakes.Snowflakeish The ID of the role to get from the cache. Returns    - typing.Optional[hikari.guilds.Role] The object of the role found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_roles_view", "u": 41, "d": "Get a view of all the role objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_roles_view_for_guild", "u": 41, "d": "Get a view of the roles in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached roles for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.Cache.get_user", "u": 41, "d": "Get a user object from the cache. Parameters      user_id : hikari.snowflakes.Snowflakeish The ID of the user to get from the cache. Returns    - typing.Optional[hikari.users.User] The object of the user that was found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_users_view", "u": 41, "d": "Get a view of the user objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.users.User] The view of user IDs to the users found in the cache.", "f": 1}, {"r": "hikari.api.cache.Cache.get_voice_state", "u": 41, "d": "Get a voice state object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get a voice state for. user_id :hikari.snowflakes.Snowflakeish The ID of the user to get a voice state for. Returns    - typing.Optional[hikari.voices.VoiceState] The object of the voice state that was found in the cache, or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.Cache.get_voice_states_view", "u": 41, "d": "Get a view of all the voice state objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState A view of guild IDs to views of user IDs to objects of the voice states that were found in the cache,", "f": 1}, {"r": "hikari.api.cache.Cache.get_voice_states_view_for_channel", "u": 41, "d": "Get a view of the voice states cached for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached voice states for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to get the cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice states found cached for the specified channel.", "f": 1}, {"r": "hikari.api.cache.Cache.get_voice_states_view_for_guild", "u": 41, "d": "Get a view of the voice states cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice states found cached for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache", "u": 41, "d": "Cache that exposes read-only operations as well as mutation operations. This is only exposed to internal components. There is no guarantee the user-facing cache will provide these methods or not."}, {"r": "hikari.api.cache.MutableCache.clear", "u": 41, "d": "Clear the full cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_emojis", "u": 41, "d": "Remove all the known custom emoji objects from the cache.  ! note This will skip emojis that are being kept alive by a reference on a presence entry. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A cache view of emoji IDs to objects of the emojis that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_emojis_for_guild", "u": 41, "d": "Remove the known custom emoji objects cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove the cached emoji objects for.  ! note This will skip emojis that are being kept alive by a reference on a presence entry. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of the emojis that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_emoji", "u": 41, "d": "Remove a known custom emoji from the cache. Parameters      emoji_id : hikari.snowflakes.Snowflakeish The ID of the emoji to remove from the cache.  ! note This will not delete emojis that are being kept alive by a reference on a presence entry. Returns    - typing.Optional[hikari.emojis.KnownCustomEmoji] The object of the emoji that was removed from the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_emoji", "u": 41, "d": "Add a known custom emoji to the cache. Parameters      emoji : hikari.emojis.KnownCustomEmoji The object of the known custom emoji to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_emoji", "u": 41, "d": "Update an emoji object in the cache. Parameters      emoji : hikari.emojis.KnownCustomEmoji The object of the emoji to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.emojis.KnownCustomEmoji], typing.Optional[hikari.emojis.KnownCustomEmoji A tuple of the old cached emoji object if found (else  builtins.None ) and the new cached emoji object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_guilds", "u": 41, "d": "Remove all the guild objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] The cache view of guild IDs to guild objects that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_guild", "u": 41, "d": "Remove a guild object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild that was removed from the cache, will be  builtins.None if not found.", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_guild", "u": 41, "d": "Add a guild object to the cache. Parameters      guild : hikari.guilds.GatewayGuild The object of the guild to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_guild_availability", "u": 41, "d": "Set whether a cached guild is available or not. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to set the availability for. is_available : builtins.bool The availability to set for the guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_guild", "u": 41, "d": "Update a guild in the cache. Parameters      guild : hikari.guilds.GatewayGuild The object of the guild to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.guilds.GatewayGuild], typing.Optional[hikari.guilds.GatewayGuild A tuple of the old cached guild object if found (else  builtins.None ) and the object of the guild that was added to the cache if it could be added (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_guild_channels", "u": 41, "d": "Remove all guild channels from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_guild_channels_for_guild", "u": 41, "d": "Remove guild channels from the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove cached channels for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_guild_channel", "u": 41, "d": "Remove a guild channel from the cache. Parameters      channel_id : hikari.snowflakes.Snowflakeish The ID of the guild channel to remove from the cache. Returns    - typing.Optional[hikari.channels.GuildChannel] The object of the guild channel that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_guild_channel", "u": 41, "d": "Add a guild channel to the cache. Parameters      channel : hikari.channels.GuildChannel The guild channel based object to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_guild_channel", "u": 41, "d": "Update a guild channel in the cache, Parameters      channel : hikari.channels.GuildChannel The object of the channel to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.channels.GuildChannel], typing.Optional[hikari.channels.GuildChannel A tuple of the old cached guild channel if found (else  builtins.None ) and the new cached guild channel if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_invites", "u": 41, "d": "Remove all the invite objects from the cache. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of invite code strings to objects of the invites that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_invites_for_guild", "u": 41, "d": "Remove the invite objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of invite code strings to objects of the invites that were removed from the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_invites_for_channel", "u": 41, "d": "Remove the invite objects in the cache for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove invite objects for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to remove invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of invite code strings to objects of the invites that were removed from the cache for the specified channel.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_invite", "u": 41, "d": "Remove an invite object from the cache. Parameters      code : str The string code of the invite to remove from the cache. Returns    - typing.Optional[hikari.invites.InviteWithMetadata] The object of the invite that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_invite", "u": 41, "d": "Add an invite object to the cache. Parameters      invite : hikari.invites.InviteWithMetadata The object of the invite to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_invite", "u": 41, "d": "Update an invite in the cache. Parameters      invite : hikari.invites.InviteWithMetadata The object of the invite to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.invites.InviteWithMetadata], typing.Optional[hikari.invites.InviteWithMetadata A tuple of the old cached invite object if found (else  builtins.None ) and the new cached invite object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_me", "u": 41, "d": "Remove the own user object from the cache. Returns    - typing.Optional[hikari.users.OwnUser] The own user object that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_me", "u": 41, "d": "Set the own user object in the cache. Parameters      user : hikari.users.OwnUser The own user object to set in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_me", "u": 41, "d": "Update the own user entry in the cache. Parameters      user : hikari.users.OwnUser The own user object to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.users.OwnUser], typing.Optional[hikari.users.OwnUser A tuple of the old cached own user object if found (else  builtins.None ) and the new cached own user object if it could be cached, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_members", "u": 41, "d": "Remove all the guild members in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member A view of guild IDs to views of user IDs to objects of the members that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_members_for_guild", "u": 41, "d": "Remove the members for a specific guild from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove cached members for.  ! note This will skip members that are being referenced by other entries in the cache; a matching voice state will keep a member entry alive. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member] The view of user IDs to the member objects that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_member", "u": 41, "d": "Remove a member object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove a member from the cache for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to remove a member from the cache for.  ! note You cannot delete a member entry that's being referenced by other entries in the cache; a matching voice state will keep a member entry alive. Returns    - typing.Optional[hikari.guilds.Member] The object of the member that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_member", "u": 41, "d": "Add a member object to the cache. Parameters      member : hikari.guilds.Member The object of the member to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_member", "u": 41, "d": "Update a member in the cache. Parameters      member : hikari.guilds.Member The object of the member to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.guilds.Member], typing.Optional[hikari.guilds.Member A tuple of the old cached member object if found (else  builtins.None ) and the new cached member object if it could be cached (else  builtins.None )", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_presences", "u": 41, "d": "Remove all the presences in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence A view of guild IDs to views of user IDs to objects of the presences that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_presences_for_guild", "u": 41, "d": "Remove the presences in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove presences for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] A view of user IDs to objects of the presences that were removed from the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_presence", "u": 41, "d": "Remove a presence from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove a presence for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to remove a presence for. Returns    - typing.Optional[hikari.presences.MemberPresence] The object of the presence that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_presence", "u": 41, "d": "Add a presence object to the cache. Parameters      presence : hikari.presences.MemberPresence The object of the presence to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_presence", "u": 41, "d": "Update a presence object in the cache. Parameters      presence : hikari.presences.MemberPresence The object of the presence to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.presences.MemberPresence], typing.Optional[hikari.presences.MemberPresence A tuple of the old cached invite object if found (else  builtins.None and the new cached invite object if it could be cached ( else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_roles", "u": 41, "d": "Remove all role objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_roles_for_guild", "u": 41, "d": "Remove role objects from the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove roles for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were removed from the cache for the specific guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_role", "u": 41, "d": "Remove a role object form the cache. Parameters      role_id : hikari.snowflakes.Snowflakeish The ID of the role to remove from the cache. Returns    - typing.Optional[hikari.guilds.Role] The object of the role that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_role", "u": 41, "d": "Add a role object to the cache. Parameters      role : hikari.guilds.Role The object of the role to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_role", "u": 41, "d": "Update a role in the cache. Parameters      role : hikari.guilds.Role The object of the role to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.guilds.Role], typing.Optional[hikari.guilds.Role A tuple of the old cached role object if found (else  builtins.None and the new cached role object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_voice_states", "u": 41, "d": "Remove all voice state objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState A view of guild IDs to views of user IDs to objects of the voice states that were removed from the states.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_voice_states_for_guild", "u": 41, "d": "Clear the voice state objects cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to the voice state objects that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_voice_states_for_channel", "u": 41, "d": "Remove the voice state objects cached for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove voice states for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to remove voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice state that were removed from the cache for the specified channel.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_voice_state", "u": 41, "d": "Remove a voice state object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild the voice state to remove is related to. user_id : hikari.snowflakes.Snowflakeish The ID of the user who the voice state to remove belongs to. Returns    - typing.Optional[hikari.voices.VoiceState] The object of the voice state that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_voice_state", "u": 41, "d": "Add a voice state object to the cache. Parameters      voice_state : hikari.voices.VoiceState The object of the voice state to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_voice_state", "u": 41, "d": "Update a voice state object in the cache. Parameters      voice_state : hikari.voices.VoiceState The object of the voice state to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.voices.VoiceState], typing.Optional[hikari.voices.VoiceState A tuple of the old cached voice state if found (else  builtins.None ) and the new cached voice state object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.clear_messages", "u": 41, "d": "Remove all message objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.messages.Message] A view of message objects that were removed from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.delete_message", "u": 41, "d": "Remove a message object from the cache. Parameters      message_id : hikari.snowflakes.Snowflakeish The ID of the messages to remove the cache. Returns    - typing.Optional[hikari.messages.Message] The object of the message that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.set_message", "u": 41, "d": "Add a message object to the cache. Parameters      message : hikari.messages.Message The object of the message to add to the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.update_message", "u": 41, "d": "Update a message in the cache. Parameters      message : typing.Union[hikari.messages.PartialMessage, hikari.messages.Message] The object of the message to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.messages.Message], typing.Optional[hikari.messages.Message A tuple of the old cached message object if found (else  builtins.None ) and the new cached message object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_emoji", "u": 41, "d": "Get a known custom emoji from the cache. Parameters      emoji_id : hikari.snowflakes.Snowflakeish The ID of the emoji to get from the cache. Returns    - typing.Optional[hikari.emojis.KnownCustomEmoji] The object of the emoji that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_emojis_view", "u": 41, "d": "Get a view of the known custom emoji objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of the known custom emojis found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_emojis_view_for_guild", "u": 41, "d": "Get a view of the known custom emojis cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached emoji objects for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of emojis found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_guild", "u": 41, "d": "Get a guild from the cache.  ! warning This will return a guild regardless of whether it is available or not. To only query available guilds, use  get_available_guild instead. Likewise, to only query unavailable guilds, use  get_unavailable_guild . Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_available_guild", "u": 41, "d": "Get the object of an available guild from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_unavailable_guild", "u": 41, "d": "Get the object of a unavailable guild from the cache.  ! note Unlike  Cache.get_available_guild , the objects returned by this method will likely be out of date and inaccurate as they are considered unavailable, meaning that we are not receiving gateway events for this guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_available_guilds_view", "u": 41, "d": "Get a view of the available guild objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] A view of guild IDs to the guild objects found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_unavailable_guilds_view", "u": 41, "d": "Get a view of the unavailable guild objects in the cache.  ! note Unlike  Cache.get_available_guilds_view , the objects returned by this method will likely be out of date and inaccurate as they are considered unavailable, meaning that we are not receiving gateway events for this guild. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] A view of guild IDs to the guild objects found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_guild_channel", "u": 41, "d": "Get a guild channel from the cache. Parameters      channel_id : hikari.snowflakes.Snowflakeish The ID of the guild channel to get from the cache. Returns    - typing.Optional[hikari.channels.GuildChannel] The object of the guild channel that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_guild_channels_view", "u": 41, "d": "Get a view of the guild channels in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_guild_channels_view_for_guild", "u": 41, "d": "Get a view of the guild channels in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_invite", "u": 41, "d": "Get an invite object from the cache. Parameters      code : str The string code of the invite to get from the cache. Returns    - typing.Optional[hikari.invites.InviteWithMetadata] The object of the invite that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_invites_view", "u": 41, "d": "Get a view of the invite objects in the cache. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of string codes to objects of the invites that were found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_invites_view_for_guild", "u": 41, "d": "Get a view of the invite objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of string code to objects of the invites that were found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_invites_view_for_channel", "u": 41, "d": "Get a view of the invite objects in the cache for a specified channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get invite objects for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to get invite objects for. Returns    - CacheView[str, invites.InviteWithMetadata] A view of string codes to objects of the invites there were found in the cache for the specified channel.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_me", "u": 41, "d": "Get the own user object from the cache. Returns    - typing.Optional[hikari.users.OwnUser] The own user object that was found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_member", "u": 41, "d": "Get a member object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish user_id : hikari.snowflakes.Snowflakeish Returns    - typing.Optional[hikari.guilds.Member] The object of the member found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_members_view", "u": 41, "d": "Get a view of all the members objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member A view of guild IDs to views of user IDs to objects of the members that were found from the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_members_view_for_guild", "u": 41, "d": "Get a view of the members cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached member view for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member] The view of user IDs to the members cached for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_message", "u": 41, "d": "Get a message object from the cache. Parameters      message_id : hikari.snowflakes.Snowflakeish The ID of the message to get from the cache. Returns    - typing.Optional[hikari.messages.Message] The object of the message found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_messages_view", "u": 41, "d": "Get a view of all the message objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.messages.Message] A view of message objects found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_presence", "u": 41, "d": "Get a presence object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get a presence for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to get a presence for. Returns    - typing.Optional[hikari.presences.MemberPresence] The object of the presence that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_presences_view", "u": 41, "d": "Get a view of all the presence objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake A view of guild IDs to views of user IDs to objects of the presences found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_presences_view_for_guild", "u": 41, "d": "Get a view of the presence objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached presence objects for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] A view of user IDs to objects of the presence found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_role", "u": 41, "d": "Get a role object from the cache. Parameters      role_id : hikari.snowflakes.Snowflakeish The ID of the role to get from the cache. Returns    - typing.Optional[hikari.guilds.Role] The object of the role found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_roles_view", "u": 41, "d": "Get a view of all the role objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_roles_view_for_guild", "u": 41, "d": "Get a view of the roles in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached roles for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were found in the cache for the specified guild.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_user", "u": 41, "d": "Get a user object from the cache. Parameters      user_id : hikari.snowflakes.Snowflakeish The ID of the user to get from the cache. Returns    - typing.Optional[hikari.users.User] The object of the user that was found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_users_view", "u": 41, "d": "Get a view of the user objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.users.User] The view of user IDs to the users found in the cache.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_voice_state", "u": 41, "d": "Get a voice state object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get a voice state for. user_id :hikari.snowflakes.Snowflakeish The ID of the user to get a voice state for. Returns    - typing.Optional[hikari.voices.VoiceState] The object of the voice state that was found in the cache, or  builtins.None .", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_voice_states_view", "u": 41, "d": "Get a view of all the voice state objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState A view of guild IDs to views of user IDs to objects of the voice states that were found in the cache,", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_voice_states_view_for_channel", "u": 41, "d": "Get a view of the voice states cached for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached voice states for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to get the cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice states found cached for the specified channel.", "f": 1}, {"r": "hikari.api.cache.MutableCache.get_voice_states_view_for_guild", "u": 41, "d": "Get a view of the voice states cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice states found cached for the specified guild.", "f": 1}, {"r": "hikari.api.shard", "u": 42, "d": "Provides an interface for gateway shard implementations to conform to."}, {"r": "hikari.api.shard.GatewayDataFormat", "u": 42, "d": "Format of inbound gateway payloads."}, {"r": "hikari.api.shard.GatewayDataFormat.name", "u": 42, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.api.shard.GatewayDataFormat.value", "u": 42, "d": "Return the value of the enum member."}, {"r": "hikari.api.shard.GatewayDataFormat.JSON", "u": 42, "d": "Javascript serialized object notation."}, {"r": "hikari.api.shard.GatewayDataFormat.ETF", "u": 42, "d": "Erlang transmission format."}, {"r": "hikari.api.shard.GatewayCompression", "u": 42, "d": "Types of gateway compression that may be supported."}, {"r": "hikari.api.shard.GatewayCompression.name", "u": 42, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.api.shard.GatewayCompression.value", "u": 42, "d": "Return the value of the enum member."}, {"r": "hikari.api.shard.GatewayCompression.TRANSPORT_ZLIB_STREAM", "u": 42, "d": "Transport compression using ZLIB."}, {"r": "hikari.api.shard.GatewayCompression.PAYLOAD_ZLIB_STREAM", "u": 42, "d": "Payload compression using ZLIB."}, {"r": "hikari.api.shard.GatewayShard", "u": 42, "d": "Interface for a definition of a V8 compatible websocket gateway. Each instance should represent a single shard."}, {"r": "hikari.api.shard.GatewayShard.heartbeat_latency", "u": 42, "d": "Return the shard's most recent heartbeat latency. Returns    - builtins.float Heartbeat latency measured in seconds. If the information is not yet available, then this will be  float('nan') instead."}, {"r": "hikari.api.shard.GatewayShard.id", "u": 42, "d": "Return the shard ID for this shard. Returns    - builtins.int The integer 0-based shard ID."}, {"r": "hikari.api.shard.GatewayShard.intents", "u": 42, "d": "Return the intents set on this shard. Returns    - hikari.intents.Intents The intents being used on this shard."}, {"r": "hikari.api.shard.GatewayShard.is_alive", "u": 42, "d": "Return  builtins.True if the shard is alive and connected. Returns    - builtins.bool  builtins.True if connected, or  builtins.False if not."}, {"r": "hikari.api.shard.GatewayShard.shard_count", "u": 42, "d": "Return the total number of shards expected in the entire application. Returns    - builtins.int A number of shards greater than or equal to 1."}, {"r": "hikari.api.shard.GatewayShard.get_user_id", "u": 42, "d": "Return the user ID. If the shard has not connected fully yet, this should wait until the ID is set before returning. Returns    - hikari.snowflakes.Snowflake The user ID for the application user.", "f": 1}, {"r": "hikari.api.shard.GatewayShard.close", "u": 42, "d": "Close the websocket if it is connected, otherwise do nothing.", "f": 1}, {"r": "hikari.api.shard.GatewayShard.join", "u": 42, "d": "Wait indefinitely until the websocket closes permanently. This can be placed in a task and cancelled without affecting the websocket runtime itself.", "f": 1}, {"r": "hikari.api.shard.GatewayShard.start", "u": 42, "d": "Start the shard, wait for it to become ready.", "f": 1}, {"r": "hikari.api.shard.GatewayShard.update_presence", "u": 42, "d": "Update the presence of the shard user. If the shard is not alive, no physical data will be sent, however, the new presence settings will be remembered for when the shard does connect. Other Parameters         idle_since : hikari.undefined.UndefinedNoneOr[datetime.datetime] The datetime that the user started being idle. If undefined, this will not be changed. afk : hikari.undefined.UndefinedOr[builtins.bool] If  builtins.True , the user is marked as AFK. If  builtins.False , the user is marked as being active. If undefined, this will not be changed. activity : hikari.undefined.UndefinedNoneOr[hikari.presences.Activity] The activity to appear to be playing. If undefined, this will not be changed. status : hikari.undefined.UndefinedOr[hikari.presences.Status] The web status to show. If undefined, this will not be changed.", "f": 1}, {"r": "hikari.api.shard.GatewayShard.update_voice_state", "u": 42, "d": "Update the voice state for this shard in a given guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild or guild ID to update the voice state for. channel : typing.Optional[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel The channel or channel ID to update the voice state for. If  builtins.None then the bot will leave the voice channel that it is in for the given guild. self_mute : builtins.bool If  builtins.True , the bot will mute itself in that voice channel. If  builtins.False , then it will unmute itself. self_deaf : builtins.bool If  builtins.True , the bot will deafen itself in that voice channel. If  builtins.False , then it will undeafen itself.", "f": 1}, {"r": "hikari.api.shard.GatewayShard.request_guild_members", "u": 42, "d": "Request for a guild chunk. Parameters      guild: hikari.guilds.Guild The guild to request chunk for. Other Parameters         include_presences: hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to request presences. query: builtins.str If not    , request the members which username starts with the string. limit: builtins.int Maximum number of members to send matching the query. users: hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.users.User If provided, the users to request for. nonce: hikari.undefined.UndefinedOr[builtins.str] If provided, the nonce to be sent with guild chunks.  ! note To request the full list of members, set  query to    (empty string) and  limit to  0 . Raises    ValueError When trying to specify  users with  query / limit , if  limit is not between 0 and 100, both inclusive or if  users length is over 100. hikari.errors.MissingIntentError When trying to request presences without the  GUILD_MEMBERS or when trying to request the full list of members without  GUILD_PRESENCES .", "f": 1}, {"r": "hikari.api.special_endpoints", "u": 43, "d": "Special additional endpoints used by the REST API."}, {"r": "hikari.api.special_endpoints.TypingIndicator", "u": 43, "d": "Result type of  hikari.api.rest.RESTClient.trigger_typing . This is an object that can either be awaited like a coroutine to trigger the typing indicator once, or an async context manager to keep triggering the typing indicator repeatedly until the context finishes.  ! note This is a helper class that is used by  hikari.api.rest.RESTClient . You should only ever need to use instances of this class that are produced by that API."}, {"r": "hikari.api.special_endpoints.GuildBuilder", "u": 43, "d": "Result type of  hikari.api.rest.RESTClient.guild_builder . This is used to create a guild in a tidy way using the HTTP API, since the logic behind creating a guild on an API level is somewhat confusing and detailed.  ! note This is a helper class that is used by  hikari.api.rest.RESTClient . You should only ever need to use instances of this class that are produced by that API, thus, any details about the constructor are omitted from the following examples for brevity. Examples     Creating an empty guild.   guild = await rest.guild_builder(\"My Server!\").create()   Creating a guild with an icon   from hikari.files import WebResourceStream guild_builder = rest.guild_builder(\"My Server!\") guild_builder.icon = WebResourceStream(\"cat.png\", \"http:  .\") guild = await guild_builder.create()   Adding roles to your guild.   from hikari.permissions import Permissions guild_builder = rest.guild_builder(\"My Server!\") everyone_role_id = guild_builder.add_role(\"@everyone\") admin_role_id = guild_builder.add_role(\"Admins\", permissions=Permissions.ADMINISTRATOR) await guild_builder.create()    ! warning The first role must always be the  @everyone role.  ! note If you call  add_role , the default roles provided by discord will be created. This also applies to the  add_ functions for text channels/voice channels/categories.  ! note Functions that return a  hikari.snowflakes.Snowflake do  not provide the final ID that the object will have once the API call is made. The returned IDs are only able to be used to re-reference particular objects while building the guild format. This is provided to allow creation of channels within categories, and to provide permission overwrites. Adding a text channel to your guild.   guild_builder = rest.guild_builder(\"My Server!\") category_id = guild_builder.add_category(\"My safe place\") channel_id = guild_builder.add_text_channel(\"general\", parent_id=category_id) await guild_builder.create()   Method generated by attrs for class GuildBuilder."}, {"r": "hikari.api.special_endpoints.GuildBuilder.name", "u": 43, "d": "Name of the guild to create. Returns    - builtins.str The guild name."}, {"r": "hikari.api.special_endpoints.GuildBuilder.create", "u": 43, "d": "Send the request to Discord to create the guild. The application user will be added to this guild as soon as it is created. All IDs that were provided when building this guild will become invalid and will be replaced with real IDs. Returns    - hikari.guilds.RESTGuild The created guild. Raises    hikari.errors.BadRequestError If any values set in the guild builder are invalid. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are already in 10 guilds. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.api.special_endpoints.GuildBuilder.add_role", "u": 43, "d": "Create a role.  ! warning The first role you create must always be the  @everyone role. Parameters      name : builtins.str The role's name. Other Parameters         permissions : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the permissions for the role. color : hikari.undefined.UndefinedOr[hikari.colors.Colorish] If provided, the role's color. colour : hikari.undefined.UndefinedOr[hikari.colors.Colorish] An alias for  color . hoist : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to hoist the role. mentionable : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to make the role mentionable. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.snowflakes.Snowflake The dummy ID for this role that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID. Raises    builtins.ValueError If you are defining the first role, but did not name it  @everyone . builtins.TypeError If you specify both  color and  colour together or if you try to specify  color ,  colour ,  hoisted ,  mentionable or  position for the  @everyone role.", "f": 1}, {"r": "hikari.api.special_endpoints.GuildBuilder.add_category", "u": 43, "d": "Create a category channel. Parameters      name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the category. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the category. Returns    - hikari.snowflakes.Snowflake The dummy ID for this channel that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID.", "f": 1}, {"r": "hikari.api.special_endpoints.GuildBuilder.add_text_channel", "u": 43, "d": "Create a text channel. Parameters      name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the channels topic. Maximum 1024 characters. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mark the channel as NSFW. rate_limit_per_user : hikari.undefined.UndefinedOr[builtins.int] If provided, the ammount of seconds a user has to wait before being able to send another message in the channel. Maximum 21600 seconds. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. Returns    - hikari.snowflakes.Snowflake The dummy ID for this channel that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID.", "f": 1}, {"r": "hikari.api.special_endpoints.GuildBuilder.add_voice_channel", "u": 43, "d": "Create a voice channel. Parameters      name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). user_limit : hikari.undefined.UndefinedOr[builtins.int] If provided, the maximum users in the channel at once. Must be between 0 and 99 with 0 meaning no limit. bitrate : hikari.undefined.UndefinedOr[builtins.int] If provided, the bitrate for the channel. Must be between 8000 and 96000 or 8000 and 128000 for VIP servers. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. Returns    - hikari.snowflakes.Snowflake The dummy ID for this channel that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID.", "f": 1}, {"r": "hikari.api.special_endpoints.GuildBuilder.default_message_notifications", "u": 43, "d": "Default message notification level that can be overwritten. If not overridden, this will use the Discord default level."}, {"r": "hikari.api.special_endpoints.GuildBuilder.explicit_content_filter_level", "u": 43, "d": "Explicit content filter level that can be overwritten. If not overridden, this will use the Discord default level."}, {"r": "hikari.api.special_endpoints.GuildBuilder.icon", "u": 43, "d": "Guild icon to use that can be overwritten. If not overridden, the guild will not have an icon."}, {"r": "hikari.api.special_endpoints.GuildBuilder.region", "u": 43, "d": "Guild voice channel region to use that can be overwritten. If not overridden, the guild will use the default voice region for Discord."}, {"r": "hikari.api.special_endpoints.GuildBuilder.verification_level", "u": 43, "d": "Verification level required to join the guild that can be overwritten. If not overridden, the guild will use the default verification level for Discord."}, {"r": "hikari.api.entity_factory", "u": 44, "d": "Core interface for an object that serializes/deserializes API objects."}, {"r": "hikari.api.entity_factory.EntityFactory", "u": 44, "d": "Interface for components that serialize and deserialize JSON payloads."}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_own_connection", "u": 44, "d": "Parse a raw payload from Discord into an own connection object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.applications.OwnConnection The deserialized \"own connection\" object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_own_guild", "u": 44, "d": "Parse a raw payload from Discord into an own guild object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.applications.OwnGuild The deserialized \"own guild\" object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_application", "u": 44, "d": "Parse a raw payload from Discord into an application object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.applications.Application The deserialized application object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_audit_log", "u": 44, "d": "Parse a raw payload from Discord into an audit log object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.audit_logs.AuditLog The deserialized audit log object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_channel_follow", "u": 44, "d": "Parse a raw payload from Discord into a channel follow object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.ChannelFollow The deserialized channel follow object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_permission_overwrite", "u": 44, "d": "Parse a raw payload from Discord into a permission overwrite object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.PermissionOverwrite The deserialized permission overwrite object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.serialize_permission_overwrite", "u": 44, "d": "Serialize a permission overwrite object to a json serializable dict. Parameters      overwrite : hikari.channels.PermissionOverwrite The permission overwrite object to serialize. Returns    - hikari.internal.data_binding.JSONObject The serialized representation of the permission overwrite.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_partial_channel", "u": 44, "d": "Parse a raw payload from Discord into a partial channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.PartialChannel The deserialized \"partial channel\" object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_dm", "u": 44, "d": "Parse a raw payload from Discord into a DM channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.DMChannel The deserialized DM channel object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_group_dm", "u": 44, "d": "Parse a raw payload from Discord into a group DM channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.GroupDMChannel The deserialized group DM object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_category", "u": 44, "d": "Parse a raw payload from Discord into a guild category object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildCategory The deserialized guild category object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_text_channel", "u": 44, "d": "Parse a raw payload from Discord into a guild text channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildTextChannel The deserialized guild text channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_news_channel", "u": 44, "d": "Parse a raw payload from Discord into a guild news channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.snowflakes.Snowflake The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildNewsChannel The deserialized guild news channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_store_channel", "u": 44, "d": "Parse a raw payload from Discord into a guild store channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.snowflakes.Snowflake The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildStoreChannel The deserialized guild store channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_voice_channel", "u": 44, "d": "Parse a raw payload from Discord into a guild voice channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.snowflakes.Snowflake The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is npt included in the channel's payload. Returns    - hikari.channels.GuildVoiceChannel The deserialized guild voice channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_channel", "u": 44, "d": "Parse a raw payload from Discord into a channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this channel belongs to. This will be ignored for DM and group DM channels and will be prioritised over  \"guild_id\" in the payload when passed.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.PartialChannel The deserialized partial channel-derived object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload of a guild channel.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_embed", "u": 44, "d": "Parse a raw payload from Discord into an embed object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.embeds.Embed The deserialized embed object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.serialize_embed", "u": 44, "d": "Serialize an embed object to a json serializable dict. Parameters      embed : hikari.embeds.Embed The embed object to serialize. Returns    - typing.Tuple[hikari.internal.data_binding.JSONObject, typing.List[hikari.files.Resource A tuple with two items in it. The first item will be the serialized embed representation. The second item will be a list of resources to upload with the embed.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_unicode_emoji", "u": 44, "d": "Parse a raw payload from Discord into a unicode emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.emojis.UnicodeEmoji The deserialized unicode emoji object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_custom_emoji", "u": 44, "d": "Parse a raw payload from Discord into a custom emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.emojis.CustomEmoji The deserialized custom emoji object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_known_custom_emoji", "u": 44, "d": "Parse a raw payload from Discord into a known custom emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. guild_id : hikari.snowflakes.Snowflake The ID of the guild this emoji belongs to. This is used to ensure that the guild a known custom emoji belongs to is remembered by allowing for a context based artificial  guild_id attribute. Returns    - hikari.emojis.KnownCustomEmoji The deserialized \"known custom emoji\" object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_emoji", "u": 44, "d": "Parse a raw payload from Discord into an emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.emojis.UnicodeEmoji or hikari.emojis.CustomEmoji The deserialized custom or unicode emoji object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_gateway_bot", "u": 44, "d": "Parse a raw payload from Discord into a gateway bot object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.sessions.GatewayBot The deserialized gateway bot object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_widget", "u": 44, "d": "Parse a raw payload from Discord into a guild widget object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.GuildWidget The deserialized guild widget object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_welcome_screen", "u": 44, "d": "Parse a raw payload from Discord into a guild welcome screen object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.WelcomeScreen The deserialized guild welcome screen object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.serialize_welcome_channel", "u": 44, "d": "Serialize a welcome channel object to a json serializable dict. Parameters      welcome_channel : hikari.guilds.WelcomeChannel The guild welcome channel object to serialize. Returns    - hikari.internal.data_binding.JSONObject The serialized representation of the welcome channel.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_member", "u": 44, "d": "Parse a raw payload from Discord into a member object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         user : hikari.undefined.UndefinedOr[hikari.users.User] The user to attach to this member, should only be passed in situations where \"user\" is not included in the payload. guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this member belongs to. If this is specified then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id covers cases such as the GUILD_CREATE gateway event and GET Guild Member where  \"guild_id\" is not included in the returned payload. Returns    - hikari.guilds.Member The deserialized member object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_role", "u": 44, "d": "Parse a raw payload from Discord into a role object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. guild_id : hikari.snowflakes.Snowflake The ID of the guild this role belongs to. This is used to ensure that the guild a role belongs to is remembered by allowing for a context based artificial  guild_id attribute. Returns    - hikari.guilds.Role The deserialized role object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_partial_integration", "u": 44, "d": "Parse a raw payload from Discord into a partial integration object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.PartialIntegration The deserialized partial integration object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_integration", "u": 44, "d": "Parse a raw payload from Discord into an integration object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this integration belongs to. If this is specified then this will be prioritised over  \"guild_id\" in the payload. Returns    - hikari.guilds.Integration The deserialized integration object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload for the payload of the integration.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_member_ban", "u": 44, "d": "Parse a raw payload from Discord into a guild member ban object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.GuildMemberBan The deserialized guild member ban object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_guild_preview", "u": 44, "d": "Parse a raw payload from Discord into a guild preview object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.GuildPreview The deserialized guild preview object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_rest_guild", "u": 44, "d": "Parse a raw payload from Discord into a guild object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.RESTGuild The deserialized guild object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_gateway_guild", "u": 44, "d": "Parse a raw payload from Discord into a guild object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - GatewayGuildDefinition The deserialized guild object and the internal collections as maps of  hikari.snowflakes.Snowflake mapping to  hikari.channels.GuildChannel ,  hikari.guilds.Member ,  hikari.presences.MemberPresence ,  hikari.guilds.Role , and  hikari.emojis.KnownCustomEmoji . This is provided in several components to allow separate caching and linking between entities in various relational cache implementations internally.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_vanity_url", "u": 44, "d": "Parse a raw payload from Discord into a vanity url object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.invites.VanityURL The deserialized vanity url object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_invite", "u": 44, "d": "Parse a raw payload from Discord into an invite object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.invites.Invite The deserialized invite object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_invite_with_metadata", "u": 44, "d": "Parse a raw payload from Discord into a invite with metadata object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.invites.InviteWithMetadata The deserialized invite with metadata object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_partial_message", "u": 44, "d": "Parse a raw payload from Discord into a partial message object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.messages.PartialMessage The deserialized partial message object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_message", "u": 44, "d": "Parse a raw payload from Discord into a message object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.messages.Message The deserialized message object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_member_presence", "u": 44, "d": "Parse a raw payload from Discord into a member presence object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild the presence belongs to. If this is specified then it is prioritised over  guild_id in the payload.  ! note At the time of writing, the only place where  guild_id will be mandatory is when parsing presences sent in a  GUILD_CREATE event from Discord, since the  guild_id attribute in the payload will have been omitted for redundancy. Returns    - hikari.presences.MemberPresence The deserialized member presence object. Raises    KeyError If  guild_id is not an attribute of the  payload dict, and no guild ID was passed for the  guild_id parameter. If this is raised, no guild ID info was provided anywhere.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_template", "u": 44, "d": "Parse a raw payload from Discord into a template object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.templates.Template The deserialized template object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_user", "u": 44, "d": "Parse a raw payload from Discord into a user object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.users.User The deserialized user object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_my_user", "u": 44, "d": "Parse a raw payload from Discord into a user object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.users.OwnUser The deserialized user object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_voice_state", "u": 44, "d": "Parse a raw payload from Discord into a voice state object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this voice state belongs to. If this is specified then this will be prioritised over  \"guild_id\" in the payload. member : hikari.undefined.UndefinedOr[hikari.guilds.Member] The object of the member this voice state belongs to. If this is specified then this will be prioritised over  \"member\" in the payload.  ! note At the time of writing,  GUILD_CREATE events are the only known place where neither  guild_id nor  member will be keys on the payload. In this case, you will need to provide the former parameters explicitly. Returns    - hikari.voices.VoiceState The deserialized voice state object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload for the payload of the voice state. This will also be raised if no  member data was passed in any acceptable place.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_voice_region", "u": 44, "d": "Parse a raw payload from Discord into a voice region object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.voices.VoiceRegion The deserialized voice region object.", "f": 1}, {"r": "hikari.api.entity_factory.EntityFactory.deserialize_webhook", "u": 44, "d": "Parse a raw payload from Discord into a webhook object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.webhooks.Webhook The deserialized webhook object.", "f": 1}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition", "u": 44, "d": "A structure for handling entities within guild create and update events. Method generated by attrs for class GatewayGuildDefinition."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.channels", "u": 44, "d": "Mapping of channel IDs to the channels that belong to the guild. Will be  builtins.None when returned by guild update gateway events rather than create."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.emojis", "u": 44, "d": "Mapping of emoji IDs to the emojis that belong to the guild."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.guild", "u": 44, "d": "Object of the guild the definition is for."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.members", "u": 44, "d": "Mapping of user IDs to the members that belong to the guild. Will be  builtins.None when returned by guild update gateway events rather than create.  ! note This may be a partial mapping of members in the guild."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.presences", "u": 44, "d": "Mapping of user IDs to the presences that are active in the guild. Will be  builtins.None when returned by guild update gateway events rather than create.  ! note This may be a partial mapping of presences active in the guild."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.roles", "u": 44, "d": "Mapping of role IDs to the roles that belong to the guild."}, {"r": "hikari.api.entity_factory.GatewayGuildDefinition.voice_states", "u": 44, "d": "Mapping of user IDs to the voice states that are active in the guild.  ! note This may be a partial mapping of voice states active in the guild."}, {"r": "hikari.api.event_factory", "u": 45, "d": "Component that provides the ability to generate event models."}, {"r": "hikari.api.event_factory.EventFactory", "u": 45, "d": "Interface for components that deserialize JSON events."}, {"r": "hikari.api.event_factory.EventFactory.deserialize_channel_create_event", "u": 45, "d": "Parse a raw payload from Discord into a channel create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.ChannelCreateEvent The parsed channel create event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_channel_update_event", "u": 45, "d": "Parse a raw payload from Discord into a channel update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_channel : typing.Optional[hikari.channels.GuildChannel] The guild channel object or  builtins.None . Returns    - hikari.events.channel_events.ChannelUpdateEvent The parsed event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_channel_delete_event", "u": 45, "d": "Parse a raw payload from Discord into a channel delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.ChannelDeleteEvent The parsed channel delete event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_channel_pins_update_event", "u": 45, "d": "Parse a raw payload from Discord into a channel pins update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.PinsUpdateEvent The parsed channel pins update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_webhook_update_event", "u": 45, "d": "Parse a raw payload from Discord into a webhook update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.WebhookUpdateEvent The parsed webhook update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_invite_create_event", "u": 45, "d": "Parse a raw payload from Discord into an invite create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.InviteCreateEvent The parsed invite create event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_invite_delete_event", "u": 45, "d": "Parse a raw payload from Discord into an invite delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.InviteDeleteEvent The parsed invite delete event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_typing_start_event", "u": 45, "d": "Parse a raw payload from Discord into a typing start event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.typing_events.TypingEvent The parsed typing start event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_create_event", "u": 45, "d": "Parse a raw payload from Discord into a guild create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.GuildAvailableEvent The parsed guild create event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_update_event", "u": 45, "d": "Parse a raw payload from Discord into a guild update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_guild : typing.Optional[hikari.guilds.Guild] The guild object or  builtins.None . Returns    - hikari.events.guild_events.GuildUpdateEvent The parsed guild update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_leave_event", "u": 45, "d": "Parse a raw payload from Discord into a guild leave event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.GuildLeaveEvent The parsed guild leave event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_unavailable_event", "u": 45, "d": "Parse a raw payload from Discord into a guild unavailable event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.GuildUnavailableEvent The parsed guild unavailable event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_ban_add_event", "u": 45, "d": "Parse a raw payload from Discord into a guild ban add event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.BanCreateEvent The parsed guild ban add event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_ban_remove_event", "u": 45, "d": "Parse a raw payload from Discord into a guild ban remove event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.BanDeleteEvent The parsed guild ban remove event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_emojis_update_event", "u": 45, "d": "Parse a raw payload from Discord into a guild emojis update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_emojis : typing.Optional[typing.Sequence[hikari.emojis.KnownCustomEmoji The sequence of emojis or  builtins.None . Returns    - hikari.events.guild_events.EmojisUpdateEvent The parsed guild emojis update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_integration_create_event", "u": 45, "d": "Parse a raw payload from Discord into an integration create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.IntegrationCreateEvent The parsed integration create event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_integration_delete_event", "u": 45, "d": "Parse a raw payload from Discord into an integration delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.IntegrationDeleteEvent The parsed integration delete event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_integration_update_event", "u": 45, "d": "Parse a raw payload from Discord into an integration update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.IntegrationUpdateEvent The parsed integration update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_presence_update_event", "u": 45, "d": "Parse a raw payload from Discord into a presence update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_presence: typing.Optional[hikari.presences.MemberPresence] The presence object or  builtins.None . Returns    - hikari.events.guild_events.PresenceUpdateEvent The parsed presence update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_member_add_event", "u": 45, "d": "Parse a raw payload from Discord into a guild member add event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.member_events.MemberCreateEvent The parsed guild member add event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_member_update_event", "u": 45, "d": "Parse a raw payload from Discord into a guild member update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_member: typing.Optional[hikari.guilds.Member] The member object or  builtins.None . Returns    - hikari.events.member_events.MemberUpdateEvent The parsed guild member update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_member_remove_event", "u": 45, "d": "Parse a raw payload from Discord into a guild member remove event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.member_events.MemberDeleteEvent The parsed guild member remove event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_role_create_event", "u": 45, "d": "Parse a raw payload from Discord into a guild role create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.role_events.RoleCreateEvent The parsed guild role create event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_role_update_event", "u": 45, "d": "Parse a raw payload from Discord into a guild role update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_role: typing.Optional[hikari.guilds.Role] The role object or  builtins.None . Returns    - hikari.events.role_events.RoleUpdateEvent The parsed guild role update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_role_delete_event", "u": 45, "d": "Parse a raw payload from Discord into a guild role delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.role_events.RoleDeleteEvent The parsed guild role delete event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_starting_event", "u": 45, "d": "Build a starting event object. Returns    - hikari.events.lifetime_events.StartingEvent The built starting event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_started_event", "u": 45, "d": "Build a started event object. Returns    - hikari.events.lifetime_events.StartingEvent The built started event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_stopping_event", "u": 45, "d": "Build a starting event object. Returns    - hikari.events.lifetime_events.StartingEvent The built starting event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_stopped_event", "u": 45, "d": "Build a stopped event object. Returns    - hikari.events.lifetime_events.StartingEvent The built starting event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_create_event", "u": 45, "d": "Parse a raw payload from Discord into a message create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.message_events.MessageCreateEvent The parsed message create event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_update_event", "u": 45, "d": "Parse a raw payload from Discord into a message update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_message: typing.Optional[hikari.messages.PartialMessage] The message object or  builtins.None . Returns    - hikari.events.message_events.MessageUpdateEvent The parsed message update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_delete_event", "u": 45, "d": "Parse a raw payload from Discord into a message delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.message_events.MessageDeleteEvent The parsed message delete event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_delete_bulk_event", "u": 45, "d": "Parse a raw payload from Discord into a message delete bulk event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.message_events.MessageDeleteEvent The parsed message delete bulk event object. Raises    builtins.NotImplementedError If a bulk delete occurs in a DM channel.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_reaction_add_event", "u": 45, "d": "Parse a raw payload from Discord into a message reaction add event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionAddEvent The parsed message reaction add event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_reaction_remove_event", "u": 45, "d": "Parse a raw payload from Discord into a message reaction remove event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionDeleteEvent The parsed message reaction remove event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_reaction_remove_all_event", "u": 45, "d": "Parse a raw payload from Discord into a message reaction remove all event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionDeleteAllEvent The parsed message reaction remove all event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_message_reaction_remove_emoji_event", "u": 45, "d": "Parse a raw payload from Discord into a message reaction remove emoji event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionDeleteEmojiEvent The parsed message reaction remove emoji event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_ready_event", "u": 45, "d": "Parse a raw payload from Discord into a ready event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.shard_events.ShardReadyEvent The parsed ready event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_connected_event", "u": 45, "d": "Build a shard connected event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. Returns    - hikari.events.shard_events.ShardReadyEvent The built shard connected event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_disconnected_event", "u": 45, "d": "Build a shard disconnected event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. Returns    - hikari.events.shard_events.ShardReadyEvent The built shard disconnected event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_resumed_event", "u": 45, "d": "Build a shard resumed event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. Returns    - hikari.events.shard_events.ShardReadyEvent The built shard resumed event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_guild_member_chunk_event", "u": 45, "d": "Parse a raw payload from Discord into a member chunk event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.shard_events.MemberChunkEvent The parsed member chunk object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_own_user_update_event", "u": 45, "d": "Parse a raw payload from Discord into a own user update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_user: typing.Optional[hikari.users.OwnUser] The OwnUser object or  builtins.None . Returns    - hikari.events.user_events.OwnUserUpdateEvent The parsed own user update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_voice_state_update_event", "u": 45, "d": "Parse a raw payload from Discord into a voice state update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_state: typing.Optional[hikari.voices.VoiceState] The VoiceState object or  builtins.None . Returns    - hikari.events.voice_events.VoiceStateUpdateEvent The parsed voice state update event object.", "f": 1}, {"r": "hikari.api.event_factory.EventFactory.deserialize_voice_server_update_event", "u": 45, "d": "Parse a raw payload from Discord into a voice server update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.voice_events.VoiceServerUpdateEvent The parsed voice server update event object.", "f": 1}, {"r": "hikari.urls", "u": 46, "d": "API-wide URLs."}, {"r": "hikari.urls.BASE_URL", "u": 46, "d": "The base URL."}, {"r": "hikari.urls.REST_API_URL", "u": 46, "d": "The REST API URL."}, {"r": "hikari.urls.OAUTH2_API_URL", "u": 46, "d": "The OAUTH2 API URL."}, {"r": "hikari.urls.CDN_URL", "u": 46, "d": "The CDN URL."}, {"r": "hikari.files", "u": 3, "d": "Utilities and classes for interacting with files and web resources."}, {"r": "hikari.files.ensure_path", "u": 3, "d": "Convert a path-like object to a  pathlib.Path instance.", "f": 1}, {"r": "hikari.files.ensure_resource", "u": 3, "d": "Given a resource or string, convert it to a valid resource as needed. Parameters      url_or_resource : Resourceish The item to convert. Ff a  Resource is passed, it is simply returned again. Anything else is converted to a  Resource first. Returns    - typing.Optional[Resource] The resource to use, or  builtins.None if  builtins.None was input.", "f": 1}, {"r": "hikari.files.unwrap_bytes", "u": 3, "d": "Convert a byte-like object to bytes.", "f": 1}, {"r": "hikari.files.Pathish", "u": 3, "d": "Type hint representing a literal file or path. This may be one of: -  builtins.str path. -  os.PathLike derivative, such as  pathlib.PurePath and  pathlib.Path ."}, {"r": "hikari.files.Rawish", "u": 3, "d": "Type hint representing valid raw data types. This may be one of: -  bytes -  bytearray -  memoryview -  io.BytesIO -  io.StringIO (assuming UTF-8 encoding)."}, {"r": "hikari.files.Resourceish", "u": 3, "d": "Type hint representing a file or path to a file/URL/data URI. This may be one of: -  Resource or a derivative. -  builtins.str path. -  os.PathLike derivative, such as  pathlib.PurePath and  pathlib.Path . -  bytes -  bytearray -  memoryview -  io.BytesIO -  io.StringIO (assuming UTF-8 encoding)."}, {"r": "hikari.files.LazyByteIteratorish", "u": 3, "d": "Type hint representing an iterator/iterable of bytes. This may be one of: -  typing.AsyncIterator[bytes] -  typing.AsyncIterable[bytes] -  typing.Iterator[bytes] -  typing.Iterable[bytes] -  typing.AsyncIterator[str] (assuming UTF-8 encoding). -  typing.AsyncIterable[str] (assuming UTF-8 encoding). -  typing.Iterator[str] (assuming UTF-8 encoding). -  typing.Iterable[str] (assuming UTF-8 encoding). -  asyncio.StreamReader -  aiohttp.StreamReader "}, {"r": "hikari.files.AsyncReader", "u": 3, "d": "Protocol for reading a resource asynchronously using bit inception. This supports being used as an async iterable, although the implementation detail is left to each implementation of this class to define. Method generated by attrs for class AsyncReader."}, {"r": "hikari.files.AsyncReader.data_uri", "u": 3, "d": "Fetch the data URI. This reads the entire resource.", "f": 1}, {"r": "hikari.files.AsyncReader.read", "u": 3, "d": "Read the rest of the resource and return it in a  builtins.bytes object.", "f": 1}, {"r": "hikari.files.AsyncReader.filename", "u": 3, "d": "The filename of the resource."}, {"r": "hikari.files.AsyncReader.mimetype", "u": 3, "d": "The mimetype of the resource. May be  builtins.None if not known."}, {"r": "hikari.files.AsyncReaderContextManager", "u": 3, "d": "Context manager that returns a reader."}, {"r": "hikari.files.Resource", "u": 3, "d": "Base for any uploadable or downloadable representation of information. These representations can be streamed using bit inception for performance, which may result in significant decrease in memory usage for larger resources."}, {"r": "hikari.files.Resource.url", "u": 3, "d": "URL of the resource."}, {"r": "hikari.files.Resource.filename", "u": 3, "d": "Filename of the resource."}, {"r": "hikari.files.Resource.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.files.Resource.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.files.Resource.stream", "u": 3, "d": "Produce a stream of data for the resource. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. This will fetch the headers for the HTTP resource this object points to without downloading the entire content, which can be significantly faster if you are scanning file types in messages, for example. Returns    - AsyncReaderContextManager[AsyncReader] An async iterable of bytes to stream.", "f": 1}, {"r": "hikari.files.File", "u": 3, "d": "A resource that exists on the local machine's storage to be uploaded. Parameters      path : typing.Union[builtins.str, os.PathLike, pathlib.Path] The path to use.  ! note If passing a  pathlib.Path , this must not be a  pathlib.PurePath directly, as it will be used to expand tokens such as  ~ that denote the home directory, and    for relative paths. This will all be performed as required in an executor to prevent blocking the event loop. filename : typing.Optional[builtins.str] The filename to use. If this is  builtins.None , the name of the file is taken from the path instead. spoiler : bool Whether to mark the file as a spoiler in Discord. Defaults to  builtins.False ."}, {"r": "hikari.files.File.url", "u": 3, "d": "URL of the resource."}, {"r": "hikari.files.File.filename", "u": 3, "d": "Filename of the resource."}, {"r": "hikari.files.File.stream", "u": 3, "d": "Start streaming the resource using a thread pool executor. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run the blocking read operations in. If  builtins.None , the default executor for the running event loop will be used instead. head_only : builtins.bool Not used. Provided only to match the underlying interface. Returns    - AsyncReaderContextManager[FileReader] An async context manager that when entered, produces the data stream.", "f": 1}, {"r": "hikari.files.File.is_spoiler", "u": 3, "d": "Whether the file will be marked as a spoiler."}, {"r": "hikari.files.File.path", "u": 3, "d": "The path to the file."}, {"r": "hikari.files.File.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.files.File.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.files.FileReader", "u": 3, "d": "Abstract base for a file reader object. Various implementations have to exist in order to cater for situations where we cannot pass IO objects around (e.g. ProcessPoolExecutors, since they pickle things). Method generated by attrs for class FileReader."}, {"r": "hikari.files.FileReader.executor", "u": 3, "d": "The associated  concurrent.futures.Executor to use for blocking IO."}, {"r": "hikari.files.FileReader.path", "u": 3, "d": "The path to the resource to read."}, {"r": "hikari.files.FileReader.data_uri", "u": 3, "d": "Fetch the data URI. This reads the entire resource.", "f": 1}, {"r": "hikari.files.FileReader.read", "u": 3, "d": "Read the rest of the resource and return it in a  builtins.bytes object.", "f": 1}, {"r": "hikari.files.FileReader.filename", "u": 3, "d": "The filename of the resource."}, {"r": "hikari.files.FileReader.mimetype", "u": 3, "d": "The mimetype of the resource. May be  builtins.None if not known."}, {"r": "hikari.files.WebResource", "u": 3, "d": "Base class for a resource that resides on the internet. The logic for identifying this resource is left to each implementation to define.  ! info For a usable concrete implementation, use  URL instead.  ! note Some components may choose to not upload this resource directly and instead simply refer to the URL as needed. The main place this will occur is within embeds. If you need to re-upload the resource, you should download it into a  builtins.bytes and pass that instead in these cases."}, {"r": "hikari.files.WebResource.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.files.WebResource.url", "u": 3, "d": "URL of the resource."}, {"r": "hikari.files.WebResource.filename", "u": 3, "d": "Filename of the resource."}, {"r": "hikari.files.WebResource.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.files.WebResource.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.files.URL", "u": 3, "d": "A URL that represents a web resource. Parameters      url : builtins.str The URL of the resource.  ! note Some components may choose to not upload this resource directly and instead simply refer to the URL as needed. The main place this will occur is within embeds. If you need to re-upload the resource, you should download it into a  builtins.bytes and pass that instead in these cases."}, {"r": "hikari.files.URL.url", "u": 3, "d": "URL of the resource."}, {"r": "hikari.files.URL.filename", "u": 3, "d": "Filename of the resource."}, {"r": "hikari.files.URL.stream", "u": 3, "d": "Start streaming the content into memory by downloading it. You can use this to fetch the entire resource, parts of the resource, or just to view any metadata that may be provided. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests. Examples     Downloading an entire resource at once into memory:   async with obj.stream() as stream: data = await stream.read()   Checking the metadata:   async with obj.stream() as stream: mimetype = stream.mimetype if mimetype is None:  . elif mimetype not in whitelisted_mimetypes:  . else:  .   Fetching the data-uri of a resource:   async with obj.stream() as stream: data_uri = await stream.data_uri()   Returns    - AsyncReaderContextManager[WebReader] An async context manager that when entered, produces the data stream. Raises    hikari.errors.BadRequestError If a 400 is returned. hikari.errors.UnauthorizedError If a 401 is returned. hikari.errors.ForbiddenError If a 403 is returned. hikari.errors.NotFoundError If a 404 is returned. hikari.errors.ClientHTTPResponseError If any other 4xx is returned. hikari.errors.InternalServerError If any other 5xx is returned. hikari.errors.HTTPResponseError If any other unexpected response code is returned.", "f": 1}, {"r": "hikari.files.URL.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.files.URL.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.files.WebReader", "u": 3, "d": "Asynchronous reader to use to read data from a web resource. Method generated by attrs for class WebReader."}, {"r": "hikari.files.WebReader.read", "u": 3, "d": "Read the rest of the resource and return it in a  builtins.bytes object.", "f": 1}, {"r": "hikari.files.WebReader.charset", "u": 3, "d": "Optional character set information, if known."}, {"r": "hikari.files.WebReader.head_only", "u": 3, "d": "If  builtins.True , then only the HEAD was requested. In this case, neither  __aiter__ nor  read would return anything other than an empty byte string."}, {"r": "hikari.files.WebReader.reason", "u": 3, "d": "The HTTP response status reason."}, {"r": "hikari.files.WebReader.size", "u": 3, "d": "The size of the resource, if known."}, {"r": "hikari.files.WebReader.status", "u": 3, "d": "The initial HTTP response status."}, {"r": "hikari.files.WebReader.stream", "u": 3, "d": "The  aiohttp.StreamReader to read the content from."}, {"r": "hikari.files.WebReader.url", "u": 3, "d": "The URL being read from."}, {"r": "hikari.files.WebReader.data_uri", "u": 3, "d": "Fetch the data URI. This reads the entire resource.", "f": 1}, {"r": "hikari.files.WebReader.filename", "u": 3, "d": "The filename of the resource."}, {"r": "hikari.files.WebReader.mimetype", "u": 3, "d": "The mimetype of the resource. May be  builtins.None if not known."}, {"r": "hikari.files.Bytes", "u": 3, "d": "Representation of in-memory data to upload. Parameters      data : typing.Union[Rawish, LazyByteIteratorish] The raw data. filename : builtins.str The filename to use. mimetype : typing.Optional[builtins.str] The mimetype, or  builtins.None if you do not wish to specify this. If not provided, then this will be generated from the file extension of the filename instead. spoiler : bool Whether to mark the file as a spoiler in Discord. Defaults to  builtins.False ."}, {"r": "hikari.files.Bytes.url", "u": 3, "d": "URL of the resource."}, {"r": "hikari.files.Bytes.filename", "u": 3, "d": "Filename of the resource."}, {"r": "hikari.files.Bytes.stream", "u": 3, "d": "Start streaming the content in chunks. Parameters      executor : typing.Optional[concurrent.futures.Executor] Not used. Provided only to match the underlying interface. head_only : builtins.bool Not used. Provided only to match the underlying interface. Returns    - AsyncReaderContextManager[IteratorReader] An async context manager that when entered, produces the data stream.", "f": 1}, {"r": "hikari.files.Bytes.from_data_uri", "u": 3, "d": "Parse a given data URI. Parameters      data_uri : builtins.str The data URI to parse. filename : typing.Optional[builtins.str] Filename to use. If this is not provided, then this is generated instead. Returns    - Bytes The parsed data URI as a  Bytes object. Raises    builtins.ValueError If the parsed argument is not a data URI.", "f": 1}, {"r": "hikari.files.Bytes.data", "u": 3, "d": "The raw data/provider of raw data to upload."}, {"r": "hikari.files.Bytes.is_spoiler", "u": 3, "d": "Whether the file will be marked as a spoiler."}, {"r": "hikari.files.Bytes.mimetype", "u": 3, "d": "The provided mimetype, if provided. Otherwise  builtins.None ."}, {"r": "hikari.files.Bytes.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.files.Bytes.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.files.IteratorReader", "u": 3, "d": "Asynchronous file reader that operates on in-memory data. Method generated by attrs for class IteratorReader."}, {"r": "hikari.files.IteratorReader.data", "u": 3, "d": "The data that will be yielded in chunks."}, {"r": "hikari.files.IteratorReader.data_uri", "u": 3, "d": "Fetch the data URI. This reads the entire resource.", "f": 1}, {"r": "hikari.files.IteratorReader.read", "u": 3, "d": "Read the rest of the resource and return it in a  builtins.bytes object.", "f": 1}, {"r": "hikari.files.IteratorReader.filename", "u": 3, "d": "The filename of the resource."}, {"r": "hikari.files.IteratorReader.mimetype", "u": 3, "d": "The mimetype of the resource. May be  builtins.None if not known."}, {"r": "hikari.errors", "u": 47, "d": "Exceptions and warnings that can be thrown by this library."}, {"r": "hikari.errors.HikariError", "u": 47, "d": "Base for an error raised by this API. Any exceptions should derive from this.  ! note You should never initialize this exception directly."}, {"r": "hikari.errors.HikariWarning", "u": 47, "d": "Base for a warning raised by this API. Any warnings should derive from this.  ! note You should never initialize this warning directly."}, {"r": "hikari.errors.HikariInterrupt", "u": 47, "d": "Exception raised when a kill signal is handled internally. Method generated by attrs for class HikariInterrupt."}, {"r": "hikari.errors.HikariInterrupt.signame", "u": 47, "d": "The signal name that was raised."}, {"r": "hikari.errors.HikariInterrupt.signum", "u": 47, "d": "The signal number that was raised."}, {"r": "hikari.errors.ComponentNotRunningError", "u": 47, "d": "An exception thrown if trying to interact with a component that is not running. Method generated by attrs for class ComponentNotRunningError."}, {"r": "hikari.errors.ComponentNotRunningError.reason", "u": 47, "d": "A string to explain the issue."}, {"r": "hikari.errors.NotFoundError", "u": 47, "d": "Raised when something is not found. Method generated by attrs for class NotFoundError."}, {"r": "hikari.errors.NotFoundError.status", "u": 47, "d": "The HTTP status code for the response."}, {"r": "hikari.errors.NotFoundError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.NotFoundError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.NotFoundError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.NotFoundError.message", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.NotFoundError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.RateLimitedError", "u": 47, "d": "Raised when a non-global rate limit that cannot be handled occurs. If you receive one of these, you should NOT try again until the given time has passed, either discarding the operation you performed, or waiting until the given time has passed first. Note that it may still be valid to send requests with different attributes in them. A use case for this by Discord appears to be to stop abuse from bots that change channel names, etc, regularly. This kind of action allegedly causes a fair amount of overhead internally for Discord. In the case you encounter this, you may be able to send different requests that manipulate the same entities (in this case editing the same channel) that do not use the same collection of attributes as the previous request. Method generated by attrs for class RateLimitedError."}, {"r": "hikari.errors.RateLimitedError.message", "u": 47, "d": "The error message."}, {"r": "hikari.errors.RateLimitedError.retry_after", "u": 47, "d": "How many seconds to wait before you can reuse the route with the specific request."}, {"r": "hikari.errors.RateLimitedError.route", "u": 47, "d": "The route that produced this error."}, {"r": "hikari.errors.RateLimitedError.status", "u": 47, "d": "The HTTP status code for the response."}, {"r": "hikari.errors.RateLimitedError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.RateLimitedError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.RateLimitedError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.RateLimitedError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.RateLimitTooLongError", "u": 47, "d": "Internal error raised if the wait for a rate limit is too long. This is similar to  asyncio.TimeoutError in the way that it is used, but this will be raised pre-emptively and immediately if the period of time needed to wait is greater than a user-defined limit. This will almost always be route-specific. If you receive this, it is unlikely that performing the same call for a different channel/guild/user will also have this rate limit. Method generated by attrs for class RateLimitTooLongError."}, {"r": "hikari.errors.RateLimitTooLongError.remaining", "u": 47, "d": "The number of requests that are remaining in this window. This will always be  0 symbolically. Returns    - builtins.int The number of requests remaining. Always  0 ."}, {"r": "hikari.errors.RateLimitTooLongError.limit", "u": 47, "d": "The maximum number of calls per window for this rate limit."}, {"r": "hikari.errors.RateLimitTooLongError.max_retry_after", "u": 47, "d": "How long the client is allowed to wait for at a maximum before raising."}, {"r": "hikari.errors.RateLimitTooLongError.message", "u": 47, "d": "The error message."}, {"r": "hikari.errors.RateLimitTooLongError.period", "u": 47, "d": "How long the rate limit window lasts for from start to end."}, {"r": "hikari.errors.RateLimitTooLongError.reset_at", "u": 47, "d": "UNIX timestamp of when this limit will be lifted."}, {"r": "hikari.errors.RateLimitTooLongError.retry_after", "u": 47, "d": "How many seconds to wait before you can retry this specific request."}, {"r": "hikari.errors.RateLimitTooLongError.route", "u": 47, "d": "The route that produced this error."}, {"r": "hikari.errors.UnauthorizedError", "u": 47, "d": "Raised when you are not authorized to access a specific resource. Method generated by attrs for class UnauthorizedError."}, {"r": "hikari.errors.UnauthorizedError.status", "u": 47, "d": "The HTTP status code for the response."}, {"r": "hikari.errors.UnauthorizedError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.UnauthorizedError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.UnauthorizedError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.UnauthorizedError.message", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.UnauthorizedError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ForbiddenError", "u": 47, "d": "Raised when you are not allowed to access a specific resource. This means you lack the permissions to do something, either because of permissions set in a guild, or because your application is not whitelisted to use a specific endpoint. Method generated by attrs for class ForbiddenError."}, {"r": "hikari.errors.ForbiddenError.status", "u": 47, "d": "The HTTP status code for the response."}, {"r": "hikari.errors.ForbiddenError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ForbiddenError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ForbiddenError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ForbiddenError.message", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ForbiddenError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.BadRequestError", "u": 47, "d": "Raised when you send an invalid request somehow. Method generated by attrs for class BadRequestError."}, {"r": "hikari.errors.BadRequestError.status", "u": 47, "d": "The HTTP status code for the response."}, {"r": "hikari.errors.BadRequestError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.BadRequestError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.BadRequestError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.BadRequestError.message", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.BadRequestError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.RESTErrorCode", "u": 47, "d": "Error codes provided as further info on errors returned by the REST API."}, {"r": "hikari.errors.RESTErrorCode.name", "u": 47, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.errors.RESTErrorCode.value", "u": 47, "d": "Return the value of the enum member."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_ERROR", "u": 47, "d": "Error is not known."}, {"r": "hikari.errors.RESTErrorCode.GENERAL_ERROR", "u": 47, "d": "A general error, no further info provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_APPLICATION", "u": 47, "d": "Unknown application provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_CHANNEL", "u": 47, "d": "Unknown channel provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_GUILD", "u": 47, "d": "Unknown guild provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_INTEGRATION", "u": 47, "d": "Unknown integration provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_INVITE", "u": 47, "d": "Unknown invite provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_MEMBER", "u": 47, "d": "Unknown member provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_MESSAGE", "u": 47, "d": "Unknown message provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_PERMISSION_OVERWRITE", "u": 47, "d": "Unknown permission overwrite provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_ROLE", "u": 47, "d": "Unknown role provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_USER", "u": 47, "d": "Unknown user provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_EMOJI", "u": 47, "d": "Unknown emoji provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_WEBHOOK", "u": 47, "d": "Unknown webhook provided."}, {"r": "hikari.errors.RESTErrorCode.UNKNOWN_BAN", "u": 47, "d": "Unknown ban provided."}, {"r": "hikari.errors.RESTErrorCode.ANNOUNCEMENT_LIMIT_HIT", "u": 47, "d": "Message can not be edited due to announcement rate limits."}, {"r": "hikari.errors.RESTErrorCode.WRITE_LIMIT_HIT", "u": 47, "d": "The global write limit on a channel has been hit."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_GUILDS", "u": 47, "d": "Maximum number of guilds reached (100)."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_PINS", "u": 47, "d": "Maximum number of pins reached for the channel (50)."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_ROLES", "u": 47, "d": "Maximum number of guild roles reached (250)."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_WEBHOOKS", "u": 47, "d": "Maximum number of webhooks in a channel reached (10)."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_REACTIONS", "u": 47, "d": "Maximum number of reactions on a message reached (20)."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_CHANNELS", "u": 47, "d": "Maximum number of guild channels reached (500)."}, {"r": "hikari.errors.RESTErrorCode.MAXIMUM_INVITES", "u": 47, "d": "Maximum number of invites reached (1000)."}, {"r": "hikari.errors.RESTErrorCode.REQUEST_TOO_LARGE", "u": 47, "d": "Request too large. Try sending something smaller in size."}, {"r": "hikari.errors.RESTErrorCode.TEMPORARILY_DISABLED", "u": 47, "d": "This feature has been temporarily disabled server-side."}, {"r": "hikari.errors.RESTErrorCode.ALREADY_CROSSPOSTED", "u": 47, "d": "This message has already been crossposted."}, {"r": "hikari.errors.RESTErrorCode.MISSING_ACCESS", "u": 47, "d": "Missing access."}, {"r": "hikari.errors.RESTErrorCode.PROHIBITED_ON_DM", "u": 47, "d": "Cannot execute action on a DM channel."}, {"r": "hikari.errors.RESTErrorCode.NOT_MESSAGE_AUTHOR", "u": 47, "d": "Cannot edit a message authored by another user."}, {"r": "hikari.errors.RESTErrorCode.EMPTY_MESSAGE", "u": 47, "d": "Cannot send an empty message."}, {"r": "hikari.errors.RESTErrorCode.USER_DM_CLOSED", "u": 47, "d": "Cannot send messages to this user."}, {"r": "hikari.errors.RESTErrorCode.MESSAGE_IN_VC", "u": 47, "d": "Cannot send messages in a voice channel."}, {"r": "hikari.errors.RESTErrorCode.CHANNEL_VERIFICATION_TOO_HIGH", "u": 47, "d": "Channel verification level is too high for you to gain access."}, {"r": "hikari.errors.RESTErrorCode.PINS_ONLY_ON_ORIGIN_CHANNEL", "u": 47, "d": "A message can only be pinned to the channel it was sent in."}, {"r": "hikari.errors.RESTErrorCode.INVALID_INVITE_CODE", "u": 47, "d": "Invite code was either invalid or taken."}, {"r": "hikari.errors.RESTErrorCode.PROHIBITED_ON_SYSTEM_MESSAGE", "u": 47, "d": "Cannot execute action on a system message."}, {"r": "hikari.errors.RESTErrorCode.INVALID_RECIPIENTS", "u": 47, "d": "Invalid recipients."}, {"r": "hikari.errors.RESTErrorCode.MESSAGE_TOO_OLD", "u": 47, "d": "A message provided was too old to bulk delete."}, {"r": "hikari.errors.RESTErrorCode.REQUIRED_CHANNEL", "u": 47, "d": "Cannot delete a channel required for community guilds."}, {"r": "hikari.errors.RESTErrorCode.REACTION_BLOCKED", "u": 47, "d": "The reaction was blocked."}, {"r": "hikari.errors.RESTErrorCode.TWO_FACTOR_AUTHENTICATION_REQUIRED", "u": 47, "d": "2FA is required to use this endpoint."}, {"r": "hikari.errors.RESTErrorCode.SYSTEM_OVERLOADED", "u": 47, "d": "API resource is currently overloaded. Try again a little later."}, {"r": "hikari.errors.HTTPError", "u": 47, "d": "Base exception raised if an HTTP error occurs while making a request. Method generated by attrs for class HTTPError."}, {"r": "hikari.errors.HTTPError.message", "u": 47, "d": "The error message."}, {"r": "hikari.errors.HTTPResponseError", "u": 47, "d": "Base exception for an erroneous HTTP response. Method generated by attrs for class HTTPResponseError."}, {"r": "hikari.errors.HTTPResponseError.code", "u": 47, "d": "The error code."}, {"r": "hikari.errors.HTTPResponseError.headers", "u": 47, "d": "The headers received in the error response."}, {"r": "hikari.errors.HTTPResponseError.message", "u": 47, "d": "The error message."}, {"r": "hikari.errors.HTTPResponseError.raw_body", "u": 47, "d": "The response body."}, {"r": "hikari.errors.HTTPResponseError.status", "u": 47, "d": "The HTTP status code for the response."}, {"r": "hikari.errors.HTTPResponseError.url", "u": 47, "d": "The URL that produced this error message."}, {"r": "hikari.errors.HTTPClientClosedError", "u": 47, "d": "Exception raised if an  aiohttp.ClientSession was closed. This fires when using a closed  aiohttp.ClientSession to make a request. Method generated by attrs for class HTTPClientClosedError."}, {"r": "hikari.errors.HTTPClientClosedError.message", "u": 47, "d": "The error message."}, {"r": "hikari.errors.ClientHTTPResponseError", "u": 47, "d": "Base exception for an erroneous HTTP response that is a client error. All exceptions derived from this base should be treated as 4xx client errors when encountered. Method generated by attrs for class ClientHTTPResponseError."}, {"r": "hikari.errors.ClientHTTPResponseError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ClientHTTPResponseError.status", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ClientHTTPResponseError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ClientHTTPResponseError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ClientHTTPResponseError.message", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ClientHTTPResponseError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.InternalServerError", "u": 47, "d": "Base exception for an erroneous HTTP response that is a server error. All exceptions derived from this base should be treated as 5xx server errors when encountered. If you get one of these, it is not your fault! Method generated by attrs for class InternalServerError."}, {"r": "hikari.errors.InternalServerError.url", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.InternalServerError.status", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.InternalServerError.headers", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.InternalServerError.raw_body", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.InternalServerError.message", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.InternalServerError.code", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.ShardCloseCode", "u": 47, "d": "Reasons for a shard connection closure."}, {"r": "hikari.errors.ShardCloseCode.is_standard", "u": 47, "d": "Return  builtins.True if this is a standard code."}, {"r": "hikari.errors.ShardCloseCode.name", "u": 47, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.errors.ShardCloseCode.value", "u": 47, "d": "Return the value of the enum member."}, {"r": "hikari.errors.ShardCloseCode.NORMAL_CLOSURE", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.GOING_AWAY", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.PROTOCOL_ERROR", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.TYPE_ERROR", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.ENCODING_ERROR", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.POLICY_VIOLATION", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.TOO_BIG", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.UNEXPECTED_CONDITION", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.UNKNOWN_ERROR", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.UNKNOWN_OPCODE", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.DECODE_ERROR", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.NOT_AUTHENTICATED", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.AUTHENTICATION_FAILED", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.ALREADY_AUTHENTICATED", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.INVALID_SEQ", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.RATE_LIMITED", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.SESSION_TIMEOUT", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.INVALID_SHARD", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.SHARDING_REQUIRED", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.INVALID_VERSION", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.INVALID_INTENT", "u": 47, "d": ""}, {"r": "hikari.errors.ShardCloseCode.DISALLOWED_INTENT", "u": 47, "d": ""}, {"r": "hikari.errors.GatewayConnectionError", "u": 47, "d": "An exception thrown if a connection issue occurs. Method generated by attrs for class GatewayConnectionError."}, {"r": "hikari.errors.GatewayConnectionError.reason", "u": 47, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.errors.GatewayServerClosedConnectionError", "u": 47, "d": "An exception raised when the server closes the connection. Method generated by attrs for class GatewayServerClosedConnectionError."}, {"r": "hikari.errors.GatewayServerClosedConnectionError.can_reconnect", "u": 47, "d": "Return  builtins.True if we can recover from this closure. If  builtins.True , it will try to reconnect after this is raised rather than it being propagated to the caller. If  builtins.False , this will be raised, thus stopping the applicaiton unless handled explicitly by the user. Returns    - builtins.bool Whether the closure can be recovered from via a reconnect."}, {"r": "hikari.errors.GatewayServerClosedConnectionError.code", "u": 47, "d": "Return the close code that was received, if there is one. Returns    - typing.Union[ShardCloseCode, builtins.int, builtins.None] The shard close code if there was one. Will be a  ShardCloseCode if the definition is known. Undocumented close codes may instead be an  builtins.int instead. If no close code was received, this will be  builtins.None ."}, {"r": "hikari.errors.GatewayServerClosedConnectionError.reason", "u": 47, "d": "A string to explain the issue."}, {"r": "hikari.errors.GatewayError", "u": 47, "d": "A base exception type for anything that can be thrown by the Gateway. Method generated by attrs for class GatewayError."}, {"r": "hikari.errors.GatewayError.reason", "u": 47, "d": "A string to explain the issue."}, {"r": "hikari.errors.MissingIntentWarning", "u": 47, "d": "Warning raised when subscribing to an event that cannot be fired. This is caused by your application missing certain intents."}, {"r": "hikari.errors.MissingIntentError", "u": 47, "d": "Error raised when you try to perform an action without an intent. This is usually raised when querying the cache for something that is unavailable due to certain intents being disabled. Method generated by attrs for class MissingIntentError."}, {"r": "hikari.errors.MissingIntentError.intents", "u": 47, "d": "The combination of intents that are missing."}, {"r": "hikari.errors.BulkDeleteError", "u": 47, "d": "Exception raised when a bulk delete fails midway through a call. This will contain the list of message items that failed to be deleted, and will have a cause containing the initial exception. Method generated by attrs for class BulkDeleteError."}, {"r": "hikari.errors.BulkDeleteError.percentage_completion", "u": 47, "d": "Return the percentage completion of the bulk delete before it failed. Returns    - builtins.float A percentage completion between 0 and 100 inclusive."}, {"r": "hikari.errors.BulkDeleteError.messages_deleted", "u": 47, "d": "Any message objects that were deleted before an exception occurred."}, {"r": "hikari.errors.BulkDeleteError.messages_skipped", "u": 47, "d": "Any message objects that were skipped due to an exception."}, {"r": "hikari.errors.VoiceError", "u": 47, "d": "Error raised when a problem occurs with the voice subsystem."}, {"r": "hikari.users", "u": 10, "d": "Application and entities that are used to describe Users on Discord."}, {"r": "hikari.users.PartialUser", "u": 10, "d": "A partial interface for a user. Fields may or may not be present, and should be explicitly checked before using them to ensure they are not  hikari.undefined.UNDEFINED . This is used for endpoints and events that only expose partial user information. For full user info, consider calling the  fetch_self method to perform an API call. Method generated by attrs for class PartialUser."}, {"r": "hikari.users.PartialUser.app", "u": 10, "d": "Client application that models may use for procedures."}, {"r": "hikari.users.PartialUser.avatar_hash", "u": 10, "d": "Avatar hash for the user, if they have one, otherwise  builtins.None ."}, {"r": "hikari.users.PartialUser.discriminator", "u": 10, "d": "Discriminator for the user."}, {"r": "hikari.users.PartialUser.username", "u": 10, "d": "Username for the user."}, {"r": "hikari.users.PartialUser.is_bot", "u": 10, "d": " builtins.True if this user is a bot account,  builtins.False otherwise."}, {"r": "hikari.users.PartialUser.is_system", "u": 10, "d": " builtins.True if this user is a system account,  builtins.False otherwise."}, {"r": "hikari.users.PartialUser.flags", "u": 10, "d": "Flag bits that are set for the user."}, {"r": "hikari.users.PartialUser.mention", "u": 10, "d": "Return a raw mention string for the given user. Example    -   >>> some_user.mention ' '   Returns    - builtins.str The mention string to use."}, {"r": "hikari.users.PartialUser.fetch_dm_channel", "u": 10, "d": "Fetch the DM channel for this user. Returns    - hikari.channels.DMChannel The requested channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.users.PartialUser.fetch_self", "u": 10, "d": "Get this user's up-to-date object by performing an API call. Returns    - hikari.users.User The requested user object. Raises    hikari.errors.NotFoundError If the user is not found.", "f": 1}, {"r": "hikari.users.PartialUser.send", "u": 10, "d": "Send a message to this user in DM's. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.users.PartialUser.id", "u": 2, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.users.PartialUser.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.users.User", "u": 10, "d": "Interface for any user-like object. This does not include partial users, as they may not be fully formed. Method generated by attrs for class User."}, {"r": "hikari.users.User.app", "u": 10, "d": "Client application that models may use for procedures."}, {"r": "hikari.users.User.avatar_hash", "u": 10, "d": "Avatar hash for the user, if they have one, otherwise  builtins.None ."}, {"r": "hikari.users.User.avatar_url", "u": 10, "d": "Avatar URL for the user, if they have one set. May be  builtins.None if no custom avatar is set. In this case, you should use  default_avatar_url instead."}, {"r": "hikari.users.User.default_avatar_url", "u": 10, "d": "Default avatar for this user."}, {"r": "hikari.users.User.discriminator", "u": 10, "d": "Discriminator for the user."}, {"r": "hikari.users.User.flags", "u": 10, "d": "Flag bits that are set for the user."}, {"r": "hikari.users.User.is_bot", "u": 10, "d": " builtins.True if this user is a bot account,  builtins.False otherwise."}, {"r": "hikari.users.User.is_system", "u": 10, "d": " builtins.True if this user is a system account,  builtins.False otherwise."}, {"r": "hikari.users.User.mention", "u": 10, "d": "Return a raw mention string for the given user. Example    -   >>> some_user.mention ' '   Returns    - builtins.str The mention string to use."}, {"r": "hikari.users.User.username", "u": 10, "d": "Username for the user."}, {"r": "hikari.users.User.format_avatar", "u": 10, "d": "Generate the avatar for this user, if set. If no custom avatar is set, this returns  builtins.None . You can then use the  default_avatar_url attribute instead to fetch the displayed URL. Parameters      ext : typing.Optional[builtins.str] The ext to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). Will be ignored for default avatars which can only be  png . If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Will be ignored for default avatars. Returns    - typing.Optional[hikari.files.URL] The URL to the avatar, or  builtins.None if not present. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.users.User.fetch_dm_channel", "u": 10, "d": "Fetch the DM channel for this user. Returns    - hikari.channels.DMChannel The requested channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.users.User.fetch_self", "u": 10, "d": "Get this user's up-to-date object by performing an API call. Returns    - hikari.users.User The requested user object. Raises    hikari.errors.NotFoundError If the user is not found.", "f": 1}, {"r": "hikari.users.User.send", "u": 10, "d": "Send a message to this user in DM's. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.users.User.id", "u": 2, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.users.User.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.users.OwnUser", "u": 10, "d": "Represents a user with extended OAuth2 information. Method generated by attrs for class OwnUser."}, {"r": "hikari.users.OwnUser.fetch_self", "u": 10, "d": "Get this user's up-to-date object. Returns    - hikari.users.OwnUser The requested user object.", "f": 1}, {"r": "hikari.users.OwnUser.fetch_dm_channel", "u": 10, "d": "Fetch the DM channel for this user. Returns    - hikari.channels.DMChannel The requested channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.users.OwnUser.send", "u": 10, "d": "Send a message to this user in DM's. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.users.OwnUser.email", "u": 10, "d": "The user's set email. Will be  builtins.None if retrieved through OAuth2 flow without the  email scope. Will always be  builtins.None for bot users."}, {"r": "hikari.users.OwnUser.is_mfa_enabled", "u": 10, "d": "Whether the user's account has multi-factor authentication enabled."}, {"r": "hikari.users.OwnUser.is_verified", "u": 10, "d": "Whether the email for this user's account has been verified. Will be  builtins.None if retrieved through the OAuth2 flow without the  email scope."}, {"r": "hikari.users.OwnUser.locale", "u": 10, "d": "The user's set language. This is not provided by the  READY event."}, {"r": "hikari.users.OwnUser.premium_type", "u": 10, "d": "The type of Nitro Subscription this user account had. This will always be  builtins.None for bots."}, {"r": "hikari.users.OwnUser.app", "u": 10, "d": "Client application that models may use for procedures."}, {"r": "hikari.users.OwnUser.avatar_hash", "u": 10, "d": "Avatar hash for the user, if they have one, otherwise  builtins.None ."}, {"r": "hikari.users.OwnUser.avatar_url", "u": 10, "d": "Avatar URL for the user, if they have one set. May be  builtins.None if no custom avatar is set. In this case, you should use  default_avatar_url instead."}, {"r": "hikari.users.OwnUser.default_avatar_url", "u": 10, "d": "Default avatar for this user."}, {"r": "hikari.users.OwnUser.discriminator", "u": 10, "d": "Discriminator for the user."}, {"r": "hikari.users.OwnUser.flags", "u": 10, "d": "Flag bits that are set for the user."}, {"r": "hikari.users.OwnUser.is_bot", "u": 10, "d": " builtins.True if this user is a bot account,  builtins.False otherwise."}, {"r": "hikari.users.OwnUser.is_system", "u": 10, "d": " builtins.True if this user is a system account,  builtins.False otherwise."}, {"r": "hikari.users.OwnUser.mention", "u": 10, "d": "Return a raw mention string for the given user. Example    -   >>> some_user.mention ' '   Returns    - builtins.str The mention string to use."}, {"r": "hikari.users.OwnUser.username", "u": 10, "d": "Username for the user."}, {"r": "hikari.users.OwnUser.format_avatar", "u": 10, "d": "Generate the avatar for this user, if set. If no custom avatar is set, this returns  builtins.None . You can then use the  default_avatar_url attribute instead to fetch the displayed URL. Parameters      ext : typing.Optional[builtins.str] The ext to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). Will be ignored for default avatars which can only be  png . If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Will be ignored for default avatars. Returns    - typing.Optional[hikari.files.URL] The URL to the avatar, or  builtins.None if not present. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.users.OwnUser.id", "u": 2, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.users.OwnUser.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.users.UserFlag", "u": 10, "d": "The known user flags that represent account badges."}, {"r": "hikari.users.UserFlag.name", "u": 10, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.users.UserFlag.value", "u": 10, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.users.UserFlag.all", "u": 10, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.users.UserFlag.any", "u": 10, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.users.UserFlag.difference", "u": 10, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.users.UserFlag.intersection", "u": 10, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.users.UserFlag.invert", "u": 10, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.users.UserFlag.is_disjoint", "u": 10, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.users.UserFlag.is_subset", "u": 10, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.users.UserFlag.is_superset", "u": 10, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.users.UserFlag.none", "u": 10, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.users.UserFlag.split", "u": 10, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.users.UserFlag.symmetric_difference", "u": 10, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.users.UserFlag.union", "u": 10, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.users.UserFlag.isdisjoint", "u": 10, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.users.UserFlag.issubset", "u": 10, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.users.UserFlag.issuperset", "u": 10, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.users.UserFlag.symmetricdifference", "u": 10, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.users.UserFlag.NONE", "u": 10, "d": "None"}, {"r": "hikari.users.UserFlag.DISCORD_EMPLOYEE", "u": 10, "d": "Discord Employee."}, {"r": "hikari.users.UserFlag.PARTNERED_SERVER_OWNER", "u": 10, "d": "Owner of a partnered Discord server."}, {"r": "hikari.users.UserFlag.HYPESQUAD_EVENTS", "u": 10, "d": "HypeSquad Events."}, {"r": "hikari.users.UserFlag.BUG_HUNTER_LEVEL_1", "u": 10, "d": "Bug Hunter Level 1."}, {"r": "hikari.users.UserFlag.HYPESQUAD_BRAVERY", "u": 10, "d": "House of Bravery."}, {"r": "hikari.users.UserFlag.HYPESQUAD_BRILLIANCE", "u": 10, "d": "House of Brilliance."}, {"r": "hikari.users.UserFlag.HYPESQUAD_BALANCE", "u": 10, "d": "House of Balance."}, {"r": "hikari.users.UserFlag.EARLY_SUPPORTER", "u": 10, "d": "Early Supporter."}, {"r": "hikari.users.UserFlag.TEAM_USER", "u": 10, "d": "Team user."}, {"r": "hikari.users.UserFlag.SYSTEM", "u": 10, "d": "System user."}, {"r": "hikari.users.UserFlag.BUG_HUNTER_LEVEL_2", "u": 10, "d": "Bug Hunter Level 2."}, {"r": "hikari.users.UserFlag.VERIFIED_BOT", "u": 10, "d": "Verified Bot."}, {"r": "hikari.users.UserFlag.EARLY_VERIFIED_DEVELOPER", "u": 10, "d": "Early verified Bot Developer. Only applies to users that verified their account before 20th August 2019."}, {"r": "hikari.users.PremiumType", "u": 10, "d": "The types of Nitro."}, {"r": "hikari.users.PremiumType.name", "u": 10, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.users.PremiumType.value", "u": 10, "d": "Return the value of the enum member."}, {"r": "hikari.users.PremiumType.NONE", "u": 10, "d": "No premium."}, {"r": "hikari.users.PremiumType.NITRO_CLASSIC", "u": 10, "d": "Premium including basic perks like animated emojis and avatars."}, {"r": "hikari.users.PremiumType.NITRO", "u": 10, "d": "Premium including all perks (e.g. 2 server boosts)."}, {"r": "hikari.internal", "u": 48, "d": "Package containing internal utilities used within this API."}, {"r": "hikari.internal.reflect", "u": 49, "d": "Reflection utilities."}, {"r": "hikari.internal.reflect.resolve_signature", "u": 49, "d": "Get the  inspect.Signature of  func with resolved forward annotations. Parameters      func : typing.Callable  .],  .] The function to get the resolved annotations from.  ! warning This will use  builtins.eval to resolve string type-hints and forward references. This has a slight performance overhead, so attempt to cache this info as much as possible. Returns    - inspect.Signature A  inspect.Signature object with all forward reference annotations resolved.", "f": 1}, {"r": "hikari.internal.time", "u": 50, "d": "Utility methods used for parsing timestamps and datetimes from Discord."}, {"r": "hikari.internal.time.DISCORD_EPOCH", "u": 50, "d": "Discord epoch used within snowflake identifiers. This is defined as the number of seconds between  1/1/1970 00:00:00 UTC and  1/1/2015 00:00:00 UTC . References       [Discord API documentation - Snowflakes](https: discord.com/developers/docs/reference snowflakes)"}, {"r": "hikari.internal.time.datetime_to_discord_epoch", "u": 50, "d": "Parse a  datetime.datetime object into an  builtins.int  DISCORD_EPOCH offset. Parameters      timestamp : datetime.datetime Number of seconds since  1/1/1970 00:00:00 UTC . Returns    - builtins.int Number of milliseconds since  1/1/2015 00:00:00 UTC .", "f": 1}, {"r": "hikari.internal.time.discord_epoch_to_datetime", "u": 50, "d": "Parse a Discord epoch into a  datetime.datetime object. Parameters      epoch : builtins.int Number of milliseconds since  1/1/2015 00:00:00 UTC . Returns    - datetime.datetime Number of seconds since  1/1/1970 00:00:00 UTC .", "f": 1}, {"r": "hikari.internal.time.unix_epoch_to_datetime", "u": 50, "d": "Parse a UNIX epoch to a  datetime.datetime object.  ! note If an epoch that's outside the range of what this system can handle, this will return  datetime.datetime.max if the timestamp is positive, or  datetime.datetime.min otherwise. Parameters      epoch : typing.Union[builtins.int, builtins.float] Number of seconds/milliseconds since  1/1/1970 00:00:00 UTC . is_millis : builtins.bool  builtins.True by default, indicates the input timestamp is measured in milliseconds rather than seconds Returns    - datetime.datetime Number of seconds since  1/1/1970 00:00:00 UTC .", "f": 1}, {"r": "hikari.internal.time.Intervalish", "u": 50, "d": "Type hint representing a naive time period or time span. This is a type that is like an interval of some sort. This is an alias for  typing.Union[int, float, datetime.datetime] , where  builtins.int and  builtins.float types are interpreted as a number of seconds."}, {"r": "hikari.internal.time.timespan_to_int", "u": 50, "d": "Cast the given timespan in seconds to an integer value. Parameters      value : Intervalish The number of seconds. Returns    - builtins.int The integer number of seconds. Fractions are discarded. Negative values are removed.", "f": 1}, {"r": "hikari.internal.time.local_datetime", "u": 50, "d": "Return the current date/time for the system's time zone.", "f": 1}, {"r": "hikari.internal.time.utc_datetime", "u": 50, "d": "Return the current date/time for UTC (GMT+0).", "f": 1}, {"r": "hikari.internal.time.monotonic", "u": 50, "d": "Performance counter for benchmarking.", "f": 1}, {"r": "hikari.internal.time.monotonic_ns", "u": 50, "d": "Performance counter for benchmarking as nanoseconds.", "f": 1}, {"r": "hikari.internal.time.uuid", "u": 50, "d": "Generate a unique UUID (1ns precision).", "f": 1}, {"r": "hikari.internal.routes", "u": 51, "d": "Provides the valid routes that can be used on the API and the CDN."}, {"r": "hikari.internal.routes.CompiledRoute", "u": 51, "d": "A compiled representation of a route to a specific resource. This is a similar representation to what  Route provides, except  Route is treated as a template, this is treated as an instance. Method generated by attrs for class CompiledRoute."}, {"r": "hikari.internal.routes.CompiledRoute.method", "u": 51, "d": "Return the HTTP method of this compiled route."}, {"r": "hikari.internal.routes.CompiledRoute.create_url", "u": 51, "d": "Create the full URL with which you can make a request. Parameters      base_url : builtins.str The base of the URL to prepend to the compiled path. Returns    - builtins.str The full URL for the route.", "f": 1}, {"r": "hikari.internal.routes.CompiledRoute.create_real_bucket_hash", "u": 51, "d": "Create a full bucket hash from a given initial hash. The result of this hash will be decided by the value of the major parameters passed to the route during the compilation phase. Parameters      initial_bucket_hash : builtins.str The initial bucket hash provided by Discord in the HTTP headers for a given response. Returns    - builtins.str The input hash amalgamated with a hash code produced by the major parameters in this compiled route instance.", "f": 1}, {"r": "hikari.internal.routes.CompiledRoute.compiled_path", "u": 51, "d": "The compiled route path to use."}, {"r": "hikari.internal.routes.CompiledRoute.major_param_hash", "u": 51, "d": "The major parameters in a bucket hash-compatible representation."}, {"r": "hikari.internal.routes.CompiledRoute.route", "u": 51, "d": "The route this compiled route was created from."}, {"r": "hikari.internal.routes.Route", "u": 51, "d": "A template used to create compiled routes for specific parameters. These compiled routes are used to identify rate limit buckets. Compiled routes may have a single major parameter. Parameters      method : builtins.str The HTTP method path_template : builtins.str The template string for the path to use."}, {"r": "hikari.internal.routes.Route.compile", "u": 51, "d": "Generate a formatted  CompiledRoute for this route. This takes into account any URL parameters that have been passed. Parameters       kwargs : typing.Any Any parameters to interpolate into the route path. Returns    - CompiledRoute The compiled route.", "f": 1}, {"r": "hikari.internal.routes.Route.major_param", "u": 51, "d": "The optional major parameter name."}, {"r": "hikari.internal.routes.Route.method", "u": 51, "d": "The HTTP method."}, {"r": "hikari.internal.routes.Route.path_template", "u": 51, "d": "The template string used for the path."}, {"r": "hikari.internal.routes.CDNRoute", "u": 51, "d": "Route implementation for a CDN resource. Method generated by attrs for class CDNRoute."}, {"r": "hikari.internal.routes.CDNRoute.compile", "u": 51, "d": "Generate a full CDN url from this endpoint. Parameters      base_url : builtins.str The base URL for the CDN. The generated route is concatenated onto this. file_format : builtins.str The file format to use for the asset. size : typing.Optional[builtins.int] The custom size query parameter to set. If  builtins.None , it is not passed.  kwargs : typing.Any Parameters to interpolate into the path template. Returns    - builtins.str The full asset URL. Raises    builtins.TypeError If a GIF is requested, but the asset is not animated; if an invalid file format for the endpoint is passed; or if a  size is passed but the route is not  sizable . builtins.ValueError If  size is specified, but is not an integer power of  2 between  16 and  4096 inclusive or is negative.", "f": 1}, {"r": "hikari.internal.routes.CDNRoute.compile_to_file", "u": 51, "d": "Perform the same as  compile , but return the URL as a  files.URL .", "f": 1}, {"r": "hikari.internal.routes.CDNRoute.path_template", "u": 51, "d": "Template string for this endpoint."}, {"r": "hikari.internal.routes.CDNRoute.sizable", "u": 51, "d": " builtins.True if a  size param can be specified, or  builtins.False otherwise."}, {"r": "hikari.internal.routes.CDNRoute.valid_formats", "u": 51, "d": "Valid file formats for this endpoint."}, {"r": "hikari.internal.net", "u": 52, "d": "General bits and pieces that are reused between components."}, {"r": "hikari.internal.net.generate_error_response", "u": 52, "d": "Given an erroneous HTTP response, return a corresponding exception.", "f": 1}, {"r": "hikari.internal.net.create_client_session", "u": 52, "d": "Generate a client session using the given settings.  ! warning You must invoke this from within a running event loop.  ! note If you pass an explicit connector, then the connection that is created will not own the connector. You will be expected to manually close it __after__ the returned client session is closed to prevent leaking resources. Parameters      connector : aiohttp.BaseConnector The connector to use. connector_owner : builtins.bool If  builtins.True , then the client session will close the connector on shutdown. Otherwise, you must do it manually. http_settings : hikari.config.HTTPSettings HTTP settings to use. raise_for_status : builtins.bool  builtins.True to default to throwing exceptions if a request fails, or  builtins.False to default to not. trust_env : builtins.bool  builtins.True to trust anything in environment variables and the  netrc file,  builtins.False to ignore it. ws_response_cls : typing.Type[aiohttp.ClientWebSocketResponse] The websocket response class to use. Defaults to  aiohttp.ClientWebSocketResponse . Returns    - aiohttp.ClientSession The client session to use.", "f": 1}, {"r": "hikari.internal.ux", "u": 53, "d": "User-experience extensions and utilities."}, {"r": "hikari.internal.ux.init_logging", "u": 53, "d": "Attempt to initialize logging for the user. If any handlers already exist, this is ignored entirely. This ensures the user can use any existing logging configuration without us interfering. You can manually disable this by passing  None as the  flavor parameter. Parameters      flavor : typing.Optional[builtins.None, builtins.str, typing.Dict[builtins.str, typing.Any The hint for configuring logging. This can be  builtins.None to not enable logging automatically. If you pass a  builtins.str or a  builtins.int , it is interpreted as the global logging level to use, and should match one of  \"DEBUG\" ,  \"INFO\" ,  \"WARNING\" ,  \"ERROR\" or  \"CRITICAL\" , if  builtins.str . The configuration will be set up to use a  colorlog coloured logger, and to use a sane logging format strategy. The output will be written to  sys.stderr using this configuration. If you pass a  builtins.dict , it is treated as the mapping to pass to  logging.config.dictConfig . allow_color : builtins.bool If  builtins.False , no colour is allowed. If  builtins.True , the output device must be supported for this to return  builtins.True . force_color : builtins.bool If  builtins.True , return  builtins.True always, otherwise only return  builtins.True if the device supports colour output and the  allow_color flag is not  builtins.False .", "f": 1}, {"r": "hikari.internal.ux.print_banner", "u": 53, "d": "Print a banner of choice to  sys.stdout . Inspired by Spring Boot, we display an ASCII logo on startup. This is styled to grab the user's attention, and contains info such as the library version, the Python interpreter, the OS, and links to our Discord server and documentation. Users can override this by placing a  banner.txt' in some package and referencing it in this call. Parameters      package : typing.Optional[builtins.str] The package to find the  banner.txt in, or  builtins.None if no banner should be shown.  ! note The  banner.txt must be in the root folder of the package. allow_color : builtins.bool If  builtins.False , no colour is allowed. If  builtins.True , the output device must be supported for this to return  builtins.True . force_color : builtins.bool If  builtins.True , return  builtins.True always, otherwise only return  builtins.True if the device supports colour output and the  allow_color flag is not  builtins.False .", "f": 1}, {"r": "hikari.internal.ux.supports_color", "u": 53, "d": "Return  builtins.True if the terminal device supports color output. Parameters      allow_color : builtins.bool If  builtins.False , no color is allowed. If  builtins.True , the output device must be supported for this to return  builtins.True . force_color : builtins.bool If  builtins.True , return  builtins.True always, otherwise only return  builtins.True if the device supports color output and the  allow_color flag is not  builtins.False . Returns    - builtins.bool  builtins.True if color is allowed on the output terminal, or  builtins.False otherwise.", "f": 1}, {"r": "hikari.internal.ux.HikariVersion", "u": 53, "d": "Hikari-compatible strict version."}, {"r": "hikari.internal.ux.HikariVersion.version_re", "u": 53, "d": ""}, {"r": "hikari.internal.ux.HikariVersion.parse", "u": 53, "d": "", "f": 1}, {"r": "hikari.internal.ux.check_for_updates", "u": 53, "d": "Perform a check for newer versions of the library, logging any found.", "f": 1}, {"r": "hikari.internal.spel", "u": 54, "d": "HikariSPEL (Hikari SimPle Expression Language). HikariSPEL (Hikari SimPle Expression Language) is a super-simple expression language used in this module for quickly mapping values to other values and producing streams of changes. This somewhat mirrors other programming languages like Java which have a proper Stream API. The concept of HikariSPEL is that you are trying to look at the attribute of something. So, running  \"bar.baz.bork\" against an object  foo would be equivalent to  foo.bar.baz.bork in pure Python. The reason for doing this is Python lambdas are clunky, and using a nested function is nasty boilerplate. For applying  \"bar.baz\" to  foo , we assume  bar is an attribute or property of  foo , and  baz is an attribute or property of  foo.bar . We may instead want to invoke a method that takes no parameters (looking at  str.islower , as an example. To do this, we append  () onto the attribute name. For example, applying  author.username.islower() to a  hikari.messages.Message object. All expressions may start with a  . . You can negate the whole expression by instead starting them with  !. . You may also want to negate a condition. To do this, prepend  ! to the attribute name. For example, to check if a message was not made by a bot, you could run  author.!is_bot on a  Message object. Likewise, to check if the input was not a number, you could run  content.!isdigit() . This expression language is highly experimental and may change without prior notice for the time being while I play with getting something usable and nice to work with."}, {"r": "hikari.internal.spel.AttrGetter", "u": 54, "d": "An attribute getter that can resolve nested attributes and methods. This follows the SPEL definition for how to define expressions. Expressions may be preceeded with an optional  . to aid in readability."}, {"r": "hikari.internal.spel.AttrGetter.invert_all", "u": 54, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.spel.AttrGetter.pipeline", "u": 54, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.attr_extensions", "u": 55, "d": "Utility for extending and optimising the usage of attr models."}, {"r": "hikari.internal.attr_extensions.with_copy", "u": 55, "d": "Add a custom implementation for copying attrs models to a class.  ! note This will only work if the class has an attrs generated init.", "f": 1}, {"r": "hikari.internal.attr_extensions.copy_attrs", "u": 55, "d": "Shallow copy an attrs model with  init enabled. Parameters      model : ModelT The attrs model to shallow copy. Returns    - ModelT The new shallow copied attrs model.", "f": 1}, {"r": "hikari.internal.attr_extensions.deep_copy_attrs", "u": 55, "d": "Deep copy an attrs model with  init enabled. Parameters      model : ModelT The attrs model to deep copy. memo : typing.Optional[typing.MutableMapping[builtins.int, typing.Any A memo dictionary of objects already copied during the current copying pass, see https: docs.python.org/3/library/copy.html for more details.  ! note This won't deep copy attributes where \"skip_deep_copy\" is set to  builtins.True in their metadata. Returns    - ModelT The new deep copied attrs model.", "f": 1}, {"r": "hikari.internal.attr_extensions.invalidate_deep_copy_cache", "u": 55, "d": "Remove all the globally cached generated deep copy functions.", "f": 1}, {"r": "hikari.internal.attr_extensions.invalidate_shallow_copy_cache", "u": 55, "d": "Remove all the globally cached copy functions.", "f": 1}, {"r": "hikari.internal.aio", "u": 56, "d": "Asyncio extensions and utilities."}, {"r": "hikari.internal.aio.completed_future", "u": 56, "d": "Create a future on the current running loop that is completed, then return it. Parameters      result : T The value to set for the result of the future.  T is a generic type placeholder for the type that the future will have set as the result.  T may be  builtins.None , in which case, this will return  asyncio.Future[builtins.None] . Returns    - asyncio.Future[T] The completed future.", "f": 1}, {"r": "hikari.internal.aio.is_async_iterator", "u": 56, "d": "Determine if the object is an async iterator or not.", "f": 1}, {"r": "hikari.internal.aio.is_async_iterable", "u": 56, "d": "Determine if the object is an async iterable or not.", "f": 1}, {"r": "hikari.internal.aio.first_completed", "u": 56, "d": "Wait for the first awaitable to complete. The awaitables that don't complete first will be cancelled. Completion is defined as having a result or an exception set. Thus, cancelling any of the awaitables will also result in the others being cancelled. If the first awaitable raises an exception, then that exception will be propagated. Parameters       aws : typing.Awaitable[typing.Any] Awaitables to wait for. timeout : typing.Optional[float] Optional timeout to wait for, or  builtins.None to not use one. If the timeout is reached, all awaitables are cancelled immediately.  ! note If more than one awaitable is completed before entering this call, then the first future is always returned.", "f": 1}, {"r": "hikari.internal.aio.all_of", "u": 56, "d": "Await the completion of all the given awaitable items. If any fail or time out, then they are all cancelled. Parameters       aws : typing.Awaitable[T_co] Awaitables to wait for. timeout : typing.Optional[float] Optional timeout to wait for, or  builtins.None to not use one. If the timeout is reached, all awaitables are cancelled immediately. Returns    - typing.Sequence[T_co] The results of each awaitable in the order they were provided invoked in.", "f": 1}, {"r": "hikari.internal.cache", "u": 57, "d": "Various utilities that may be used in a cache-impl."}, {"r": "hikari.internal.cache.CacheMappingView", "u": 57, "d": "A cache mapping view implementation used for representing cached data. Parameters      items : typing.Mapping[KeyT, typing.Union[ValueT, DataT, RefCell[ValueT ] A mapping of keys to the values in their raw forms, wrapped by a ref wrapper or in a data form. builder : typing.Optional[typing.Callable DataT], ValueT The callable used to build entities before they're returned by the mapping. This is used to cover the case when items stores  DataT objects. predicate : typing.Optional[typing.Callable typing.Any], bool A callable to use to determine whether entries should be returned or hidden, this should take in whatever raw type was passed for the value in  items . This may be  builtins.None if all entries should be exposed."}, {"r": "hikari.internal.cache.CacheMappingView.get_item_at", "u": 57, "d": "Get an entry in the view at position  index .", "f": 1}, {"r": "hikari.internal.cache.CacheMappingView.iterator", "u": 57, "d": "Get a lazy iterator of the entities in the view.", "f": 1}, {"r": "hikari.internal.cache.EmptyCacheView", "u": 57, "d": "An empty cache view implementation."}, {"r": "hikari.internal.cache.EmptyCacheView.get_item_at", "u": 57, "d": "Get an entry in the view at position  index .", "f": 1}, {"r": "hikari.internal.cache.EmptyCacheView.iterator", "u": 57, "d": "Get a lazy iterator of the entities in the view.", "f": 1}, {"r": "hikari.internal.cache.GuildRecord", "u": 57, "d": "An object used for storing guild specific cached information in-memory. This includes references to the cached entities that \"belong\" to the guild by ID if it's globally unique or by object if it's only unique within the guild. Method generated by attrs for class GuildRecord."}, {"r": "hikari.internal.cache.GuildRecord.empty", "u": 57, "d": "Check whether this guild record has any resources attached to it. Returns    - builtins.bool Whether this guild record has any resources attached to it.", "f": 1}, {"r": "hikari.internal.cache.GuildRecord.channels", "u": 57, "d": "A set of the IDs of the guild channels cached for this guild. This will be  builtins.None if no channels are cached for this guild else  typing.MutableSet[hikari.snowflakes.Snowflake] of channel IDs."}, {"r": "hikari.internal.cache.GuildRecord.emojis", "u": 57, "d": "A set of the IDs of the emojis cached for this guild. This will be  builtins.None if no emojis are cached for this guild else  typing.MutableSet[hikari.snowflakes.Snowflake] of emoji IDs."}, {"r": "hikari.internal.cache.GuildRecord.guild", "u": 57, "d": "A cached guild object. This will be  hikari.guilds.GatewayGuild or  builtins.None if not cached."}, {"r": "hikari.internal.cache.GuildRecord.invites", "u": 57, "d": "A set of the  builtins.str codes of the invites cached for this guild. This will be  builtins.None if no invites are cached for this guild else  typing.MutableSequence[str] of invite codes."}, {"r": "hikari.internal.cache.GuildRecord.is_available", "u": 57, "d": "Whether the chached guild is available or not. This will be  builtins.None when no  GuildRecord.guild is also  builtins.None else  builtins.bool ."}, {"r": "hikari.internal.cache.GuildRecord.members", "u": 57, "d": "A mapping of user IDs to the objects of members cached for this guild. This will be  builtins.None if no members are cached for this guild else  hikari.internal.collections.ExtendedMutableMapping[hikari.snowflakes.Snowflake, MemberData] ."}, {"r": "hikari.internal.cache.GuildRecord.presences", "u": 57, "d": "A mapping of user IDs to objects of the presences cached for this guild. This will be  builtins.None if no presences are cached for this guild else  hikari.internal.collections.ExtendedMutableMapping[hikari.snowflakes.Snowflake, MemberPresenceData] ."}, {"r": "hikari.internal.cache.GuildRecord.roles", "u": 57, "d": "A set of the IDs of the roles cached for this guild. This will be  builtins.None if no roles are cached for this guild else  typing.MutableSet[hikari.snowflakes.Snowflake] of role IDs."}, {"r": "hikari.internal.cache.GuildRecord.voice_states", "u": 57, "d": "A mapping of user IDs to objects of the voice states cached for this guild. This will be  builtins.None if no voice states are cached for this guild else  hikari.internal.collections.ExtendedMutableMapping[hikari.snowflakes.Snowflake, VoiceStateData] ."}, {"r": "hikari.internal.cache.BaseData", "u": 57, "d": "A data class used for in-memory storage of entities in a more primitive form.  ! note This base implementation assumes that all the fields it'll handle will be immutable and to handle mutable fields you'll have to override build_entity and build_from_entity to explicitly copy them. Method generated by attrs for class BaseData."}, {"r": "hikari.internal.cache.BaseData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.BaseData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.InviteData", "u": 57, "d": "A data model for storing invite data in an in-memory cache. Method generated by attrs for class InviteData."}, {"r": "hikari.internal.cache.InviteData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.InviteData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.InviteData.channel_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.code", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.created_at", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.guild_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.inviter", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.is_temporary", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.max_age", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.max_uses", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.target_user", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.target_user_type", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.InviteData.uses", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData", "u": 57, "d": "A data model for storing member data in an in-memory cache. Method generated by attrs for class MemberData."}, {"r": "hikari.internal.cache.MemberData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.MemberData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.MemberData.guild_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.has_been_deleted", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.is_deaf", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.is_mute", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.is_pending", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.joined_at", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.nickname", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.premium_since", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.role_ids", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberData.user", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData", "u": 57, "d": "A data model for storing known custom emoji data in an in-memory cache. Method generated by attrs for class KnownCustomEmojiData."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.KnownCustomEmojiData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.KnownCustomEmojiData.guild_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.is_animated", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.is_available", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.is_colons_required", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.is_managed", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.name", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.role_ids", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.KnownCustomEmojiData.user", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData", "u": 57, "d": "A data model for storing rich activity data in an in-memory cache. Method generated by attrs for class RichActivityData."}, {"r": "hikari.internal.cache.RichActivityData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.RichActivityData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.RichActivityData.application_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.assets", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.created_at", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.details", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.emoji", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.flags", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.is_instance", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.name", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.party", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.secrets", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.state", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.timestamps", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.type", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RichActivityData.url", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberPresenceData", "u": 57, "d": "A data model for storing presence data in an in-memory cache. Method generated by attrs for class MemberPresenceData."}, {"r": "hikari.internal.cache.MemberPresenceData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.MemberPresenceData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.MemberPresenceData.activities", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberPresenceData.client_status", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberPresenceData.guild_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberPresenceData.user_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MemberPresenceData.visible_status", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MentionsData", "u": 57, "d": "A model for storing message mentions data in an in-memory cache. Method generated by attrs for class MentionsData."}, {"r": "hikari.internal.cache.MentionsData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.MentionsData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.MentionsData.update", "u": 57, "d": "", "f": 1}, {"r": "hikari.internal.cache.MentionsData.channels", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MentionsData.everyone", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MentionsData.role_ids", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MentionsData.users", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData", "u": 57, "d": "A model for storing message data in an in-memory cache. Method generated by attrs for class MessageData."}, {"r": "hikari.internal.cache.MessageData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.MessageData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.MessageData.update", "u": 57, "d": "", "f": 1}, {"r": "hikari.internal.cache.MessageData.activity", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.application", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.attachments", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.author", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.channel_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.content", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.edited_timestamp", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.embeds", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.flags", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.guild_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.is_pinned", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.is_tts", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.member", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.mentions", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.message_reference", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.nonce", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.reactions", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.referenced_message", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.stickers", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.timestamp", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.type", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.MessageData.webhook_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData", "u": 57, "d": "A data model for storing voice state data in an in-memory cache. Method generated by attrs for class VoiceStateData."}, {"r": "hikari.internal.cache.VoiceStateData.build_entity", "u": 57, "d": "Build an entity object from this data object. Parameters      app : hikari.traits.RESTAware The hikari application the built object should be bound to. Returns    - The initialised entity object.", "f": 1}, {"r": "hikari.internal.cache.VoiceStateData.build_from_entity", "u": 57, "d": "Build a data object from an initialised entity. Parameters      entity : ValueT The entity object to build a data class from. Returns    - The built data class.", "f": 1}, {"r": "hikari.internal.cache.VoiceStateData.channel_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.guild_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_guild_deafened", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_guild_muted", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_self_deafened", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_self_muted", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_streaming", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_suppressed", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.is_video_enabled", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.member", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.VoiceStateData.session_id", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RefCell", "u": 57, "d": "Object used to track mutable references to a value in multiple places. This is intended to enable reference counting for entities that are only kept alive by reference (e.g. the unknown emoji objects attached to presence activities and user objects) without the use of a \"Data\" object which lowers the time spent building these entities for the objects that reference them. Method generated by attrs for class RefCell."}, {"r": "hikari.internal.cache.RefCell.copy", "u": 57, "d": "Get a copy of the contents of this cell. Returns    - ValueT The copied contents of this cell.", "f": 1}, {"r": "hikari.internal.cache.RefCell.object", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.RefCell.ref_count", "u": 57, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.internal.cache.unwrap_ref_cell", "u": 57, "d": "Unwrap a  RefCell instance to it's contents. Parameters      cell : RefCell[ValueT] The reference cell instance to unwrap Returns    - ValueT The reference cell's content.", "f": 1}, {"r": "hikari.internal.cache.copy_guild_channel", "u": 57, "d": "Logic for handling the copying of guild channel objects. This exists account for the permission overwrite objects attached to guild channel objects which need to be copied themselves.", "f": 1}, {"r": "hikari.internal.cache.Cache3DMappingView", "u": 57, "d": "A special case of the Mapping View which avoids copying the already immutable views contained within it."}, {"r": "hikari.internal.cache.Cache3DMappingView.get_item_at", "u": 57, "d": "Get an entry in the view at position  index .", "f": 1}, {"r": "hikari.internal.cache.Cache3DMappingView.iterator", "u": 57, "d": "Get a lazy iterator of the entities in the view.", "f": 1}, {"r": "hikari.internal.cache.DataT", "u": 57, "d": "Type-hint for \"data\" objects used for storing and building entities."}, {"r": "hikari.internal.cache.KeyT", "u": 57, "d": "Type-hint for mapping keys."}, {"r": "hikari.internal.cache.ValueT", "u": 57, "d": "Type-hint for mapping values."}, {"r": "hikari.internal.enums", "u": 58, "d": "Implementation of parts of Python's  enum protocol to be more performant."}, {"r": "hikari.internal.enums.Enum", "u": 58, "d": "Clone of Python's  enum.Enum implementation. This is designed to be faster and more efficient than Python's implementation, while retaining the majority of the external interface that Python's  enum.Enum provides. An  Enum is a simple class containing a discrete set of constant values that can be used in place of this type. This acts as a type-safe way of representing a set number of \"things\".  ! warning Some semantics such as subtype checking and instance checking may differ. It is recommended to compare these values using the    operator rather than the  is operator for safety reasons. Special Members on the class                 __enumtype__ : Always  Enum .   __members__ : An immutable  typing.Mapping that maps each member name to the member value.   __objtype__ : Always the first type that the enum is derived from. For example:   >>> class UserType(str, Enum):  . USER = \"user\"  . PARTIAL = \"partial\"  . MEMBER = \"member\" >>> print(UserType.__objtype__)    Operators on the class              EnumType[\"FOO\"] : Return the member that has the name  FOO , raising a  builtins.KeyError if it is not present.   EnumType.FOO : Return the member that has the name  FOO , raising a  builtins.AttributeError if it is not present.   EnumType(x) : Attempt to cast  x to the enum type by finding an existing member that has the same __value__. If this fails, you should expect a  builtins.ValueError to be raised. Operators on each enum member               -   e1  e2 :  builtins.bool Compare equality.   e1 != e2 :  builtins.bool Compare inequality.   builtins.repr(e) :  builtins.str Get the machine readable representation of the enum member  e .   builtins.str(e) :  builtins.str Get the  builtins.str name of the enum member  e . Special properties on each enum member                      name :  builtins.str The name of the member.   value : The value of the member. The type depends on the implementation type of the enum you are using. All other methods and operators on enum members are inherited from the member's __value__. For example, an enum extending  builtins.int would be able to be used as an  int type outside these overridden definitions."}, {"r": "hikari.internal.enums.Enum.name", "u": 58, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.internal.enums.Enum.value", "u": 58, "d": "Return the value of the enum member."}, {"r": "hikari.internal.enums.Flag", "u": 58, "d": "Clone of Python's  enum.Flag implementation. This is designed to be faster and more efficient than Python's implementation, while retaining the majority of the external interface that Python's  enum.Flag provides. In simple terms, an  Flag is a set of wrapped constant  builtins.int values that can be combined in any combination to make a special value. This is a more efficient way of combining things like permissions together into a single integral value, and works by setting individual  1 s and  0 s on the binary representation of the integer. This implementation has extra features, in that it will actively behave like a  builtins.set as well.  ! warning Despite wrapping  builtins.int values, conceptually this does not behave as if it were a subclass of  int .  ! danger Some semantics such as subtype checking and instance checking may differ. It is recommended to compare these values using the    operator rather than the  is operator for safety reasons. Especially where pseudo-members created from combinations are cached, results of using of  is may not be deterministic. This is a side effect of some internal performance improvements. Failing to observe this __will__ result in unexpected behaviour occurring in your application! Special Members on the class                 __enumtype__ : Always  Flag .   __everything__ : A special member with all documented bits set.   __members__ : An immutable  typing.Mapping that maps each member name to the member value.   __objtype__ : Always  builtins.int . Operators on the class              FlagType[\"FOO\"] : Return the member that has the name  FOO , raising a  builtins.KeyError if it is not present.   FlagType.FOO : Return the member that has the name  FOO , raising a  builtins.AttributeError if it is not present.   FlagType(x) : Attempt to cast  x to the enum type by finding an existing member that has the same __value__. If this fails, then a special __composite__ instance of the type is made. The name of this type is a combination of all members that combine to make the bitwise value. Operators on each flag member               -   e1 & e2 : Bitwise  AND operation. Will return a member that contains all flags that are common between both oprands on the values. This also works with one of the oprands being an  builtins.int eger. You may instead use the  intersection method.   e1 | e2 : Bitwise  OR operation. Will return a member that contains all flags that appear on at least one of the oprands. This also works with one of the oprands being an  builtins.int eger. You may instead use the  union method.   e1 ^ e2 : Bitwise  XOR operation. Will return a member that contains all flags that only appear on at least one and at most one of the oprands. This also works with one of the oprands being an  builtins.int eger. You may instead use the  symmetric_difference method.   ~e : Return the inverse of this value. This is equivalent to disabling all flags that are set on this value and enabling all flags that are not set on this value. Note that this will behave slightly differently to inverting a pure int value. You may instead use the  invert method.   e1 - e2 : Bitwise set difference operation. Returns all flags set on  e1 that are not set on  e2 as well. You may instead use the  difference method.   bool(e) :  builtins.bool Return  builtins.True if  e has a non-zero value, otherwise  builtins.False .   E.A in e :  builtins.bool  builtins.True if  E.A is in  e . This is functionally equivalent to  E.A & e  E.A .   iter(e) : Explode the value into a iterator of each __documented__ flag that can be combined to make up the value  e . Returns an iterator across all well-defined flags that make up this value. This will only include the flags explicitly defined on this  Flag type and that are individual powers of two (this means if converted to twos-compliment binary, exactly one bit must be a  1 ). In simple terms, this means that you should not expect combination flags to be returned.   e1  e2 :  builtins.bool Compare equality.   e1 != e2 :  builtins.bool Compare inequality.   e1 < e2 :  builtins.bool Compare by ordering.   builtins.int(e) :  builtins.int Get the integer value of this flag   builtins.repr(e) :  builtins.str Get the machine readable representation of the flag member  e .   builtins.str(e) :  builtins.str Get the  builtins.str name of the flag member  e . Special properties on each flag member                      e.name :  builtins.str The name of the member. For composite members, this will be generated.   e.value :  builtins.int The value of the member. Special members on each flag member                  -   e.all(E.A, E.B, E.C,  .) :  builtins.bool Returns  builtins.True if __all__ of  E.A ,  E.B ,  E.C , et cetera make up the value of  e .   e.any(E.A, E.B, E.C,  .) :  builtins.bool Returns  builtins.True if __any__ of  E.A ,  E.B ,  E.C , et cetera make up the value of  e .   e.none(E.A, E.B, E.C,  .) :  builtins.bool Returns  builtins.True if __none__ of  E.A ,  E.B ,  E.C , et cetera make up the value of  e .   e.split() :  typing.Sequence Explode the value into a sequence of each __documented__ flag that can be combined to make up the value  e . Returns a sorted sequence of each power-of-two flag that makes up the value  e . This is equivalent to  list(iter(e  . All other methods and operators on  Flag members are inherited from the member's __value__.  ! note Due to limitations around how this is re-implemented, this class is not considered a subclass of  Enum at runtime, even if MyPy believes this is possible"}, {"r": "hikari.internal.enums.Flag.name", "u": 58, "d": "Return the name of the flag combination as a  builtins.str ."}, {"r": "hikari.internal.enums.Flag.value", "u": 58, "d": "Return the  builtins.int value of the flag."}, {"r": "hikari.internal.enums.Flag.all", "u": 58, "d": "Check if all of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.internal.enums.Flag.any", "u": 58, "d": "Check if any of the given flags are part of this value. Returns    - builtins.bool  builtins.True if any of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.internal.enums.Flag.difference", "u": 58, "d": "Perform a set difference with the other set. This will return all flags in this set that are not in the other value. Equivalent to using the subtraction  - operator.", "f": 1}, {"r": "hikari.internal.enums.Flag.intersection", "u": 58, "d": "Return a combination of flags that are set for both given values. Equivalent to using the \"AND\"  & operator.", "f": 1}, {"r": "hikari.internal.enums.Flag.invert", "u": 58, "d": "Return a set of all flags not in the current set.", "f": 1}, {"r": "hikari.internal.enums.Flag.is_disjoint", "u": 58, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.internal.enums.Flag.is_subset", "u": 58, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.internal.enums.Flag.is_superset", "u": 58, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.internal.enums.Flag.none", "u": 58, "d": "Check if none of the given flags are part of this value.  ! note This is essentially the opposite of  Flag.any . Returns    - builtins.bool  builtins.True if none of the given flags are part of this value. Otherwise, return  builtins.False .", "f": 1}, {"r": "hikari.internal.enums.Flag.split", "u": 58, "d": "Return a list of all defined atomic values for this flag. Any unrecognised bits will be omitted for brevity. The result will be a name-sorted  typing.Sequence of each membe", "f": 1}, {"r": "hikari.internal.enums.Flag.symmetric_difference", "u": 58, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.internal.enums.Flag.union", "u": 58, "d": "Return a combination of all flags in this set and the other set. Equivalent to using the \"OR\"  ~ operator.", "f": 1}, {"r": "hikari.internal.enums.Flag.isdisjoint", "u": 58, "d": "Return whether two sets have a intersection or not. If the two sets have an intersection, then this returns  builtins.False . If no common flag values exist between them, then this returns  builtins.True .", "f": 1}, {"r": "hikari.internal.enums.Flag.issubset", "u": 58, "d": "Return whether another set contains this set or not. Equivalent to using the \"in\" operator.", "f": 1}, {"r": "hikari.internal.enums.Flag.issuperset", "u": 58, "d": "Return whether this set contains another set or not.", "f": 1}, {"r": "hikari.internal.enums.Flag.symmetricdifference", "u": 58, "d": "Return a set with the symmetric differences of two flag sets. Equivalent to using the \"XOR\"  ^ operator. For  a ^ b , this can be considered the same as  (a - b) | (b - a) .", "f": 1}, {"r": "hikari.internal.protocol", "u": 59, "d": "Implementation of parts of Python's  typing.Protocol to be more performant."}, {"r": "hikari.internal.data_binding", "u": 60, "d": "Data binding utilities."}, {"r": "hikari.internal.data_binding.Headers", "u": 60, "d": "Type hint for HTTP headers."}, {"r": "hikari.internal.data_binding.Query", "u": 60, "d": "Type hint for HTTP query string."}, {"r": "hikari.internal.data_binding.JSONObject", "u": 60, "d": "Type hint for a JSON-decoded object representation as a mapping."}, {"r": "hikari.internal.data_binding.JSONArray", "u": 60, "d": "Type hint for a JSON-decoded array representation as a sequence."}, {"r": "hikari.internal.data_binding.JSONish", "u": 60, "d": "Type hint for any valid JSON-decoded type."}, {"r": "hikari.internal.data_binding.FormData", "u": 60, "d": "Helper class for multipart/form-data and application/x-www-form-urlencoded body generation."}, {"r": "hikari.internal.data_binding.FormData.is_multipart", "u": 60, "d": ""}, {"r": "hikari.internal.data_binding.FormData.add_field", "u": 60, "d": "", "f": 1}, {"r": "hikari.internal.data_binding.FormData.add_fields", "u": 60, "d": "", "f": 1}, {"r": "hikari.internal.data_binding.dump_json", "u": 60, "d": "Serialize  obj to a JSON formatted  str . If  skipkeys is true then  dict keys that are not basic types ( str ,  int ,  float ,  bool ,  None ) will be skipped instead of raising a  TypeError . If  ensure_ascii is false, then the return value can contain non-ASCII characters if they appear in strings contained in  obj . Otherwise, all such characters are escaped in JSON strings. If  check_circular is false, then the circular reference check for container types will be skipped and a circular reference will result in an  OverflowError (or worse). If  allow_nan is false, then it will be a  ValueError to serialize out of range  float values ( nan ,  inf ,  -inf ) in strict compliance of the JSON specification, instead of using the JavaScript equivalents ( NaN ,  Infinity ,  -Infinity ). If  indent is a non-negative integer, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0 will only insert newlines.  None is the most compact representation. If specified,  separators should be an  (item_separator, key_separator) tuple. The default is  (', ', ': ') if  indent is  None and  (',', ': ') otherwise. To get the most compact JSON representation, you should specify  (',', ':') to eliminate whitespace.  default(obj) is a function that should return a serializable version of obj or raise TypeError. The default simply raises TypeError. If  sort_keys is true (default:  False ), then the output of dictionaries will be sorted by key. To use a custom  JSONEncoder subclass (e.g. one that overrides the  .default() method to serialize additional types), specify it with the  cls kwarg; otherwise  JSONEncoder is used.", "f": 1}, {"r": "hikari.internal.data_binding.load_json", "u": 60, "d": "Deserialize  s (a  str ,  bytes or  bytearray instance containing a JSON document) to a Python object.  object_hook is an optional function that will be called with the result of any object literal decode (a  dict ). The return value of  object_hook will be used instead of the  dict . This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting).  object_pairs_hook is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs. The return value of  object_pairs_hook will be used instead of the  dict . This feature can be used to implement custom decoders. If  object_hook is also defined, the  object_pairs_hook takes priority.  parse_float , if specified, will be called with the string of every JSON float to be decoded. By default this is equivalent to float(num_str). This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal).  parse_int , if specified, will be called with the string of every JSON int to be decoded. By default this is equivalent to int(num_str). This can be used to use another datatype or parser for JSON integers (e.g. float).  parse_constant , if specified, will be called with one of the following strings: -Infinity, Infinity, NaN. This can be used to raise an exception if invalid JSON numbers are encountered. To use a custom  JSONDecoder subclass, specify it with the  cls kwarg; otherwise  JSONDecoder is used. The  encoding argument is ignored and deprecated since Python 3.1.", "f": 1}, {"r": "hikari.internal.data_binding.JSONObjectBuilder", "u": 60, "d": "Helper class used to quickly build JSON objects from various values. If provided with any values that are  hikari.undefined.UNDEFINED , then these values will be ignored. This speeds up generation of JSON payloads for low level HTTP and websocket API interaction.  ! warning Because this subclasses  builtins.dict , you should not use the index operator to set items on this object. Doing so will skip any form of validation on the type. Use the  put methods instead."}, {"r": "hikari.internal.data_binding.JSONObjectBuilder.put", "u": 60, "d": "Put a JSON value. If the value is  hikari.undefined.UNDEFINED it will not be stored. Parameters      key : builtins.str The key to give the element. value : hikari.undefined.UndefinedOr[typing.Any] The JSON type to put. This may be a non-JSON type if a conversion is also specified. This may alternatively be undefined. In the latter case, nothing is performed. Other Parameters         conversion : typing.Optional[typing.Callable typing.Any], JSONish The optional conversion to apply.", "f": 1}, {"r": "hikari.internal.data_binding.JSONObjectBuilder.put_array", "u": 60, "d": "Put a JSON array. If the value is  hikari.undefined.UNDEFINED it will not be stored. If provided, a conversion will be applied to each item. Parameters      key : builtins.str The key to give the element. values : hikari.undefined.UndefinedOr[typing.Iterable[T The JSON types to put. This may be an iterable of non-JSON types if a conversion is also specified. This may alternatively be undefined. In the latter case, nothing is performed. Other Parameters         conversion : typing.Optional[typing.Callable typing.Any], JSONType The optional conversion to apply.", "f": 1}, {"r": "hikari.internal.data_binding.JSONObjectBuilder.put_snowflake", "u": 60, "d": "Put a key with a snowflake value into the builder. If the value is  hikari.undefined.UNDEFINED it will not be stored. Parameters      key : builtins.str The key to give the element. value : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.snowflakes.Unique The JSON type to put. This may alternatively be undefined, in this case, nothing is performed. This may also be  builtins.None , in this case the value isn't cast.", "f": 1}, {"r": "hikari.internal.data_binding.JSONObjectBuilder.put_snowflake_array", "u": 60, "d": "Put an array of snowflakes with the given key into this builder. If the value is  hikari.undefined.UNDEFINED it will not be stored. Each snowflake should be castable to an  builtins.int . Parameters      key : builtins.str The key to give the element. values : hikari.undefined.UndefinedOr[typing.Iterable[hikari.snowflakes.SnowflakeishOr[hikari.snowflakes.Unique ] The JSON snowflakes to put. This may alternatively be undefined. In the latter case, nothing is performed.", "f": 1}, {"r": "hikari.internal.data_binding.cast_json_array", "u": 60, "d": "Cast a JSON array to a given generic collection type. This will perform casts on each internal item individually. Note that >>> cast_json_array(raw_list, foo, bar=\"OK\")  .is equivalent to doing  >>> [foo(item, bar=\"OK\") for item in raw_list] Parameters      array : JSONArray The raw JSON-decoded array. cast : typing.Callable JSONish], T] The cast to apply to each item in the array. This should consume any valid JSON-decoded type and return the type corresponding to the generic type of the provided collection.  kwargs : typing.Any Extra keyword arguments to be passed during every call to cast. Returns    - typing.List[T] The generated list. Example    -   >>> arr = [123, 456, 789, 123] >>> cast_json_array(arr, str) [\"123\", \"456\", \"789\", \"123\"]  ", "f": 1}, {"r": "hikari.internal.collections", "u": 61, "d": "Custom data structures used within Hikari's core implementation."}, {"r": "hikari.internal.collections.ExtendedMapT", "u": 61, "d": "Type-hint A type hint used for mapped collection objects."}, {"r": "hikari.internal.collections.KeyT", "u": 61, "d": "Type-hint A type hint used for the type of a mapping's key."}, {"r": "hikari.internal.collections.ValueT", "u": 61, "d": "Type-hint A type hint used for the type of a mapping's value."}, {"r": "hikari.internal.collections.SnowflakeSet", "u": 61, "d": "Set of  hikari.snowflakes.Snowflake objects. This internally uses a sorted bisect-array of 64 bit integers to represent the information. This reduces the space needed to store these objects significantly down to the size of 8 bytes per item. In contrast, a regular list would take generally 8 bytes per item just to store the memory address, and then a further 28 bytes or more to physically store the integral value if it does not get interned by the Python implementation you are using. A regular set would consume even more space, being a hashtable internally. The detail of this implementation has the side effect that searches will take  \\mathcal{O} \\left( \\log n \\right)  operations in the worst case, and  \\Omega \\left (k \\right)  in the best case. Average case will be  \\mathcal{O} \\left( \\log n \\right)  Insertions and removals will take  \\mathcal{O} \\left( \\log n \\right)  operations in the worst case, due to  bisect using a binary insertion sort algorithm internally. Average case will be  \\mathcal{O} \\left( \\log n \\right)  and best case will be  \\Omega \\left\\( k \\right)   ! warning This is not thread-safe and must not be iterated across whilst being concurrently modified. Other Parameters          ids : builtins.int The IDs to fill this table with."}, {"r": "hikari.internal.collections.SnowflakeSet.add", "u": 61, "d": "Add a snowflake to this set.", "f": 1}, {"r": "hikari.internal.collections.SnowflakeSet.add_all", "u": 61, "d": "Add a collection of snowflakes to this set.", "f": 1}, {"r": "hikari.internal.collections.SnowflakeSet.clear", "u": 61, "d": "Clear all items from this collection.", "f": 1}, {"r": "hikari.internal.collections.SnowflakeSet.discard", "u": 61, "d": "Remove a snowflake from this set if it's present.", "f": 1}, {"r": "hikari.internal.collections.ExtendedMutableMapping", "u": 61, "d": "The abstract class of mutable mappings used within Hikari. These are mutable mappings that have a couple of extra methods to allow for further optimised copy operations, as well as the ability to freeze the implementation of a mapping to make it read-only."}, {"r": "hikari.internal.collections.ExtendedMutableMapping.copy", "u": 61, "d": "Return a copy of this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy and wrapping the result in a mapped collection.  ! note Any removal policy on this mapped collection will be copied over. Returns    - MapT[KeyT, ValueT] A copy of this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.ExtendedMutableMapping.freeze", "u": 61, "d": "Return a frozen mapping view of the items in this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy .  ! note Unlike  ExtendedMutableMapping.copy , this should return a pure mapping with no removal policy at all. Returns    - typing.MutableMapping[KeyT, ValueT] A frozen mapping view of the items in this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.FreezableDict", "u": 61, "d": "A mapping that wraps a dict, but can also be frozen."}, {"r": "hikari.internal.collections.FreezableDict.clear", "u": 61, "d": "D.clear() -> None. Remove all items from D.", "f": 1}, {"r": "hikari.internal.collections.FreezableDict.copy", "u": 61, "d": "Return a copy of this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy and wrapping the result in a mapped collection.  ! note Any removal policy on this mapped collection will be copied over. Returns    - MapT[KeyT, ValueT] A copy of this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.FreezableDict.freeze", "u": 61, "d": "Return a frozen mapping view of the items in this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy .  ! note Unlike  ExtendedMutableMapping.copy , this should return a pure mapping with no removal policy at all. Returns    - typing.MutableMapping[KeyT, ValueT] A frozen mapping view of the items in this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.WeakMap", "u": 61, "d": "A mapping which weakly stores values. Values will only stay alive in this mapping as long as there are separate strong references to them."}, {"r": "hikari.internal.collections.WeakMap.clear", "u": 61, "d": "D.clear() -> None. Remove all items from D.", "f": 1}, {"r": "hikari.internal.collections.WeakMap.copy", "u": 61, "d": "Return a copy of this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy and wrapping the result in a mapped collection.  ! note Any removal policy on this mapped collection will be copied over. Returns    - MapT[KeyT, ValueT] A copy of this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.WeakMap.freeze", "u": 61, "d": "Return a frozen mapping view of the items in this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy .  ! note Unlike  ExtendedMutableMapping.copy , this should return a pure mapping with no removal policy at all. Returns    - typing.MutableMapping[KeyT, ValueT] A frozen mapping view of the items in this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.TimedCacheMap", "u": 61, "d": "A most-recently-inserted limited mutable mapping implementation. This will remove entries on modification as as they pass the expiry limit. Parameters      expiry : datetime.timedelta The timedelta of how long entries should be stored for before removal. Other Parameters         source : typing.Optional[typing.Dict[KeyT, typing.Tuple[builtins.float, ValueT A source dictionary of keys to tuples of float timestamps and values to create this from. on_expire : typing.Optional[typing.Callable ValueT], None A function to call each time an item is garbage collected from this map. This should take one positional argument of the same type stored in this mapping as the value and should return  builtins.None . This will always be called after the entry has been removed."}, {"r": "hikari.internal.collections.TimedCacheMap.clear", "u": 61, "d": "D.clear() -> None. Remove all items from D.", "f": 1}, {"r": "hikari.internal.collections.TimedCacheMap.copy", "u": 61, "d": "Return a copy of this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy and wrapping the result in a mapped collection.  ! note Any removal policy on this mapped collection will be copied over. Returns    - MapT[KeyT, ValueT] A copy of this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.TimedCacheMap.freeze", "u": 61, "d": "Return a frozen mapping view of the items in this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy .  ! note Unlike  ExtendedMutableMapping.copy , this should return a pure mapping with no removal policy at all. Returns    - typing.MutableMapping[KeyT, ValueT] A frozen mapping view of the items in this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.LimitedCapacityCacheMap", "u": 61, "d": "Implementation of a capacity-limited most-recently-inserted mapping. This will start removing the oldest entries after it's maximum capacity is reached as new entries are added. Parameters      limit : int The limit for how many objects should be stored by this mapping before it starts removing the oldest entries. Other Parameters         source : typing.Optional[typing.Dict[KeyT, ValueT A source dictionary of keys to values to create this from. on_expire : typing.Optional[typing.Callable ValueT], None A function to call each time an item is garbage collected from this map. This should take one positional argument of the same type stored in this mapping as the value and should return  builtins.None. This will always be called after the entry has been removed."}, {"r": "hikari.internal.collections.LimitedCapacityCacheMap.clear", "u": 61, "d": "D.clear() -> None. Remove all items from D.", "f": 1}, {"r": "hikari.internal.collections.LimitedCapacityCacheMap.copy", "u": 61, "d": "Return a copy of this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy and wrapping the result in a mapped collection.  ! note Any removal policy on this mapped collection will be copied over. Returns    - MapT[KeyT, ValueT] A copy of this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.LimitedCapacityCacheMap.freeze", "u": 61, "d": "Return a frozen mapping view of the items in this mapped collection. Unlike simply doing  dict(mapping) , this may rely on internal detail around how the data is being stored to allow for a more efficient copy. This may look like calling  dict.copy .  ! note Unlike  ExtendedMutableMapping.copy , this should return a pure mapping with no removal policy at all. Returns    - typing.MutableMapping[KeyT, ValueT] A frozen mapping view of the items in this mapped collection.", "f": 1}, {"r": "hikari.internal.collections.get_index_or_slice", "u": 61, "d": "Get a mapping's entry at a given index as if it's a sequence of it's values. Parameters      mapping : typing.Mapping[KeyT, ValueT] The mapping of entries to treat as a sequence. index_or_slice : typing.Sequence[KeyT, ValueT] The index to get an entry to get or slice of multiple entries to get. Returns    - ValueT or typing.Sequence[ValueT] The value found at the given integer index or a sequence of the values found based on the given slice's rules. Raises    TypeError If  index_or_slice isn't a  builtins.slice or  builtins.int . IndexError If  index_or_slice is an int and is outside the range of the mapping's contents.", "f": 1}, {"r": "hikari.impl", "u": 62, "d": "Basic implementations of application components. These components implement the interfaces in  hikari.api to provide the baseline functionality. For most applications that do not have bespoke performance or structural requirements, you will want to use these implementations."}, {"r": "hikari.impl.event_manager_base", "u": 63, "d": "A base implementation for an event manager."}, {"r": "hikari.impl.event_manager_base.EventManagerBase", "u": 63, "d": "Provides functionality to consume and dispatch events. Specific event handlers should be in functions named  on_xxx where  xxx is the raw event name being dispatched in lower-case."}, {"r": "hikari.impl.event_manager_base.EventManagerBase.consume_raw_event", "u": 63, "d": "Consume a raw event. Parameters      event_name : str The case-insensitive name of the event being triggered. shard : hikari.api.shard.GatewayShard Object of the shard that received this event. payload : hikari.internal.data_binding.JSONObject Payload of the event being triggered. Raises    builtins.LookupError If there is no consumer for the event.", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.subscribe", "u": 63, "d": "Subscribe a given callback to a given event type. Parameters      event_type : typing.Type[T] The event type to listen for. This will also listen for any subclasses of the given type.  T must be a subclass of  hikari.events.base_events.Event . callback Must be a coroutine function to invoke. This should consume an instance of the given event, or an instance of a valid subclass if one exists. Any result is discarded. Example    - The following demonstrates subscribing a callback to message creation events.   from hikari.events.messages import MessageCreateEvent async def on_message(event):  . bot.subscribe(MessageCreateEvent, on_message)   Returns    - typing.Callable T], typing.Coroutine[typing.Any, typing.Any, builtins.None] The event callback that was passed in. See Also     Listen:  hikari.api.event_manager.EventManager.listen Stream:  hikari.api.event_manager.EventManager.stream Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.get_listeners", "u": 63, "d": "Get the listeners for a given event type, if there are any. Parameters      event_type : typing.Type[T] The event type to look for.  T must be a subclass of  hikari.events.base_events.Event . polymorphic : builtins.bool If  builtins.True , this will also return the listeners of the subclasses of the given event type. If  builtins.False , then only listeners for this class specifically are returned. The default is  builtins.True . Returns    - typing.Collection[typing.Callable T], typing.Coroutine[typing.Any, typing.Any, builtins.None A copy of the collection of listeners for the event. Will return an empty collection if nothing is registered.  T must be a subclass of  hikari.events.base_events.Event . See Also     Has listener:  hikari.api.event_manager.EventManager.has_listener ", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.unsubscribe", "u": 63, "d": "Unsubscribe a given callback from a given event type, if present. Parameters      event_type : typing.Type[T] The event type to unsubscribe from. This must be the same exact type as was originally subscribed with to be removed correctly.  T must derive from  hikari.events.base_events.Event . callback The callback to unsubscribe. Example    - The following demonstrates unsubscribing a callback from a message creation event.   from hikari.events.messages import MessageCreateEvent async def on_message(event):  . bot.unsubscribe(MessageCreateEvent, on_message)  ", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.listen", "u": 63, "d": "Generate a decorator to subscribe a callback to an event type. This is a second-order decorator. Parameters      event_type : typing.Optional[typing.Type[T The event type to subscribe to. The implementation may allow this to be undefined. If this is the case, the event type will be inferred instead from the type hints on the function signature.  T must be a subclass of  hikari.events.base_events.Event . Returns    - typing.Callable T], T] A decorator for a coroutine function that passes it to  EventManager.subscribe before returning the function reference. See Also     Dispatch:  hikari.api.event_manager.EventManager.dispatch Stream:  hikari.api.event_manager.EventManager.stream Subscribe:  hikari.api.event_manager.EventManager.subscribe Unsubscribe:  hikari.api.event_manager.EventManager.unsubscribe Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.dispatch", "u": 63, "d": "Dispatch an event. Parameters      event : hikari.events.base_events.Event The event to dispatch. Example    - We can dispatch custom events by first defining a class that derives from  hikari.events.base_events.Event .   import attr from hikari.traits import RESTAware from hikari.events.base_events import Event from hikari.users import User from hikari.snowflakes import Snowflake @attr.s() class EveryoneMentionedEvent(Event): app: RESTAware = attr.ib() author: User = attr.ib()  'The user who mentioned everyone. ' content: str = attr.ib()  'The message that was sent. ' message_id: Snowflake = attr.ib()  'The message ID. ' channel_id: Snowflake = attr.ib()  'The channel ID. '   We can then dispatch our event as we see fit.   from hikari.events.messages import MessageCreateEvent @bot.listen(MessageCreateEvent) async def on_message(event): if \"@everyone\" in event.content or \"@here\" in event.content: event = EveryoneMentionedEvent( author=event.author, content=event.content, message_id=event.id, channel_id=event.channel_id, ) bot.dispatch(event)   This event can be listened to elsewhere by subscribing to it with  EventManager.subscribe .   @bot.listen(EveryoneMentionedEvent) async def on_everyone_mentioned(event): print(event.user, \"just pinged everyone in\", event.channel_id)   Returns    - asyncio.Future[typing.Any] A future that can be optionally awaited. If awaited, the future will complete once all corresponding event listeners have been invoked. If not awaited, this will schedule the dispatch of the events in the background for later. See Also     Subscribe:  hikari.api.event_manager.EventManager.subscribe Stream:  hikari.api.event_manager.EventManager.stream Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.stream", "u": 63, "d": "Return a stream iterator for the given event and sub-events. Parameters      event_type : typing.Type[hikari.events.base_events.Event] The event type to listen for. This will listen for subclasses of this type additionally. timeout : typing.Optional[builtins.int, builtins.float] How long this streamer should wait for the next event before ending the iteration. If  builtins.None then this will continue until explicitly broken from. limit : typing.Optional[builtins.int] The limit for how many events this should queue at one time before dropping extra incoming events, leave this as  builtins.None for the cache size to be unlimited. Returns    - hikari.event_stream.Streamer[hikari.events.base_events.Event] The async iterator to handle streamed events. This must be started with  async with stream: or  await stream.open() before asynchronously iterating over it.  ! warning If you use  await stream.open() to start the stream then you must also close it with  await stream.close() otherwise it may queue events in memory indefinitely. Examples       async with bot.stream(events.ReactionAddEvent, timeout=30).filter \"message_id\", message.id as stream: async for user_id in stream.map(\"user_id\").limit(50):  .   or using await  open() and await  close()   stream = bot.stream(events.ReactionAddEvent, timeout=30).filter \"message_id\", message.id await stream.open() async for user_id in stream.map(\"user_id\").limit(50)  . await stream.close()   See Also     Dispatch:  hikari.api.event_manager.EventManager.dispatch Listen:  hikari.api.event_manager.EventManager.listen Subscribe:  hikari.api.event_manager.EventManager.subscribe Unsubscribe:  hikari.api.event_manager.EventManager.unsubscribe Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager_base.EventManagerBase.wait_for", "u": 63, "d": "Wait for a given event to occur once, then return the event. Parameters      event_type : typing.Type[hikari.events.base_events.Event] The event type to listen for. This will listen for subclasses of this type additionally. predicate A function taking the event as the single parameter. This should return  builtins.True if the event is one you want to return, or  builtins.False if the event should not be returned. If left as  None (the default), then the first matching event type that the bot receives (or any subtype) will be the one returned.  ! warning Async predicates are not supported. timeout : typing.Union[builtins.float, builtins.int, builtins.None] The amount of time to wait before raising an  asyncio.TimeoutError and giving up instead. This is measured in seconds. If  builtins.None , then no timeout will be waited for (no timeout can result in \"leaking\" of coroutines that never complete if called in an uncontrolled way, so is not recommended). Returns    - hikari.events.base_events.Event The event that was provided. Raises    asyncio.TimeoutError If the timeout is not  builtins.None and is reached before an event is received that the predicate returns  builtins.True for. See Also     Listen:  hikari.api.event_manager.EventManager.listen Stream:  hikari.api.event_manager.EventManager.stream Subscribe:  hikari.api.event_manager.EventManager.subscribe Dispatch:  hikari.api.event_manager.EventManager.dispatch ", "f": 1}, {"r": "hikari.impl.event_manager", "u": 64, "d": "Event handling logic for more info."}, {"r": "hikari.impl.event_manager.EventManagerImpl", "u": 64, "d": "Provides event handling logic for Discord events."}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_ready", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway ready for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_resumed", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway resumed for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_channel_create", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway channel-create for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_channel_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway channel-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_channel_delete", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway channel-delete for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_channel_pins_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway channel-pins-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_create", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-create for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_delete", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-delete for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_ban_add", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-ban-add for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_ban_remove", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-ban-remove for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_emojis_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-emojis-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_integrations_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-integrations-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_integration_create", "u": 64, "d": "", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_integration_delete", "u": 64, "d": "", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_integration_update", "u": 64, "d": "", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_member_add", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-member-add for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_member_remove", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-member-remove for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_member_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-member-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_members_chunk", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-members-chunk for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_role_create", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-role-create for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_role_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-role-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_guild_role_delete", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway guild-role-delete for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_invite_create", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway invite-create for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_invite_delete", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway invite-delete for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_create", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-create for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_delete", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-delete for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_delete_bulk", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-delete-bulk for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_reaction_add", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-reaction-add for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_reaction_remove", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-reaction-remove for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_reaction_remove_all", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-reaction-remove-all for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_message_reaction_remove_emoji", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway message-reaction-remove-emoji for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_presence_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway presence-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_typing_start", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway typing-start for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_user_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway user-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_voice_state_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway voice-state-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_voice_server_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway voice-server-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.on_webhooks_update", "u": 64, "d": "See https: discord.com/developers/docs/topics/gateway webhooks-update for more info.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.consume_raw_event", "u": 63, "d": "Consume a raw event. Parameters      event_name : str The case-insensitive name of the event being triggered. shard : hikari.api.shard.GatewayShard Object of the shard that received this event. payload : hikari.internal.data_binding.JSONObject Payload of the event being triggered. Raises    builtins.LookupError If there is no consumer for the event.", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.subscribe", "u": 63, "d": "Subscribe a given callback to a given event type. Parameters      event_type : typing.Type[T] The event type to listen for. This will also listen for any subclasses of the given type.  T must be a subclass of  hikari.events.base_events.Event . callback Must be a coroutine function to invoke. This should consume an instance of the given event, or an instance of a valid subclass if one exists. Any result is discarded. Example    - The following demonstrates subscribing a callback to message creation events.   from hikari.events.messages import MessageCreateEvent async def on_message(event):  . bot.subscribe(MessageCreateEvent, on_message)   Returns    - typing.Callable T], typing.Coroutine[typing.Any, typing.Any, builtins.None] The event callback that was passed in. See Also     Listen:  hikari.api.event_manager.EventManager.listen Stream:  hikari.api.event_manager.EventManager.stream Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.get_listeners", "u": 63, "d": "Get the listeners for a given event type, if there are any. Parameters      event_type : typing.Type[T] The event type to look for.  T must be a subclass of  hikari.events.base_events.Event . polymorphic : builtins.bool If  builtins.True , this will also return the listeners of the subclasses of the given event type. If  builtins.False , then only listeners for this class specifically are returned. The default is  builtins.True . Returns    - typing.Collection[typing.Callable T], typing.Coroutine[typing.Any, typing.Any, builtins.None A copy of the collection of listeners for the event. Will return an empty collection if nothing is registered.  T must be a subclass of  hikari.events.base_events.Event . See Also     Has listener:  hikari.api.event_manager.EventManager.has_listener ", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.unsubscribe", "u": 63, "d": "Unsubscribe a given callback from a given event type, if present. Parameters      event_type : typing.Type[T] The event type to unsubscribe from. This must be the same exact type as was originally subscribed with to be removed correctly.  T must derive from  hikari.events.base_events.Event . callback The callback to unsubscribe. Example    - The following demonstrates unsubscribing a callback from a message creation event.   from hikari.events.messages import MessageCreateEvent async def on_message(event):  . bot.unsubscribe(MessageCreateEvent, on_message)  ", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.listen", "u": 63, "d": "Generate a decorator to subscribe a callback to an event type. This is a second-order decorator. Parameters      event_type : typing.Optional[typing.Type[T The event type to subscribe to. The implementation may allow this to be undefined. If this is the case, the event type will be inferred instead from the type hints on the function signature.  T must be a subclass of  hikari.events.base_events.Event . Returns    - typing.Callable T], T] A decorator for a coroutine function that passes it to  EventManager.subscribe before returning the function reference. See Also     Dispatch:  hikari.api.event_manager.EventManager.dispatch Stream:  hikari.api.event_manager.EventManager.stream Subscribe:  hikari.api.event_manager.EventManager.subscribe Unsubscribe:  hikari.api.event_manager.EventManager.unsubscribe Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.dispatch", "u": 63, "d": "Dispatch an event. Parameters      event : hikari.events.base_events.Event The event to dispatch. Example    - We can dispatch custom events by first defining a class that derives from  hikari.events.base_events.Event .   import attr from hikari.traits import RESTAware from hikari.events.base_events import Event from hikari.users import User from hikari.snowflakes import Snowflake @attr.s() class EveryoneMentionedEvent(Event): app: RESTAware = attr.ib() author: User = attr.ib()  'The user who mentioned everyone. ' content: str = attr.ib()  'The message that was sent. ' message_id: Snowflake = attr.ib()  'The message ID. ' channel_id: Snowflake = attr.ib()  'The channel ID. '   We can then dispatch our event as we see fit.   from hikari.events.messages import MessageCreateEvent @bot.listen(MessageCreateEvent) async def on_message(event): if \"@everyone\" in event.content or \"@here\" in event.content: event = EveryoneMentionedEvent( author=event.author, content=event.content, message_id=event.id, channel_id=event.channel_id, ) bot.dispatch(event)   This event can be listened to elsewhere by subscribing to it with  EventManager.subscribe .   @bot.listen(EveryoneMentionedEvent) async def on_everyone_mentioned(event): print(event.user, \"just pinged everyone in\", event.channel_id)   Returns    - asyncio.Future[typing.Any] A future that can be optionally awaited. If awaited, the future will complete once all corresponding event listeners have been invoked. If not awaited, this will schedule the dispatch of the events in the background for later. See Also     Subscribe:  hikari.api.event_manager.EventManager.subscribe Stream:  hikari.api.event_manager.EventManager.stream Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.stream", "u": 63, "d": "Return a stream iterator for the given event and sub-events. Parameters      event_type : typing.Type[hikari.events.base_events.Event] The event type to listen for. This will listen for subclasses of this type additionally. timeout : typing.Optional[builtins.int, builtins.float] How long this streamer should wait for the next event before ending the iteration. If  builtins.None then this will continue until explicitly broken from. limit : typing.Optional[builtins.int] The limit for how many events this should queue at one time before dropping extra incoming events, leave this as  builtins.None for the cache size to be unlimited. Returns    - hikari.event_stream.Streamer[hikari.events.base_events.Event] The async iterator to handle streamed events. This must be started with  async with stream: or  await stream.open() before asynchronously iterating over it.  ! warning If you use  await stream.open() to start the stream then you must also close it with  await stream.close() otherwise it may queue events in memory indefinitely. Examples       async with bot.stream(events.ReactionAddEvent, timeout=30).filter \"message_id\", message.id as stream: async for user_id in stream.map(\"user_id\").limit(50):  .   or using await  open() and await  close()   stream = bot.stream(events.ReactionAddEvent, timeout=30).filter \"message_id\", message.id await stream.open() async for user_id in stream.map(\"user_id\").limit(50)  . await stream.close()   See Also     Dispatch:  hikari.api.event_manager.EventManager.dispatch Listen:  hikari.api.event_manager.EventManager.listen Subscribe:  hikari.api.event_manager.EventManager.subscribe Unsubscribe:  hikari.api.event_manager.EventManager.unsubscribe Wait for:  hikari.api.event_manager.EventManager.wait_for ", "f": 1}, {"r": "hikari.impl.event_manager.EventManagerImpl.wait_for", "u": 63, "d": "Wait for a given event to occur once, then return the event. Parameters      event_type : typing.Type[hikari.events.base_events.Event] The event type to listen for. This will listen for subclasses of this type additionally. predicate A function taking the event as the single parameter. This should return  builtins.True if the event is one you want to return, or  builtins.False if the event should not be returned. If left as  None (the default), then the first matching event type that the bot receives (or any subtype) will be the one returned.  ! warning Async predicates are not supported. timeout : typing.Union[builtins.float, builtins.int, builtins.None] The amount of time to wait before raising an  asyncio.TimeoutError and giving up instead. This is measured in seconds. If  builtins.None , then no timeout will be waited for (no timeout can result in \"leaking\" of coroutines that never complete if called in an uncontrolled way, so is not recommended). Returns    - hikari.events.base_events.Event The event that was provided. Raises    asyncio.TimeoutError If the timeout is not  builtins.None and is reached before an event is received that the predicate returns  builtins.True for. See Also     Listen:  hikari.api.event_manager.EventManager.listen Stream:  hikari.api.event_manager.EventManager.stream Subscribe:  hikari.api.event_manager.EventManager.subscribe Dispatch:  hikari.api.event_manager.EventManager.dispatch ", "f": 1}, {"r": "hikari.impl.rest", "u": 65, "d": "Implementation of a V8 compatible REST API for Discord. This also includes implementations designed towards providing RESTful functionality."}, {"r": "hikari.impl.rest.BasicLazyCachedTCPConnectorFactory", "u": 65, "d": "Lazy cached TCP connector factory."}, {"r": "hikari.impl.rest.BasicLazyCachedTCPConnectorFactory.close", "u": 65, "d": "Close any resources if they exist.", "f": 1}, {"r": "hikari.impl.rest.BasicLazyCachedTCPConnectorFactory.acquire", "u": 65, "d": "Acquire the connector.", "f": 1}, {"r": "hikari.impl.rest.BasicLazyCachedTCPConnectorFactory.connector", "u": 65, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.impl.rest.BasicLazyCachedTCPConnectorFactory.http_settings", "u": 65, "d": "Return an attribute of instance, which is of type owner."}, {"r": "hikari.impl.rest.RESTApp", "u": 65, "d": "The base for a HTTP-only Discord application. This comprises of a shared TCP connector connection pool, and can have  RESTClientImpl instances for specific credentials acquired from it. Parameters      connector_factory : typing.Optional[ConnectorFactory] A factory that produces an  aiohttp.BaseConnector when requested. Defaults to a connector for a shared  aiohttp.TCPConnector if  builtins.None . The connector factory is expected to handle providing locks around resources and caching any result as desired. connector_owner : builtins.bool If you created the connector yourself, set this to  builtins.True if you want this component to destroy the connector once closed. Otherwise,  builtins.False will prevent this and you will have to do this manually. The latter is useful if you wish to maintain a shared connection pool across your application with other non-Hikari components.  ! warning If you do not give a  connector_factory , this will be IGNORED and always be treated as  builtins.True internally. executor : typing.Optional[concurrent.futures.Executor] The executor to use for blocking file IO operations. If  builtins.None is passed, then the default  concurrent.futures.ThreadPoolExecutor for the  asyncio.AbstractEventLoop will be used instead. http_settings : typing.Optional[hikari.config.HTTPSettings] HTTP settings to use. Sane defaults are used if this is  builtins.None . max_rate_limit : builtins.float Maximum number of seconds to sleep for when rate limited. If a rate limit occurs that is longer than this value, then a  hikari.errors.RateLimitedError will be raised instead of waiting. This is provided since some endpoints may respond with non-sensible rate limits. Defaults to five minutes if unspecified. proxy_settings : typing.Optional[hikari.config.ProxySettings] Proxy settings to use. If  builtins.None then no proxy configuration will be used. url : typing.Optional[builtins.str] The base URL for the API. You can generally leave this as being  builtins.None and the correct default API base URL will be generated.  ! note This event loop will be bound to a connector when the first call to  acquire is made."}, {"r": "hikari.impl.rest.RESTApp.executor", "u": 65, "d": "Return the executor to use for blocking operations. This may return  builtins.None if the default  asyncio thread pool should be used instead. Returns    - typing.Optional[concurrent.futures.Executor] The executor to use, or  builtins.None to use the  asyncio default instead."}, {"r": "hikari.impl.rest.RESTApp.http_settings", "u": 65, "d": ""}, {"r": "hikari.impl.rest.RESTApp.proxy_settings", "u": 65, "d": ""}, {"r": "hikari.impl.rest.RESTApp.acquire", "u": 65, "d": "", "f": 1}, {"r": "hikari.impl.rest.RESTApp.close", "u": 65, "d": "", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl", "u": 65, "d": "Implementation of the V8-compatible Discord HTTP API. This manages making HTTP/1.1 requests to the API and using the entity factory within the passed application instance to deserialize JSON responses to Pythonic data classes that are used throughout this library. Parameters      connector_factory : typing.Optional[ConnectorFactory] A factory that produces an  aiohttp.BaseConnector when requested. Defaults to a connector for a shared  aiohttp.TCPConnector if  builtins.None . The connector factory is expected to handle providing locks around resources and caching any result as desired. connector_owner : builtins.bool If you created the connector yourself, set this to  builtins.True if you want this component to destroy the connector once closed. Otherwise,  builtins.False will prevent this and you will have to do this manually. The latter is useful if you wish to maintain a shared connection pool across your application with other non-Hikari components. entity_factory : hikari.api.entity_factory.EntityFactory The entity factory to use. executor : typing.Optional[concurrent.futures.Executor] The executor to use for blocking IO. Defaults to the  asyncio thread pool if set to  builtins.None . max_rate_limit : builtins.float Maximum number of seconds to sleep for when rate limited. If a rate limit occurs that is longer than this value, then a  hikari.errors.RateLimitedError will be raised instead of waiting. This is provided since some endpoints may respond with non-sensible rate limits. token : hikari.undefined.UndefinedOr[builtins.str] The bot or bearer token. If no token is to be used, this can be undefined. token_type : hikari.undefined.UndefinedOr[builtins.str] The type of token in use. If no token is used, this can be ignored and left to the default value. This can be  \"Bot\" or  \"Bearer\" . rest_url : builtins.str The HTTP API base URL. This can contain format-string specifiers to interpolate information such as API version in use."}, {"r": "hikari.impl.rest.RESTClientImpl.http_settings", "u": 65, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.impl.rest.RESTClientImpl.proxy_settings", "u": 65, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.impl.rest.RESTClientImpl.close", "u": 65, "d": "Close the HTTP client and any open HTTP connections.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_channel", "u": 65, "d": "Fetch a channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.PartialChannel] The channel to fetch. This may be the object or the ID of an existing channel. Returns    - hikari.channels.PartialChannel The channel. This will be a _derivative_ of  hikari.channels.PartialChannel , depending on the type of channel you request for. This means that you may get one of  hikari.channels.DMChannel ,  hikari.channels.GroupDMChannel ,  hikari.channels.GuildTextChannel ,  hikari.channels.GuildVoiceChannel ,  hikari.channels.GuildStoreChannel ,  hikari.channels.GuildNewsChannel . Likewise, the  hikari.channels.GuildChannel can be used to determine if a channel is guild-bound, and  hikari.channels.TextChannel can be used to determine if the channel provides textual functionality to the application. You can check for these using the  builtins.isinstance builtin function. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_channel", "u": 65, "d": "Edit a channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to edit. This may be the object or the ID of an existing channel. Other Parameters         name : hikari.undefined.UndefinedOr builtins.str] If provided, the new name for the channel. position : hikari.undefined.UndefinedOr builtins.int] If provided, the new position for the channel. topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the new topic for the channel. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the channel should be marked as NSFW or not. bitrate : hikari.undefined.UndefinedOr[builtins.int] If provided, the new bitrate for the channel. user_limit : hikari.undefined.UndefinedOr[builtins.int] If provided, the new user limit in the channel. rate_limit_per_user : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the new rate limit per user in the channel. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the new permission overwrites for the channel. parent_category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory If provided, the new guild category for the channel. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.PartialChannel The edited channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing permissions to edit the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.follow_channel", "u": 65, "d": "Follow a news channel to send messages to a target channel. Parameters      news_channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildNewsChannel] The object or ID of the news channel to follow. target_channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The object or ID of the channel to target. Returns    - hikari.channels.ChannelFollow Information about the new relationship that was made. Raises    hikari.errors.BadRequestError If you try to follow a channel that's not a news channel or if the target channel has reached it's webhook limit, which is 10 at the time of writing. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission in the target channel or are missing the  VIEW_CHANNEL permission in the origin channel. hikari.errors.NotFoundError If the origin or target channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_channel", "u": 65, "d": "Delete a channel in a guild, or close a DM. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.PartialChannel] The channel to delete. This may be the object or the ID of an existing channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note For Public servers, the set 'Rules' or 'Guidelines' channels and the 'Public Server Updates' channel cannot be deleted.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_permission_overwrites", "u": 65, "d": "Edit permissions for a specific entity in the given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to edit a permission overwrite in. This may be the object, or the ID of an existing channel. target : typing.Union[hikari.users.PartialUser, hikari.guilds.PartialRole, hikari.channels.PermissionOverwrite, hikari.snowflakes.Snowflakeish] The channel overwrite to edit. This may be the object or the ID of an existing overwrite. Other Parameters         target_type : hikari.undefined.UndefinedOr[hikari.channels.PermissionOverwriteType] If provided, the type of the target to update. If unset, will attempt to get the type from  target . allow : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the new vale of all allowed permissions. deny : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the new vale of all disallowed permissions. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    builtins.TypeError If  target_type is unset and we were unable to determine the type from  target . hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_PERMISSIONS permission in the channel. hikari.errors.NotFoundError If the channel is not found or the target is not found if it is a role. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_permission_overwrite", "u": 65, "d": "Delete a custom permission for an entity in a given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to delete a permission overwrite in. This may be the object, or the ID of an existing channel. target : typing.Union[hikari.users.PartialUser, hikari.guilds.PartialRole, hikari.channels.PermissionOverwrite, hikari.snowflakes.Snowflakeish] The channel overwrite to delete. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_PERMISSIONS permission in the channel. hikari.errors.NotFoundError If the channel is not found or the target is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_channel_invites", "u": 65, "d": "Fetch all invites pointing to the given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to fetch the invites from. This may be a channel object, or the ID of an existing channel. Returns    - typing.Sequence[hikari.invites.InviteWithMetadata] The invites pointing to the given guild channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission in the channel. hikari.errors.NotFoundError If the channel is not found in any guilds you are a member of. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_invite", "u": 65, "d": "Create an invite to the given guild channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel] The channel to create a invite for. This may be the object or the ID of an existing channel. Other Parameters         max_age : hikari.undefined.UndefinedOr[typing.Union[datetime.timedelta, builtins.float, builtins.int If provided, the duration of the invite before expiry. max_uses : hikari.undefined.UndefinedOr[builtins.int] If provided, the max uses the invite can have. temporary : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the invite only grants temporary membership. unique : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the invite should be unique. target_user : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser If provided, the target user id for this invite. This may be the object or the ID of an existing user. target_user_type : hikari.undefined.UndefinedOr[hikari.invites.TargetUserType] If provided, the type of target user for this invite. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.invites.InviteWithMetadata The invite to the given guild channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNELS permission. hikari.errors.NotFoundError If the channel is not found, or if the target user does not exist, if provided. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.trigger_typing", "u": 65, "d": "Trigger typing in a text channel. The result of this call can be awaited to trigger typing once, or can be used as an async context manager to continually type until the context manager is left. Examples        Trigger typing just once. await rest.trigger_typing(channel)  Trigger typing repeatedly for 1 minute. async with rest.trigger_typing(channel): await asyncio.sleep(60)    ! warning Sending a message to the channel will cause the typing indicator to disappear until it is re-triggered. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to trigger typing in. This may be the object or the ID of an existing channel. Returns    - hikari.api.special_endpoints.TypingIndicator A typing indicator to use. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise any of the above types.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_pins", "u": 65, "d": "Fetch the pinned messages in this text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch pins from. This may be the object or the ID of an existing channel. Returns    - typing.Sequence[hikari.messages.Message] The pinned messages in this text channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGES in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.pin_message", "u": 65, "d": "Pin an existing message in the given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to pin a message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to pin. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES in the channel. hikari.errors.NotFoundError If the channel is not found, or if the message does not exist in the given channel. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.unpin_message", "u": 65, "d": "Unpin a given message from a given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to unpin a message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to unpin. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.NotFoundError If the channel is not found or the message is not a pinned message in the given channel. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_messages", "u": 65, "d": "Browse the message history for a given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch messages in. This may be the object or the ID of an existing channel. Other Parameters         before : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages before this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. after : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages after this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. around : hikari.undefined.UndefinedOr[snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, fetch messages around this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.messages.Message] An iterator to fetch the messages.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    builtins.TypeError If you specify more than one of  before ,  after ,  about . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGE_HISTORY in the channel. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint (other than  builtins.TypeError ) will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything (other than  builtins.TypeError ).", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_message", "u": 65, "d": "Fetch a specific message in the given text channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch messages in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to fetch. This may be the object or the ID of an existing channel. Returns    - hikari.messages.Message The requested message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  READ_MESSAGE_HISTORY in the channel. hikari.errors.NotFoundError If the channel is not found or the message is not found in the given text channel. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_message", "u": 65, "d": "Create a message in the given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to create the message in. content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content; if  reply is not found or not in the same channel as  channel . hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.crosspost_message", "u": 65, "d": "Broadcast an announcement message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildNewsChannel] The object or ID of the news channel to crosspost a message in. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The object or ID of the message to crosspost. Returns    - hikari.messages.Message The message object that was crossposted. Raises    hikari.errors.BadRequestError If you tried to crosspost a message that has already been broadcast. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you try to crosspost a message by the current user without the  SEND_MESSAGES permission for the target news channel or try to crosspost a message by another user without both the  SEND_MESSAGES and  MANAGE_MESSAGES permissions for the target channel. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_message", "u": 65, "d": "Edit an existing message in a given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to create the message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to edit. This may be the object or the ID of an existing message. content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message content to update with. If  hikari.undefined.UNDEFINED , then the content will not be changed. If  builtins.None , then the content will be removed. Any other value will be cast to a  builtins.str before sending. If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the embed to set on the message. If  hikari.undefined.UNDEFINED , the previous embed if present is not changed. If this is  builtins.None , then the embed is removed if present. Otherwise, the new embed value that was provided will be used as the replacement. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, sanitation for  @everyone mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , then  @everyone / @here mentions in the message content will show up as mentioning everyone that can view the chat. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if  message is not a reply message. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, sanitation for user mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid user mentions will behave as mentions. If  builtins.False , all valid user mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake user IDs, or  hikari.users.PartialUser -derived objects. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, sanitation for role mentions. If  hikari.undefined.UNDEFINED , then the previous setting is not changed. If  builtins.True , all valid role mentions will behave as mentions. If  builtins.False , all valid role mentions will not behave as mentions. You may alternatively pass a collection of  hikari.snowflakes.Snowflake role IDs, or  hikari.guilds.PartialRole -derived objects. flags : hikari.undefined.UndefinedOr[hikari.messages.MessageFlag] If provided, optional flags to set on the message. If  hikari.undefined.UNDEFINED , then nothing is changed. Note that some flags may not be able to be set. Currently the only flags that can be set are  NONE and  SUPPRESS_EMBEDS . If you have  MANAGE_MESSAGES permissions, you can use this call to suppress embeds on another user's message.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this, delete the message and re-send it. This also applies to embed attachments.  ! warning If you specify one of  mentions_everyone ,  user_mentions , or  role_mentions , then all others will default to  builtins.False , even if they were enabled previously. This is a limitation of Discord's design. If in doubt, specify all three of them each time.  ! warning If the message was not sent by your user, the only parameter you may provide to this call is the  flags parameter. Anything else will result in a  hikari.errors.ForbiddenError being raised. Returns    - hikari.messages.Message The edited message. Raises    hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel; if you try to change the contents of another user's message; or if you try to edit the flags on another user's message without the  MANAGE_MESSAGES permission. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_message", "u": 65, "d": "Delete a given message in a given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to delete the message in. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES , and the message is not sent by you. hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_messages", "u": 65, "d": "Bulk-delete messages from the channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to bulk delete the messages in. This may be the object or the ID of an existing channel.  messages : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The messages to delete. This may be one or more objects or IDs of existing messages.  ! note This API endpoint will only be able to delete 100 messages at a time. For anything more than this, multiple requests will be executed one-after-the-other, since the rate limits for this endpoint do not favour more than one request per bucket. If one message is left over from chunking per 100 messages, or only one message is passed to this coroutine function, then the logic is expected to defer to  delete_message . The implication of this is that the  delete_message endpoint is ratelimited by a different bucket with different usage rates.  ! warning This endpoint is not atomic. If an error occurs midway through a bulk delete, you will  not be able to revert any changes made up to this point.  ! warning Specifying any messages more than 14 days old will cause the call to fail, potentially with partial completion. Raises    hikari.errors.BulkDeleteError An error containing the messages successfully deleted, and the messages that were not removed. The  builtins.BaseException.__cause__ of the exception will be the original error that terminated this process.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.add_reaction", "u": 65, "d": "Add a reaction emoji to a message in a given channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to add the reaction to is. This may be a  hikari.channels.TextChannel or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to add a reaction to. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to react to the message with. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  ADD_REACTIONS (this is only necessary if you are the first person to add the reaction). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_my_reaction", "u": 65, "d": "Delete a reaction that your application user created. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete the reaction from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete a reaction from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to remove your reaction from. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_all_reactions_for_emoji", "u": 65, "d": "Delete all reactions for a single emoji on a given message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete the reactions from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete a reactions from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to delete all reactions from. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_reaction", "u": 65, "d": "Delete a reaction from a message. If you are looking to delete your own applications reaction, use  delete_my_reaction . Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete the reaction from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete a reaction from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to delete all reactions from. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_all_reactions", "u": 65, "d": "Delete all reactions from a message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete all reactions from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete all reaction from. This may be the object or the ID of an existing message. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.ForbiddenError If you are missing the  MANAGE_MESSAGES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_reactions_for_emoji", "u": 65, "d": "Fetch reactions for an emoji from a message. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the message to delete all reactions from is. This may be the object or the ID of an existing channel. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete all reaction from. This may be the object or the ID of an existing message. emoji : hikari.emojis.Emojiish The emoji to filter reactions by. Returns    - hikari.iterators.LazyIterator[hikari.users.User] An iterator to fetch the users.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.BadRequestError If an invalid unicode emoji is given, or if the given custom emoji does not exist. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel or message is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_webhook", "u": 65, "d": "Create webhook in a channel. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel where the webhook will be created. This may be the object or the ID of an existing channel. name : str The name for the webhook. This cannnot be  clyde . Other Parameters         avatar : typing.Optional[hikari.files.Resourceish] If provided, the avatar for the webhook. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.webhooks.Webhook The created webhook. Raises    hikari.errors.BadRequestError If  name doesnt follow the restrictions enforced by discord. hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_webhook", "u": 65, "d": "Fetch an existing webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to fetch. This may be the object or the ID of an existing webhook. Other Parameters         token : hikari.undefined.UndefinedOr[builtins.str] If provided, the webhoook token that will be used to fetch the webhook instead of the token the client was initialized with. Returns    - hikari.webhooks.Webhook The requested webhook. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission when not using a token. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_channel_webhooks", "u": 65, "d": "Fetch all channel webhooks. Parameters      channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel] The channel to fetch the webhooks for. This may be a  hikari.channels.TextChannel or the ID of an existing channel. Returns    - typing.Sequence[hikari.webhooks.Webhook] The fetched webhooks. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the channel is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_webhooks", "u": 65, "d": "Fetch all guild webhooks. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the webhooks for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.webhooks.Webhook] The fetched webhooks. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_webhook", "u": 65, "d": "Edit a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to edit. This may be the object or the ID of an existing webhook. Other Parameters         token : hikari.undefined.UndefinedOr[builtins.str] If provided, the webhoook token that will be used to edit the webhook instead of the token the client was initialized with. name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new webhook name. avatar : hikari.undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new webhook avatar. If  builtins.None , will remove the webhook avatar. channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.TextChannel If provided, the text channel to move the webhook to. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.webhooks.Webhook The edited webhook. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission when not using a token. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_webhook", "u": 65, "d": "Delete a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to delete. This may be the object or the ID of an existing webhook. Other Parameters         token : hikari.undefined.UndefinedOr[builtins.str] If provided, the webhoook token that will be used to delete the webhook instead of the token the client was initialized with. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_WEBHOOKS permission when not using a token. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhoook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.execute_webhook", "u": 65, "d": "Execute a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to execute. This may be the object or the ID of an existing webhook. token: builtins.str The webhook token. content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed nor no  embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. embeds : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embeds. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified or if both  embed and  embeds are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_webhook_message", "u": 65, "d": "Edit a message sent by a webhook. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to execute. This may be the object or the ID of an existing webhook. token: builtins.str The webhook token. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. content : hikari.undefined.UndefinedNoneOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed nor no  embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the message embed. embeds : hikari.undefined.UndefinedNoneOr[hikari.embeds.Embed] If provided, the message embeds. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Mentioning everyone, roles, or users in message edits currently will not send a push notification showing a new mention to people on Discord. It will still highlight in their chat as if they were mentioned, however.  ! note There is currently no documented way to clear attachments or edit attachments from a previously sent message on Discord's API. To do this, delete the message and re-send it. This also applies to embed attachments.  ! warning If you specify one of  mentions_everyone ,  user_mentions , or  role_mentions , then all others will default to  builtins.False , even if they were enabled previously. This is a limitation of Discord's design. If in doubt, specify all three of them each time. Returns    - hikari.messages.Message The edited message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified or if both  embed and  embeds are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook or the message are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_webhook_message", "u": 65, "d": "Delete a given message in a given channel. Parameters      webhook : hikari.snowflakes.SnowflakeishOr[hikari.webhooks.Webhook] The webhook to execute. This may be the object or the ID of an existing webhook. token: builtins.str The webhook token. message : hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage] The message to delete. This may be the object or the ID of an existing message. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the webhook or the message are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_gateway_url", "u": 65, "d": "Fetch the gateway url.  ! note This endpoint does not require any valid authorization. Raises    hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_gateway_bot", "u": 65, "d": "Fetch the gateway gateway info for the bot. Returns    - hikari.sessions.GatewayBot The gateway bot. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_invite", "u": 65, "d": "Fetch an existing invite. Parameters      invite : hikari.invites.Inviteish The invite to fetch. This may be an invite object or the code of an existing invite. Returns    - hikari.invites.Invite The requested invite. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the invite is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_invite", "u": 65, "d": "Delete an existing invite. Parameters      invite : hikari.invites.Inviteish The invite to delete. This may be an invite object or the code of an existing invite. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission in the guild the invite is from or if you are missing the  MANAGE_CHANNELS permission in the channel the invite is from. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the invite is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_my_user", "u": 65, "d": "Fetch the token's associated user. Returns    - hikari.users.OwnUser The token's associated user. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_my_user", "u": 65, "d": "Edit the token's associated user. Other Parameters         username : undefined.UndefinedOr[builtins.str] If provided, the new username. avatar : undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new avatar. If  builtins.None , the avatar will be removed. Returns    - hikari.users.OwnUser The edited token's associated user. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. Discord also returns this on a ratelimit: https: github.com/discord/discord-api-docs/issues/1462 hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_my_connections", "u": 65, "d": "Fetch the token's associated connections. Returns    - hikari.applications.OwnConnection The token's associated connections. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_my_guilds", "u": 65, "d": "Fetch the token's associated guilds. Other Parameters         newest_first : builtins.bool Whether to fetch the newest first or the olders first. Defaults to  builtins.False . start_at : hikari.undefined.UndefinedOr[hikari.snowflakes.SearchableSnowflakeishOr[hikari.guilds.PartialGuild If provided, will start at this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may also be a guild object. In this case, the date the object was first created will be used. Returns    - hikari.iterators.LazyIterator[hikari.applications.OwnGuild] The token's associated guilds.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.leave_guild", "u": 65, "d": "Leave a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to leave. This may be the object or the ID of an existing guild. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found or you own the guild. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_dm_channel", "u": 65, "d": "Create a DM channel with a user. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to create the DM channel with. This may be the object or the ID of an existing user. Returns    - hikari.channels.DMChannel The created DM channel. Raises    hikari.errors.BadRequestError If the user is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_application", "u": 65, "d": "Fetch the token's associated application. Returns    - hikari.applications.Application The token's associated application. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.add_user_to_guild", "u": 65, "d": "Add a user to a guild.  ! note This requires the  access_token to have the  hikari.applications.OAuth2Scope.GUILDS_JOIN scope enabled. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to add the user to. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to add to the guild. This may be the object or the ID of an existing user. Other Parameters         nick : hikari.undefined.UndefinedOr[builtins.str] If provided, the nick to add to the user when he joins the guild. Requires the  MANAGE_NICKNAMES permission on the guild. roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the roles to add to the user when he joins the guild. This may be a collection objects or IDs of existing roles. Requires the  MANAGE_ROLES permission on the guild. mute : hikari.undefined.UndefinedOr[builtins.bool] If provided, the mute state to add the user when he joins the guild. Requires the  MUTE_MEMBERS permission on the guild. deaf : hikari.undefined.UndefinedOr[builtins.bool] If provided, the deaf state to add the user when he joins the guild. Requires the  DEAFEN_MEMBERS permission on the guild. Returns    - typing.Optional[hikari.guilds.Member]  builtins.None if the user was already part of the guild, else  hikari.guilds.Member . Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are not part of the guild you want to add the user to, if you are missing permissions to do one of the things you specified, if you are using an access token for another user, if the token is bound to annother bot or if the access token doesnt have the  hikari.applications.OAuth2Scope.GUILDS_JOIN scope enabled. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If you own the guild or the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_voice_regions", "u": 65, "d": "Fetch available voice regions.  ! note This endpoint doesn't return VIP voice regions. Returns    - typing.Sequence[hikari.voices.VoiceRegion] The available voice regions. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_user", "u": 65, "d": "Fetch a user. Parameters      user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to fetch. This can be the object or the ID of an existing user. Returns    - hikari.users.User The requested user Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_audit_log", "u": 65, "d": "Fetch the guild's audit log. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the audit logs from. This can be a guild object or the ID of an existing guild. Other Parameters         before : hikari.undefined.UndefinedOr[hikari.snowflakes.SearchableSnowflakeishOr[hikari.snowflakes.Unique If provided, filter to only actions after this snowflake. If you provide a datetime object, it will be transformed into a snowflake. This may be any other Discord entity that has an ID. In this case, the date the object was first created will be used. user : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser If provided, the user to filter for. event_type : hikari.undefined.UndefinedOr[hikari.audit_logs.AuditLogEventType] If provided, the event type to filter for. Returns    - hikari.iterators.LazyIterator[hikari.audit_logs.AuditLog] The guild's audit log.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  VIEW_AUDIT_LOG permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_emoji", "u": 65, "d": "Fetch a guild emoji. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the emoji from. This can be a guild object or the ID of an existing guild. emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The emoji to fetch. This can be a  hikari.emojis.CustomEmoji or the ID of an existing emoji. Returns    - hikari.emojis.KnownCustomEmoji The requested emoji. Raises    hikari.errors.NotFoundError If the guild or the emoji are not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_emojis", "u": 65, "d": "Fetch the emojis of a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the emojis from. This can be a guild object or the ID of an existing guild. Returns    - typing.Sequence[hikari.emojis.KnownCustomEmoji] The requested emojis. Raises    hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_emoji", "u": 65, "d": "Create an emoji in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the emoji on. This can be a guild object or the ID of an existing guild. name : builtins.str The name for the emoji. image : hikari.files.Resourceish The 128x128 image for the emoji. Maximum upload size is 256kb. This can be a still or an animated image. Other Parameters         roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, a collection of the roles that will be able to use this emoji. This can be a  hikari.guilds.PartialRole or the ID of an existing role. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.emojis.KnownCustomEmoji The created emoji. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value or if there are no more spaces for the type of emoji in the guild. hikari.errors.ForbiddenError If you are missing  MANAGE_EMOJIS in the server. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_emoji", "u": 65, "d": "Edit an emoji in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit the emoji on. This can be a guild object or the ID of an existing guild. emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The emoji to edit. This can be a  hikari.emojis.CustomEmoji or the ID of an existing emoji. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name for the emoji. roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the new collection of roles that will be able to use this emoji. This can be a  hikari.guilds.PartialRole or the ID of an existing role. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.emojis.KnownCustomEmoji The edited emoji. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing  MANAGE_EMOJIS in the server. hikari.errors.NotFoundError If the guild or the emoji are not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_emoji", "u": 65, "d": "Delete an emoji in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete the emoji on. This can be a guild object or the ID of an existing guild. emoji : hikari.snowflakes.SnowflakeishOr[hikari.emojis.CustomEmoji] The emoji to delete. This can be a  hikari.emojis.CustomEmoji or the ID of an existing emoji. Raises    hikari.errors.ForbiddenError If you are missing  MANAGE_EMOJIS in the server. hikari.errors.NotFoundError If the guild or the emoji are not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.guild_builder", "u": 65, "d": "Make a guild builder to create a guild with. Parameters      name : builtins.str The new guilds name. Returns    - hikari.api.special_endpoints.GuildBuilder The guild builder to use. This will allow to create a guild later with  hikari.api.special_endpoints.GuildBuilder.create .  ! note This endpoint can only be used by bots in less than 10 guilds. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value or if you call this as a bot that's in more than 10 guilds. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once  hikari.api.special_endpoints.GuildBuilder.create is called. Invoking this function itself will not raise any of the above types. See Also     Guild builder:  hikari.api.special_endpoints.GuildBuilder ", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild", "u": 65, "d": "Fetch a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch. This can be the object or the ID of an existing guild. Returns    - hikari.guilds.RESTGuild The requested guild. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_preview", "u": 65, "d": "Fetch a guild preview. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the preview of. This can be a guild object or the ID of an existing guild. Returns    - hikari.guilds.GuildPreview The requested guild preview.  ! note This will only work for guilds you are a part of or are public. Raises    hikari.errors.NotFoundError If the guild is not found or you are not part of the guild. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_guild", "u": 65, "d": "Edit a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name for the guild. region : hikari.undefined.UndefinedOr[hikari.voices.VoiceRegionish] If provided, the new voice region for the guild. verification_level : hikari.undefined.UndefinedOr[hikari.guilds.GuildVerificationLevel] If provided, the new verification level. default_message_notifications : hikari.undefined.UndefinedOr[hikari.guilds.GuildMessageNotificationsLevel] If provided, the new default message notifications level. explicit_content_filter_level : hikari.undefined.UndefinedOr[hikari.guilds.GuildExplicitContentFilterLevel] If provided, the new explicit content filter level. afk_channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel If provided, the new afk channel. Requires  afk_timeout to be set to work. afk_timeout : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the new afk timeout. icon : hikari.undefined.UndefinedOr[hikari.files.Resourceish] If provided, the new guild icon. Must be a 1024x1024 image or can be an animated gif when the guild has the  ANIMATED_ICON feature. owner : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser ] If provided, the new guild owner.  ! warning You need to be the owner of the server to use this. splash : hikari.undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new guild splash. Must be a 16:9 image and the guild must have the  INVITE_SPLASH feature. banner : hikari.undefined.UndefinedNoneOr[hikari.files.Resourceish] If provided, the new guild banner. Must be a 16:9 image and the guild must have the  BANNER feature. system_channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildTextChannel If provided, the new system channel. rules_channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildTextChannel If provided, the new rules channel. public_updates_channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildTextChannel If provided, the new public updates channel. preferred_locale : hikari.undefined.UndefinedNoneOr[builtins.str] If provided, the new preferred locale. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.RESTGuild The edited guild. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. Or you are missing the hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission or if you tried to pass ownership without being the server owner. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_guild", "u": 65, "d": "Delete a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete. This may be the object or the ID of an existing guild. Raises    hikari.errors.ForbiddenError If you are not the owner of the guild. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If you own the guild or if you are not in it. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_channels", "u": 65, "d": "Fetch the channels in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the channels from. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.channels.GuildChannel] The requested channels. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_guild_text_channel", "u": 65, "d": "Create a text channel in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the channels topic. Maximum 1024 characters. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mark the channel as NSFW. rate_limit_per_user : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the ammount of seconds a user has to wait before being able to send another message in the channel. Maximum 21600 seconds. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildTextChannel The created channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_guild_news_channel", "u": 65, "d": "Create a news channel in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the channels topic. Maximum 1024 characters. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mark the channel as NSFW. rate_limit_per_user : hikari.undefined.UndefinedOr[hikari.internal.time.Intervalish] If provided, the ammount of seconds a user has to wait before being able to send another message in the channel. Maximum 21600 seconds. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildNewsChannel The created channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_guild_voice_channel", "u": 65, "d": "Create a voice channel in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). user_limit : hikari.undefined.UndefinedOr[builtins.int] If provided, the maximum users in the channel at once. Must be between 0 and 99 with 0 meaning no limit. bitrate : hikari.undefined.UndefinedOr[builtins.int] If provided, the bitrate for the channel. Must be between 8000 and 96000 or 8000 and 128000 for VIP servers. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildVoiceChannel The created channel. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_guild_category", "u": 65, "d": "Create a category in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the channel in. This may be the object or the ID of an existing guild. name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the category. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the category. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.channels.GuildCategory The created category. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.reposition_channels", "u": 65, "d": "Reposition the channels in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to reposition the channels in. This may be the object or the ID of an existing guild. positions : typing.Mapping[builtins.int, hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel A mapping of of the object or the ID of an existing channel to the new position, relative to their parent category, if any. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_CHANNEL permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_member", "u": 65, "d": "Fetch a guild member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to get the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to get the member for. This may be the object or the ID of an existing user. Returns    - hikari.guilds.Member The requested member. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or the user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_members", "u": 65, "d": "Fetch the members from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the members of. This may be the object or the ID of an existing guild. Returns    - hikari.iterators.LazyIterator[hikari.guilds.Member] An iterator to fetch the members.  ! note This call is not a coroutine function, it returns a special type of lazy iterator that will perform API calls as you iterate across it. See  hikari.iterators for the full API for this iterator type. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note The exceptions on this endpoint will only be raised once the result is awaited or iterated over. Invoking this function itself will not raise anything.  ! warning This endpoint requires the  GUILD_MEMBERS intent. Alternatively, you can use  search_members which doesn't require any intents.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.search_members", "u": 65, "d": "Search the members in a guild by nickname and username. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The object or ID of the guild to search members in. name : str The query to match username(s) and nickname(s) against. Returns    - typing.Sequence[hikari.guilds.Member] A sequence of the members who matched the provided  name . Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! note Unlike  RESTClient.fetch_members this endpoint isn't paginated and therefore will return all the members in one go rather than needing to be asynchronously iterated over.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_member", "u": 65, "d": "Edit a guild member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. Other Parameters         nick : hikari.undefined.UndefinedNoneOr[builtins.str] If provided, the new nick for the member. If  builtins.None , will remove the members nick. Requires the  MANAGE_NICKNAMES permission. roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the new roles for the member. Requires the  MANAGE_ROLES permission. mute : hikari.undefined.UndefinedOr[builtins.bool] If provided, the new server mute state for the member. Requires the  MUTE_MEMBERS permission. deaf : hikari.undefined.UndefinedOr[builtins.bool] If provided, the new server deaf state for the member. Requires the  DEAFEN_MEMBERS permission. voice_channel : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel ] If provided,  builtins.None or the object or the ID of an existing voice channel to move the member to. If  builtins.None , will disconnect the member from voice. Requires the  MOVE_MEMBERS permission and the  CONNECT permission in the original voice channel and the target voice channel.  ! note If the member is not in a voice channel, this will take no effect. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.Member Object of the member that was updated. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing a permission to do an action. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or the user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_my_nick", "u": 65, "d": "Edit the associated token's member nick. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit. This may be the object or the ID of an existing guild. nick : typing.Optional[builtins.str] The new nick. If  builtins.None , will remove the nick. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  CHANGE_NICKNAME permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.add_role_to_member", "u": 65, "d": "Add a role to a member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild where the member is in. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to add the role to. This may be the object or the ID of an existing user. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to add. This may be the object or the ID of an existing role. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild, user or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.remove_role_from_member", "u": 65, "d": "Remove a role from a member. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild where the member is in. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to remove the role from. This may be the object or the ID of an existing user. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to remove. This may be the object or the ID of an existing role. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild, user or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.kick_user", "u": 65, "d": "Kick a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to kick the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.kick_member", "u": 65, "d": "Kick a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to kick the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.ban_user", "u": 65, "d": "Ban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to ban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         delete_message_days : hikari.undefined.UndefinedNoneOr[builtins.int] If provided, the number of days to delete messages for. This must be between 0 and 7. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.ban_member", "u": 65, "d": "Ban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to ban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to kick. This may be the object or the ID of an existing user. Other Parameters         delete_message_days : hikari.undefined.UndefinedNoneOr[builtins.int] If provided, the number of days to delete messages for. This must be between 0 and 7. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.unban_user", "u": 65, "d": "Unban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to unban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to unban. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.unban_member", "u": 65, "d": "Unban a member from a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to unban the member from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to unban. This may be the object or the ID of an existing user. Other Parameters         reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_ban", "u": 65, "d": "Fetch the guild's ban info for a user. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the ban from. This may be the object or the ID of an existing guild. user : hikari.snowflakes.SnowflakeishOr[hikari.users.PartialUser] The user to fetch the ban of. This may be the object or the ID of an existing user. Returns    - hikari.guilds.GuildMemberBan The requested ban info. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or user are not found or if the user is not banned. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_bans", "u": 65, "d": "Fetch the bans of a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the bans from. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.guilds.GuildMemberBan] The requested bans. Raises    hikari.errors.ForbiddenError If you are missing the  BAN_MEMBERS permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_roles", "u": 65, "d": "Fetch the roles of a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the roles from. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.guilds.Role] The requested roles. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_role", "u": 65, "d": "Create a role. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create the role in. This may be the object or the ID of an existing guild. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the name for the role. permissions : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] The permissions to give the role. This will default to setting NO roles if left to the default value. This is in contrast to default behaviour on Discord where some random permissions will be set by default. color : hikari.undefined.UndefinedOr[hikari.colors.Colorish] If provided, the role's color. colour : hikari.undefined.UndefinedOr[hikari.colors.Colorish] An alias for  color . hoist : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to hoist the role. mentionable : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to make the role mentionable. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.Role The created role. Raises    builtins.TypeError If both  color and  colour are specified. hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.reposition_roles", "u": 65, "d": "Reposition the roles in a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to reposition the roles in. This may be the object or the ID of an existing guild. positions : typing.Mapping[builtins.int, hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole A mapping of the position to the role. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_role", "u": 65, "d": "Edit a role. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit the role in. This may be the object or the ID of an existing guild. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to edit. This may be the object or the ID of an existing role. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] If provided, the new name for the role. permissions : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the new permissions for the role. color : hikari.undefined.UndefinedOr[hikari.colors.Colorish] If provided, the new color for the role. colour : hikari.undefined.UndefinedOr[hikari.colors.Colorish] An alias for  color . hoist : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to hoist the role. mentionable : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to make the role mentionable. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.Role The edited role. Raises    builtins.TypeError If both  color and  colour are specified. hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_role", "u": 65, "d": "Delete a role. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete the role in. This may be the object or the ID of an existing guild. role : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialRole] The role to delete. This may be the object or the ID of an existing role. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_ROLES permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild or role are not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.estimate_guild_prune_count", "u": 65, "d": "Estimate the guild prune count. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to estimate the guild prune count for. This may be the object or the ID of an existing guild. Other Parameters         days : hikari.undefined.UndefinedOr[builtins.int] If provided, number of days to count prune for. include_roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole ] If provided, the role(s) to include. By default, this endpoint will not count users with roles. Providing roles using this attribute will make members with the specified roles also get included into the count. Returns    - builtins.int The estimated guild prune count. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.begin_guild_prune", "u": 65, "d": "Begin the guild prune. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to begin the guild prune in. This may be the object or the ID of an existing guild. Other Parameters         days : hikari.undefined.UndefinedOr[builtins.int] If provided, number of days to count prune for. compute_prune_count: hikari.snowflakes.SnowflakeishOr[builtins.bool] If provided, whether to return the prune count. This is discouraged for large guilds. include_roles : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole If provided, the role(s) to include. By default, this endpoint will not count users with roles. Providing roles using this attribute will make members with the specified roles also get included into the count. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - typing.Optional[builtins.int] If  compute_prune_count is not provided or  builtins.True , the number of members pruned. Else  builtins.None . Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  KICK_MEMBERS permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_voice_regions", "u": 65, "d": "Fetch the available voice regions for a guild.  ! note Unlike  RESTClient.fetch_voice_regions , this will return the VIP regions if the guild has access to them. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the voice regions for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.voices.VoiceRegion] The available voice regions for the guild. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_invites", "u": 65, "d": "Fetch the guild's invites. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the invites for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.invites.InviteWithMetadata] The invites for the guild. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_integrations", "u": 65, "d": "Fetch the guild's integrations. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the integrations for. This may be the object or the ID of an existing guild. Returns    - typing.Sequence[hikari.guilds.Integration] The integrations for the guild. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the guild is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_widget", "u": 65, "d": "Fetch a guilds's widget. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the widget from. This can be the object or the ID of an existing guild. Returns    - hikari.guilds.GuildWidget The requested guild widget. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_widget", "u": 65, "d": "Fetch a guilds's widget. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit the widget in. This can be the object or the ID of an existing guild. Other Parameters         channel : hikari.undefined.UndefinedNoneOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildChannel If provided, the channel to set the widget to. If  builtins.None , will not set to any. enabled : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to enable the widget. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.guilds.GuildWidget The edited guild widget. Raises    hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_welcome_screen", "u": 65, "d": "Fetch a guild's welcome screen. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] Object or ID of the guild to fetch the welcome screen for. Returns    - hikari.invites.WelcomeScreen The requested welcome screen. Raises    hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_welcome_screen", "u": 65, "d": "Edit the welcome screen of a community guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] ID or object of the guild to edit the welcome screen for. Other Parameters         description : undefined.UndefinedNoneOr[builtins.str] The description to set for the guild's welcome screen. This may be  builtins.None to unset the description or left as  hikari.undefined.UNDEFINED to leave the description unchanged. enabled : undefined.UndefinedOr[builtins.bool] Whether the guild's welcome screen should be enabled. Leave as  hikari.undefined.UNDEFINED to leave this unchanged. channels : hikari.undefined.UndefinedNoneOr[typing.Sequence[hikari.guilds.WelcomeChanne; A sequence of up to 5 public channels to set in this guild's welcome screen. This may be passed as  builtins.None to remove all welcome channels or left as  hikari.undefined.UNDEFINED to leave unchanged.  ! note Custom emojis may only be included in a guild's welcome channels if it's boost status is tier 2 or above. Returns    - hikari.guilds.WelcomeScreen The edited guild welcome screen. Raises    hikari.errors.BadRequestError If more than 5 welcome channels are provided or if a custom emoji is included on a welcome channel in a guild that doesn't have tier 2 of above boost status or if a private channel is included as a welcome channel. hikari.errors.ForbiddenError If you are missing the  MANAGE_GUILD permission, are not part of the guild or the guild doesn't have access to the community welcome screen feature. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_vanity_url", "u": 65, "d": "Fetch a guild's vanity url. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to fetch the vanity url from. This can be the object or the ID of an existing guild. Returns    - hikari.invites.VanityURL The requested invite. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_template", "u": 65, "d": "Create a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to create a template from. name : str The name to use for the created template. Other Parameters         description : hikari.undefined.UndefinedNoneOr[builtins.str] The description to set for the template. Returns    - hikari.templates.Template The object of the created template. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.create_guild_from_template", "u": 65, "d": "Make a guild from a template. Parameters      template: hikari.templates.Templateish The objecr or code of the template to create a guild based on. name : builtins.str The new guilds name. Other Parameters         icon : hikari.undefined.UndefinedOr[hikari.files.Resourceish] If provided, the guild icon to set. Must be a 1024x1024 image or can be an animated gif when the guild has the  ANIMATED_ICON feature. Returns    - hikari.guilds.RESTGuild Object of the created guild.  ! note This endpoint can only be used by bots in less than 10 guilds. Raises    hikari.errors.BadRequestError If any of the fields that are passed have an invalid value or if you call this as a bot that's in more than 10 guilds. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.delete_template", "u": 65, "d": "Delete a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to delete a template in. template : hikari.templates.Templateish Object or ID of the template to delete. Returns    - hikari.templates.Template The deleted template's object. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.edit_template", "u": 65, "d": "Modify a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to edit a template in. template : hikari.templates.Templateish Object or ID of the template to modify. Other Parameters         name : hikari.undefined.UndefinedOr[builtins.str] The name to set for this template. description : hikari.undefined.UndefinedNoneOr[builtins.str] The description to set for the template. Returns    - hikari.templates.Template The object of the edited template. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or you are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_template", "u": 65, "d": "Fetch a guild template. Parameters      template : hikari.templates.Templateish The object or string code of the template to fetch. Returns    - hikari.templates.Template The object of the found template. Raises    hikari.errors.NotFoundError If the template was not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.fetch_guild_templates", "u": 65, "d": "Fetch the templates for a guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The object or ID of the guild to get the templates for. Returns    - typing.Sequence[hikari.templates.Template] A sequence of the found template objects. Raises    hikari.errors.ForbiddenError If you are not part of the guild. hikari.errors.NotFoundError If the guild is not found or are missing the  MANAGE_GUILD permission. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.sync_guild_template", "u": 65, "d": "Create a guild template. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild to sync a template in template : hikari.templates.Templateish Object or ID of the template to sync. Returns    - hikari.templates.Template The object of the synced template. Raises    hikari.errors.ForbiddenError If you are not part of the guild or are missing the  MANAGE_GUILD permission. hikari.errors.NotFoundError If the guild or template is not found. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.rest.RESTClientImpl.buckets", "u": 65, "d": "Bucket ratelimiter manager."}, {"r": "hikari.impl.rest.RESTClientImpl.global_rate_limit", "u": 65, "d": "Global ratelimiter."}, {"r": "hikari.impl.voice", "u": 66, "d": "Implementation of a simple voice management system."}, {"r": "hikari.impl.voice.VoiceComponentImpl", "u": 66, "d": "A standard voice component management implementation. This is the regular implementation you will generally use to connect to voice channels with."}, {"r": "hikari.impl.voice.VoiceComponentImpl.disconnect", "u": 66, "d": "Shut down all connections, waiting for them to terminate. This will not close the voice component.", "f": 1}, {"r": "hikari.impl.voice.VoiceComponentImpl.close", "u": 66, "d": "Shut down all connections, waiting for them to terminate. Once this is done, unsubscribe from any events. If you simply wish to disconnect every connection, use  disconnect instead.", "f": 1}, {"r": "hikari.impl.voice.VoiceComponentImpl.connect_to", "u": 66, "d": "Connect to a given voice channel. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.Guild] The guild to connect to. channel : hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel] The channel or channel ID to connect to. voice_connection_type : typing.Type[VoiceConnection] The type of voice connection to use. This should be initialized internally using the  VoiceConnection.initialize  builtins.classmethod . deaf : builtins.bool Defaulting to  builtins.False , if  builtins.True , the client will enter the voice channel deafened (thus unable to hear other users). mute : builtins.bool Defaulting to  builtins.False , if  builtins.True , the client will enter the voice channel muted (thus unable to send audio).  kwargs : typing.Any Any arguments to provide to the  VoiceConnection.initialize method. Returns    - VoiceConnection A voice connection implementation of some sort.", "f": 1}, {"r": "hikari.impl.voice.VoiceComponentImpl.connections", "u": 66, "d": "Return a mapping of guild-id to active voice connection."}, {"r": "hikari.impl.cache", "u": 67, "d": "Basic implementation of a cache for general bots and gateway apps."}, {"r": "hikari.impl.cache.CacheImpl", "u": 67, "d": "In-memory cache implementation. Parameters      app : hikari.traits.BotAware The object of the bot aware app this is bound to. settings : hikari.config.CacheSettings The cache settings to use."}, {"r": "hikari.impl.cache.CacheImpl.settings", "u": 67, "d": ""}, {"r": "hikari.impl.cache.CacheImpl.clear", "u": 67, "d": "Clear the full cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_emojis", "u": 67, "d": "Remove all the known custom emoji objects from the cache.  ! note This will skip emojis that are being kept alive by a reference on a presence entry. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A cache view of emoji IDs to objects of the emojis that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_emojis_for_guild", "u": 67, "d": "Remove the known custom emoji objects cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove the cached emoji objects for.  ! note This will skip emojis that are being kept alive by a reference on a presence entry. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of the emojis that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_emoji", "u": 67, "d": "Remove a known custom emoji from the cache. Parameters      emoji_id : hikari.snowflakes.Snowflakeish The ID of the emoji to remove from the cache.  ! note This will not delete emojis that are being kept alive by a reference on a presence entry. Returns    - typing.Optional[hikari.emojis.KnownCustomEmoji] The object of the emoji that was removed from the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_emoji", "u": 67, "d": "Get a known custom emoji from the cache. Parameters      emoji_id : hikari.snowflakes.Snowflakeish The ID of the emoji to get from the cache. Returns    - typing.Optional[hikari.emojis.KnownCustomEmoji] The object of the emoji that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_emojis_view", "u": 67, "d": "Get a view of the known custom emoji objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of the known custom emojis found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_emojis_view_for_guild", "u": 67, "d": "Get a view of the known custom emojis cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached emoji objects for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.emojis.KnownCustomEmoji] A view of emoji IDs to objects of emojis found in the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_emoji", "u": 67, "d": "Add a known custom emoji to the cache. Parameters      emoji : hikari.emojis.KnownCustomEmoji The object of the known custom emoji to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_emoji", "u": 67, "d": "Update an emoji object in the cache. Parameters      emoji : hikari.emojis.KnownCustomEmoji The object of the emoji to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.emojis.KnownCustomEmoji], typing.Optional[hikari.emojis.KnownCustomEmoji A tuple of the old cached emoji object if found (else  builtins.None ) and the new cached emoji object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_guilds", "u": 67, "d": "Remove all the guild objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] The cache view of guild IDs to guild objects that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_guild", "u": 67, "d": "Remove a guild object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild that was removed from the cache, will be  builtins.None if not found.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_guild", "u": 67, "d": "Get a guild from the cache.  ! warning This will return a guild regardless of whether it is available or not. To only query available guilds, use  get_available_guild instead. Likewise, to only query unavailable guilds, use  get_unavailable_guild . Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_available_guild", "u": 67, "d": "Get the object of an available guild from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_unavailable_guild", "u": 67, "d": "Get the object of a unavailable guild from the cache.  ! note Unlike  Cache.get_available_guild , the objects returned by this method will likely be out of date and inaccurate as they are considered unavailable, meaning that we are not receiving gateway events for this guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get from the cache. Returns    - typing.Optional[hikari.guilds.GatewayGuild] The object of the guild if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_available_guilds_view", "u": 67, "d": "Get a view of the available guild objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] A view of guild IDs to the guild objects found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_unavailable_guilds_view", "u": 67, "d": "Get a view of the unavailable guild objects in the cache.  ! note Unlike  Cache.get_available_guilds_view , the objects returned by this method will likely be out of date and inaccurate as they are considered unavailable, meaning that we are not receiving gateway events for this guild. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.GatewayGuild] A view of guild IDs to the guild objects found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_guild", "u": 67, "d": "Add a guild object to the cache. Parameters      guild : hikari.guilds.GatewayGuild The object of the guild to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_guild_availability", "u": 67, "d": "Set whether a cached guild is available or not. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to set the availability for. is_available : builtins.bool The availability to set for the guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_guild", "u": 67, "d": "Update a guild in the cache. Parameters      guild : hikari.guilds.GatewayGuild The object of the guild to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.guilds.GatewayGuild], typing.Optional[hikari.guilds.GatewayGuild A tuple of the old cached guild object if found (else  builtins.None ) and the object of the guild that was added to the cache if it could be added (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_guild_channels", "u": 67, "d": "Remove all guild channels from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_guild_channels_for_guild", "u": 67, "d": "Remove guild channels from the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove cached channels for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_guild_channel", "u": 67, "d": "Remove a guild channel from the cache. Parameters      channel_id : hikari.snowflakes.Snowflakeish The ID of the guild channel to remove from the cache. Returns    - typing.Optional[hikari.channels.GuildChannel] The object of the guild channel that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_guild_channel", "u": 67, "d": "Get a guild channel from the cache. Parameters      channel_id : hikari.snowflakes.Snowflakeish The ID of the guild channel to get from the cache. Returns    - typing.Optional[hikari.channels.GuildChannel] The object of the guild channel that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_guild_channels_view", "u": 67, "d": "Get a view of the guild channels in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_guild_channels_view_for_guild", "u": 67, "d": "Get a view of the guild channels in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.channels.GuildChannel] A view of channel IDs to objects of the guild channels found in the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_guild_channel", "u": 67, "d": "Add a guild channel to the cache. Parameters      channel : hikari.channels.GuildChannel The guild channel based object to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_guild_channel", "u": 67, "d": "Update a guild channel in the cache, Parameters      channel : hikari.channels.GuildChannel The object of the channel to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.channels.GuildChannel], typing.Optional[hikari.channels.GuildChannel A tuple of the old cached guild channel if found (else  builtins.None ) and the new cached guild channel if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_invites", "u": 67, "d": "Remove all the invite objects from the cache. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of invite code strings to objects of the invites that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_invites_for_guild", "u": 67, "d": "Remove the invite objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of invite code strings to objects of the invites that were removed from the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_invites_for_channel", "u": 67, "d": "Remove the invite objects in the cache for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove invite objects for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to remove invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of invite code strings to objects of the invites that were removed from the cache for the specified channel.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_invite", "u": 67, "d": "Remove an invite object from the cache. Parameters      code : str The string code of the invite to remove from the cache. Returns    - typing.Optional[hikari.invites.InviteWithMetadata] The object of the invite that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_invite", "u": 67, "d": "Get an invite object from the cache. Parameters      code : str The string code of the invite to get from the cache. Returns    - typing.Optional[hikari.invites.InviteWithMetadata] The object of the invite that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_invites_view", "u": 67, "d": "Get a view of the invite objects in the cache. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of string codes to objects of the invites that were found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_invites_view_for_guild", "u": 67, "d": "Get a view of the invite objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get invite objects for. Returns    - CacheView[builtins.str, hikari.invites.InviteWithMetadata] A view of string code to objects of the invites that were found in the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_invites_view_for_channel", "u": 67, "d": "Get a view of the invite objects in the cache for a specified channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get invite objects for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to get invite objects for. Returns    - CacheView[str, invites.InviteWithMetadata] A view of string codes to objects of the invites there were found in the cache for the specified channel.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_invite", "u": 67, "d": "Add an invite object to the cache. Parameters      invite : hikari.invites.InviteWithMetadata The object of the invite to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_invite", "u": 67, "d": "Update an invite in the cache. Parameters      invite : hikari.invites.InviteWithMetadata The object of the invite to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.invites.InviteWithMetadata], typing.Optional[hikari.invites.InviteWithMetadata A tuple of the old cached invite object if found (else  builtins.None ) and the new cached invite object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_me", "u": 67, "d": "Remove the own user object from the cache. Returns    - typing.Optional[hikari.users.OwnUser] The own user object that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_me", "u": 67, "d": "Get the own user object from the cache. Returns    - typing.Optional[hikari.users.OwnUser] The own user object that was found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_me", "u": 67, "d": "Set the own user object in the cache. Parameters      user : hikari.users.OwnUser The own user object to set in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_me", "u": 67, "d": "Update the own user entry in the cache. Parameters      user : hikari.users.OwnUser The own user object to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.users.OwnUser], typing.Optional[hikari.users.OwnUser A tuple of the old cached own user object if found (else  builtins.None ) and the new cached own user object if it could be cached, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_members", "u": 67, "d": "Remove all the guild members in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member A view of guild IDs to views of user IDs to objects of the members that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_members_for_guild", "u": 67, "d": "Remove the members for a specific guild from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove cached members for.  ! note This will skip members that are being referenced by other entries in the cache; a matching voice state will keep a member entry alive. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member] The view of user IDs to the member objects that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_member", "u": 67, "d": "Remove a member object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove a member from the cache for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to remove a member from the cache for.  ! note You cannot delete a member entry that's being referenced by other entries in the cache; a matching voice state will keep a member entry alive. Returns    - typing.Optional[hikari.guilds.Member] The object of the member that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_member", "u": 67, "d": "Get a member object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish user_id : hikari.snowflakes.Snowflakeish Returns    - typing.Optional[hikari.guilds.Member] The object of the member found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_members_view", "u": 67, "d": "Get a view of all the members objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member A view of guild IDs to views of user IDs to objects of the members that were found from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_members_view_for_guild", "u": 67, "d": "Get a view of the members cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached member view for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Member] The view of user IDs to the members cached for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_member", "u": 67, "d": "Add a member object to the cache. Parameters      member : hikari.guilds.Member The object of the member to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_member", "u": 67, "d": "Update a member in the cache. Parameters      member : hikari.guilds.Member The object of the member to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.guilds.Member], typing.Optional[hikari.guilds.Member A tuple of the old cached member object if found (else  builtins.None ) and the new cached member object if it could be cached (else  builtins.None )", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_presences", "u": 67, "d": "Remove all the presences in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence A view of guild IDs to views of user IDs to objects of the presences that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_presences_for_guild", "u": 67, "d": "Remove the presences in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove presences for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] A view of user IDs to objects of the presences that were removed from the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_presence", "u": 67, "d": "Remove a presence from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove a presence for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to remove a presence for. Returns    - typing.Optional[hikari.presences.MemberPresence] The object of the presence that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_presence", "u": 67, "d": "Get a presence object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get a presence for. user_id : hikari.snowflakes.Snowflakeish The ID of the user to get a presence for. Returns    - typing.Optional[hikari.presences.MemberPresence] The object of the presence that was found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_presences_view", "u": 67, "d": "Get a view of all the presence objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake A view of guild IDs to views of user IDs to objects of the presences found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_presences_view_for_guild", "u": 67, "d": "Get a view of the presence objects in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached presence objects for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.presences.MemberPresence] A view of user IDs to objects of the presence found in the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_presence", "u": 67, "d": "Add a presence object to the cache. Parameters      presence : hikari.presences.MemberPresence The object of the presence to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_presence", "u": 67, "d": "Update a presence object in the cache. Parameters      presence : hikari.presences.MemberPresence The object of the presence to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.presences.MemberPresence], typing.Optional[hikari.presences.MemberPresence A tuple of the old cached invite object if found (else  builtins.None and the new cached invite object if it could be cached ( else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_roles", "u": 67, "d": "Remove all role objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_roles_for_guild", "u": 67, "d": "Remove role objects from the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove roles for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were removed from the cache for the specific guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_role", "u": 67, "d": "Remove a role object form the cache. Parameters      role_id : hikari.snowflakes.Snowflakeish The ID of the role to remove from the cache. Returns    - typing.Optional[hikari.guilds.Role] The object of the role that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_role", "u": 67, "d": "Get a role object from the cache. Parameters      role_id : hikari.snowflakes.Snowflakeish The ID of the role to get from the cache. Returns    - typing.Optional[hikari.guilds.Role] The object of the role found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_roles_view", "u": 67, "d": "Get a view of all the role objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_roles_view_for_guild", "u": 67, "d": "Get a view of the roles in the cache for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached roles for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.guilds.Role] A view of role IDs to objects of the roles that were found in the cache for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_role", "u": 67, "d": "Add a role object to the cache. Parameters      role : hikari.guilds.Role The object of the role to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_role", "u": 67, "d": "Update a role in the cache. Parameters      role : hikari.guilds.Role The object of the role to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.guilds.Role], typing.Optional[hikari.guilds.Role A tuple of the old cached role object if found (else  builtins.None and the new cached role object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_user", "u": 67, "d": "Get a user object from the cache. Parameters      user_id : hikari.snowflakes.Snowflakeish The ID of the user to get from the cache. Returns    - typing.Optional[hikari.users.User] The object of the user that was found in the cache, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_users_view", "u": 67, "d": "Get a view of the user objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.users.User] The view of user IDs to the users found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_voice_states", "u": 67, "d": "Remove all voice state objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState A view of guild IDs to views of user IDs to objects of the voice states that were removed from the states.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_voice_states_for_channel", "u": 67, "d": "Remove the voice state objects cached for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove voice states for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to remove voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice state that were removed from the cache for the specified channel.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_voice_states_for_guild", "u": 67, "d": "Clear the voice state objects cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to remove cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to the voice state objects that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_voice_state", "u": 67, "d": "Remove a voice state object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild the voice state to remove is related to. user_id : hikari.snowflakes.Snowflakeish The ID of the user who the voice state to remove belongs to. Returns    - typing.Optional[hikari.voices.VoiceState] The object of the voice state that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_voice_state", "u": 67, "d": "Get a voice state object from the cache. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get a voice state for. user_id :hikari.snowflakes.Snowflakeish The ID of the user to get a voice state for. Returns    - typing.Optional[hikari.voices.VoiceState] The object of the voice state that was found in the cache, or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_voice_states_view", "u": 67, "d": "Get a view of all the voice state objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, ICacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState A view of guild IDs to views of user IDs to objects of the voice states that were found in the cache,", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_voice_states_view_for_channel", "u": 67, "d": "Get a view of the voice states cached for a specific channel. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached voice states for. channel_id : hikari.snowflakes.Snowflakeish The ID of the channel to get the cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice states found cached for the specified channel.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_voice_states_view_for_guild", "u": 67, "d": "Get a view of the voice states cached for a specific guild. Parameters      guild_id : hikari.snowflakes.Snowflakeish The ID of the guild to get the cached voice states for. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.voices.VoiceState] A view of user IDs to objects of the voice states found cached for the specified guild.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_voice_state", "u": 67, "d": "Add a voice state object to the cache. Parameters      voice_state : hikari.voices.VoiceState The object of the voice state to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_voice_state", "u": 67, "d": "Update a voice state object in the cache. Parameters      voice_state : hikari.voices.VoiceState The object of the voice state to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.voices.VoiceState], typing.Optional[hikari.voices.VoiceState A tuple of the old cached voice state if found (else  builtins.None ) and the new cached voice state object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.clear_messages", "u": 67, "d": "Remove all message objects from the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.messages.Message] A view of message objects that were removed from the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.delete_message", "u": 67, "d": "Remove a message object from the cache. Parameters      message_id : hikari.snowflakes.Snowflakeish The ID of the messages to remove the cache. Returns    - typing.Optional[hikari.messages.Message] The object of the message that was removed from the cache if found, else  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_message", "u": 67, "d": "Get a message object from the cache. Parameters      message_id : hikari.snowflakes.Snowflakeish The ID of the message to get from the cache. Returns    - typing.Optional[hikari.messages.Message] The object of the message found in the cache or  builtins.None .", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.get_messages_view", "u": 67, "d": "Get a view of all the message objects in the cache. Returns    - CacheView[hikari.snowflakes.Snowflake, hikari.messages.Message] A view of message objects found in the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.set_message", "u": 67, "d": "Add a message object to the cache. Parameters      message : hikari.messages.Message The object of the message to add to the cache.", "f": 1}, {"r": "hikari.impl.cache.CacheImpl.update_message", "u": 67, "d": "Update a message in the cache. Parameters      message : typing.Union[hikari.messages.PartialMessage, hikari.messages.Message] The object of the message to update in the cache. Returns    - typing.Tuple[typing.Optional[hikari.messages.Message], typing.Optional[hikari.messages.Message A tuple of the old cached message object if found (else  builtins.None ) and the new cached message object if it could be cached (else  builtins.None ).", "f": 1}, {"r": "hikari.impl.shard", "u": 68, "d": "Single-shard implementation for the V8 event gateway for Discord."}, {"r": "hikari.impl.shard.GatewayShardImpl", "u": 68, "d": "Implementation of a V8 compatible gateway. Parameters      token : builtins.str The bot token to use. url : builtins.str The gateway URL to use. This should not contain a query-string or fragments. event_manager : hikari.api.event_manager.EventManager The event manager this shard should make calls to. event_factory : hikari.api.event_factory.EventFactory The event factory this shard should use. Other Parameters         compression : typing.Optional[buitlins.str] Compression format to use for the shard. Only supported values are  \"payload_zlib_stream\" or  builtins.None to disable it. initial_activity : typing.Optional[hikari.presences.Activity] The initial activity to appear to have for this shard, or  builtins.None if no activity should be set initially. This is the default. initial_idle_since : typing.Optional[datetime.datetime] The datetime to appear to be idle since, or  builtins.None if the shard should not provide this. The default is  builtins.None . initial_is_afk : bool Whether to appear to be AFK or not on login. Defaults to  builtins.False . initial_status : hikari.presences.Status The initial status to set on login for the shard. Defaults to  hikari.presences.Status.ONLINE . intents : hikari.intents.Intents Collection of intents to use. large_threshold : builtins.int The number of members to have in a guild for it to be considered large. shard_id : builtins.int The shard ID. shard_count : builtins.int The shard count. http_settings : hikari.config.HTTPSettings The HTTP-related settings to use while negotiating a websocket. proxy_settings : hikari.config.ProxySettings The proxy settings to use while negotiating a websocket. data_format : builtins.str Data format to use for inbound data. Only supported format is  \"json\" .  ! note If all four of  initial_activity ,  initial_idle_since ,  initial_is_afk , and  initial_status are not defined and left to their default values, then the presence will not be _updated_ on startup at all. If any of these _are_ specified, then any that are not specified will be set to sane defaults, which may change the previous status. This will only occur during startup, and is an artifact of how Discord manages these updates internally. All other calls to update the status of the shard will support partial updates."}, {"r": "hikari.impl.shard.GatewayShardImpl.heartbeat_latency", "u": 68, "d": "Return the shard's most recent heartbeat latency. Returns    - builtins.float Heartbeat latency measured in seconds. If the information is not yet available, then this will be  float('nan') instead."}, {"r": "hikari.impl.shard.GatewayShardImpl.id", "u": 68, "d": "Return the shard ID for this shard. Returns    - builtins.int The integer 0-based shard ID."}, {"r": "hikari.impl.shard.GatewayShardImpl.intents", "u": 68, "d": "Return the intents set on this shard. Returns    - hikari.intents.Intents The intents being used on this shard."}, {"r": "hikari.impl.shard.GatewayShardImpl.is_alive", "u": 68, "d": "Return  builtins.True if the shard is alive and connected. Returns    - builtins.bool  builtins.True if connected, or  builtins.False if not."}, {"r": "hikari.impl.shard.GatewayShardImpl.shard_count", "u": 68, "d": "Return the total number of shards expected in the entire application. Returns    - builtins.int A number of shards greater than or equal to 1."}, {"r": "hikari.impl.shard.GatewayShardImpl.close", "u": 68, "d": "Close the websocket if it is connected, otherwise do nothing.", "f": 1}, {"r": "hikari.impl.shard.GatewayShardImpl.get_user_id", "u": 68, "d": "Return the user ID. If the shard has not connected fully yet, this should wait until the ID is set before returning. Returns    - hikari.snowflakes.Snowflake The user ID for the application user.", "f": 1}, {"r": "hikari.impl.shard.GatewayShardImpl.join", "u": 68, "d": "Wait for this shard to close, if running.", "f": 1}, {"r": "hikari.impl.shard.GatewayShardImpl.request_guild_members", "u": 68, "d": "Request for a guild chunk. Parameters      guild: hikari.guilds.Guild The guild to request chunk for. Other Parameters         include_presences: hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to request presences. query: builtins.str If not    , request the members which username starts with the string. limit: builtins.int Maximum number of members to send matching the query. users: hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishSequence[hikari.users.User If provided, the users to request for. nonce: hikari.undefined.UndefinedOr[builtins.str] If provided, the nonce to be sent with guild chunks.  ! note To request the full list of members, set  query to    (empty string) and  limit to  0 . Raises    ValueError When trying to specify  users with  query / limit , if  limit is not between 0 and 100, both inclusive or if  users length is over 100. hikari.errors.MissingIntentError When trying to request presences without the  GUILD_MEMBERS or when trying to request the full list of members without  GUILD_PRESENCES .", "f": 1}, {"r": "hikari.impl.shard.GatewayShardImpl.start", "u": 68, "d": "Start the shard, wait for it to become ready.", "f": 1}, {"r": "hikari.impl.shard.GatewayShardImpl.update_presence", "u": 68, "d": "Update the presence of the shard user. If the shard is not alive, no physical data will be sent, however, the new presence settings will be remembered for when the shard does connect. Other Parameters         idle_since : hikari.undefined.UndefinedNoneOr[datetime.datetime] The datetime that the user started being idle. If undefined, this will not be changed. afk : hikari.undefined.UndefinedOr[builtins.bool] If  builtins.True , the user is marked as AFK. If  builtins.False , the user is marked as being active. If undefined, this will not be changed. activity : hikari.undefined.UndefinedNoneOr[hikari.presences.Activity] The activity to appear to be playing. If undefined, this will not be changed. status : hikari.undefined.UndefinedOr[hikari.presences.Status] The web status to show. If undefined, this will not be changed.", "f": 1}, {"r": "hikari.impl.shard.GatewayShardImpl.update_voice_state", "u": 68, "d": "Update the voice state for this shard in a given guild. Parameters      guild : hikari.snowflakes.SnowflakeishOr[hikari.guilds.PartialGuild] The guild or guild ID to update the voice state for. channel : typing.Optional[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildVoiceChannel The channel or channel ID to update the voice state for. If  builtins.None then the bot will leave the voice channel that it is in for the given guild. self_mute : builtins.bool If  builtins.True , the bot will mute itself in that voice channel. If  builtins.False , then it will unmute itself. self_deaf : builtins.bool If  builtins.True , the bot will deafen itself in that voice channel. If  builtins.False , then it will undeafen itself.", "f": 1}, {"r": "hikari.impl.buckets", "u": 69, "d": "Rate-limit extensions for RESTful bucketed endpoints. Provides implementations for the complex rate limiting mechanisms that Discord requires for rate limit handling that conforms to the passed bucket headers correctly. This was initially a bit of a headache for me to understand, personally, since there is a lot of \"implicit detail\" that is easy to miss from the documentation. In an attempt to make this somewhat understandable by anyone else, I have tried to document the theory of how this is handled here. What is the theory behind this implementation?                        In this module, we refer to a  hikari.internal.routes.CompiledRoute as a definition of a route with specific major parameter values included (e.g.  POST /channels/123/messages ), and a  hikari.internal.routes.Route as a definition of a route without specific parameter values included (e.g.  POST /channels/{channel}/messages ). We can compile a  hikari.internal.routes.CompiledRoute from a  hikari.internal.routes.Route by providing the corresponding parameters as kwargs, as you may already know. In this module, a \"bucket\" is an internal data structure that tracks and enforces the rate limit state for a specific  hikari.internal.routes.CompiledRoute , and can manage delaying tasks in the event that we begin to get rate limited. It also supports providing in-order execution of queued tasks. Discord allocates types of buckets to routes. If you are making a request and there is a valid rate limit on the route you hit, you should receive an  X-RateLimit-Bucket header from the server in your response. This is a hash that identifies a route based on internal criteria that does not include major parameters. This  X-RateLimitBucket is known in this module as an \"bucket hash\". This means that generally, the route  POST /channels/123/messages and  POST /channels/456/messages will usually sit in the same bucket, but  GET /channels/123/messages/789 and  PATCH /channels/123/messages/789 will usually not share the same bucket. Discord may or may not change this at any time, so hard coding this logic is not a useful thing to be doing. Rate limits, on the other hand, apply to a bucket and are specific to the major parameters of the compiled route. This means that  POST /channels/123/messages and  POST /channels/456/messages do not share the same real bucket, despite Discord providing the same bucket hash. A real bucket hash is the  builtins.str hash of the bucket that Discord sends us in a response concatenated to the corresponding major parameters. This is used for quick bucket indexing internally in this module. One issue that occurs from this is that we cannot effectively hash a  hikari.internal.routes.CompiledRoute that has not yet been hit, meaning that until we receive a response from this endpoint, we have no idea what our rate limits could be, nor the bucket that they sit in. This is usually not problematic, as the first request to an endpoint should never be rate limited unless you are hitting it from elsewhere in the same time window outside your hikari.applications. To manage this situation, unknown endpoints are allocated to a special unlimited bucket until they have an initial bucket hash code allocated from a response. Once this happens, the route is reallocated a dedicated bucket. Unknown buckets have a hardcoded initial hash code internally. Initially acquiring time on a bucket                   Each time you  BaseRateLimiter.acquire() a request timeslice for a given  hikari.internal.routes.Route , several things happen. The first is that we attempt to find the existing bucket for that route, if there is one, or get an unknown bucket otherwise. This is done by creating a real bucket hash from the compiled route. The initial hash is calculated using a lookup table that maps  hikari.internal.routes.CompiledRoute objects to their corresponding initial hash codes, or to the unknown bucket hash code if not yet known. This initial hash is processed by the  hikari.internal.routes.CompiledRoute to provide the real bucket hash we need to get the route's bucket object internally. The  BaseRateLimiter.acquire() method will take the bucket and acquire a new timeslice on it. This takes the form of a  asyncio.Future which should be awaited by the caller and will complete once the caller is allowed to make a request. Most of the time, this is done instantly, but if the bucket has an active rate limit preventing requests being sent, then the future will be paused until the rate limit is over. This may be longer than the rate limit period if you have queued a large number of requests during this limit, as it is first-come-first-served. Acquiring a rate limited bucket will start a bucket-wide task (if not already running) that will wait until the rate limit has completed before allowing more futures to complete. This is done while observing the rate limits again, so can easily begin to re-ratelimit itself if needed. Once the task is complete, it tidies itself up and disposes of itself. This task will complete once the queue becomes empty. The result of  RESTBucketManager.acquire() is a tuple of a  asyncio.Future to await on which completes when you are allowed to proceed with making a request, and a real bucket hash which should be stored temporarily. This will be explained in the next section. Handling the rate limit headers of a response                       - Once you have received your response, you are expected to extract the values of the vital rate limit headers manually and parse them to the correct data types. These headers are:   X-RateLimit-Limit : an  builtins.int describing the max requests in the bucket from empty to being rate limited.   X-RateLimit-Remaining : an  builtins.int describing the remaining number of requests before rate limiting occurs in the current window.   X-RateLimit-Bucket : a  builtins.str containing the initial bucket hash.   x-ratelimit-reset-after : a  builtins.float containing the number of seconds when the current rate limit bucket will reset with decimal millisecond precision. Each of the above values should be passed to the  update_rate_limits method to ensure that the bucket you acquired time from is correctly updated should Discord decide to alter their ratelimits on the fly without warning (including timings and the bucket). This method will manage creating new buckets as needed and resetting vital information in each bucket you use. Tidying up      To prevent unused buckets cluttering up memory, each  RESTBucketManager instance spins up a  asyncio.Task that periodically locks the bucket list (not threadsafe, only using the concept of asyncio not yielding in regular functions) and disposes of any clearly stale buckets that are no longer needed. These will be recreated again in the future if they are needed. When shutting down an application, one must remember to  close() the  RESTBucketManager that has been used. This will ensure the garbage collection task is stopped, and will also ensure any remaining futures in any bucket queues have an  asyncio.CancelledError set on them to prevent deadlocking ratelimited calls that may be waiting to be unlocked. Body-field-specific rate limiting                 - As of the start of June, 2020, Discord appears to be enforcing another layer of rate limiting logic to their HTTP APIs which is field-specific. This means that special rate limits will also exist on some endpoints that limit based on what attributes you send in a JSON or form data payload. No information is sent in headers about these specific limits. You will only be made aware that they exist once you get ratelimited. In the 429 ratelimited response, you will have the  \"global\" attribute set to  builtins.False , and a  \"reset_after\" attribute that differs entirely to the  x-ratelimit-reset-after header. Thus, it is important to not assume the value in the 429 response for the reset time is the same as the one in the bucket headers. Hikari's  hikari.api.rest.RESTClient implementation specifically uses the value furthest in the future when working out which bucket to adhere to. It is worth remembering that there is an API limit to the number of 401s, 403s, and 429s you receive, which is around 10,000 per 15 minutes. Passing this limit results in a soft ban of your account. At the time of writing, the only example of this appears to be on the  PATCH /channels/{channel_id} endpoint. This has a limit of two changes per 10 minutes. More details about how this is implemented have yet to be released or documented . Caveats    - These implementations rely on Discord sending consistent buckets back to us. This also begins to crumble if more than one HTTP client is in use, since there is no performent way to communicate shared rate limits between distributed applications. The general concept to follow is that if you are making repeated API calls, or calls that are not event-based (e.g. fetching messages on a timer), then this can be considered a form of API abuse and should be used sparingly."}, {"r": "hikari.impl.buckets.UNKNOWN_HASH", "u": 69, "d": "The hash used for an unknown bucket that has not yet been resolved."}, {"r": "hikari.impl.buckets.RESTBucket", "u": 69, "d": "Represents a rate limit for an HTTP endpoint. Component to represent an active rate limit bucket on a specific HTTP route with a specific major parameter combo. This is somewhat similar to the  WindowedBurstRateLimiter in how it works. This algorithm will use fixed-period time windows that have a given limit (capacity). Each time a task requests processing time, it will drip another unit into the bucket. Once the bucket has reached its limit, nothing can drip and new tasks will be queued until the time window finishes. Once the time window finishes, the bucket will empty, returning the current capacity to zero, and tasks that are queued will start being able to drip again. Additional logic is provided by the  RESTBucket.update_rate_limit call which allows dynamically changing the enforced rate limits at any time."}, {"r": "hikari.impl.buckets.RESTBucket.is_unknown", "u": 69, "d": "Return  builtins.True if the bucket represents an  UNKNOWN bucket."}, {"r": "hikari.impl.buckets.RESTBucket.acquire", "u": 69, "d": "Acquire time on this rate limiter.  ! note You should afterwards invoke  RESTBucket.update_rate_limit to update any rate limit information you are made aware of. Returns    - asyncio.Future[builtins.None] A future that should be awaited immediately. Once the future completes, you are allowed to proceed with your operation.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.update_rate_limit", "u": 69, "d": "Amend the rate limit. Parameters      remaining : builtins.int The calls remaining in this time window. limit : builtins.int The total calls allowed in this time window. reset_at : builtins.float The epoch at which to reset the limit.  ! note The  reset_at epoch is expected to be a  time.monotonic_timestamp monotonic epoch, rather than a  time.time date-based epoch.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.drip", "u": 69, "d": "Decrement the remaining count for this bucket.  ! note If the bucket is marked as  RESTBucket.is_unknown , then this will not do anything.  Unknown buckets have infinite rate limits.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.compiled_route", "u": 69, "d": "The compiled route that this rate limit is covering."}, {"r": "hikari.impl.buckets.RESTBucket.get_time_until_reset", "u": 70, "d": "Determine how long until the current rate limit is reset. Parameters      now : builtins.float The monotonic  time.monotonic_timestamp timestamp.  ! warning Invoking this method will update the internal state if we were previously rate limited, but at the given time are no longer under that limit. This makes it imperative that you only pass the current timestamp to this function, and not past or future timestamps. The effects of doing the latter are undefined behaviour. Returns    - builtins.float The time left to sleep before the rate limit is reset. If no rate limit is in effect, then this will return  0.0 instead.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.is_rate_limited", "u": 70, "d": "Determine if we are under a rate limit at the given time. Parameters      now : builtins.float The monotonic  time.monotonic_timestamp timestamp. Returns    - builtins.bool  builtins.True if we are being rate limited, or  builtins.False if we are not.  ! warning Invoking this method will update the internal state if we were previously rate limited, but at the given time are no longer under that limit. This makes it imperative that you only pass the current timestamp to this function, and not past or future timestamps. The effects of doing the latter are undefined behaviour.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.throttle", "u": 70, "d": "Perform the throttling rate limiter logic. Iterates repeatedly while the queue is not empty, adhering to any rate limits that occur in the mean time.  ! note You should usually not need to invoke this directly, but if you do, ensure to call it using  asyncio.create_task , and store the task immediately in  throttle_task . When this coroutine function completes, it will set the  throttle_task to  builtins.None . This means you can check if throttling is occurring by checking if  throttle_task is not  builtins.None .", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.limit", "u": 70, "d": "The maximum number of  WindowedBurstRateLimiter.acquire 's allowed in this time window."}, {"r": "hikari.impl.buckets.RESTBucket.period", "u": 70, "d": "How long the window lasts for from the start in seconds."}, {"r": "hikari.impl.buckets.RESTBucket.remaining", "u": 70, "d": "The number of  WindowedBurstRateLimiter.acquire 's left in this window before you will get rate limited."}, {"r": "hikari.impl.buckets.RESTBucket.reset_at", "u": 70, "d": "The  time.monotonic_timestamp that the limit window ends at."}, {"r": "hikari.impl.buckets.RESTBucket.close", "u": 70, "d": "Close the rate limiter, and shut down any pending tasks. Once this is invoked, you should not reuse this object.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucket.is_empty", "u": 70, "d": "Return  builtins.True if no futures are on the queue being rate limited."}, {"r": "hikari.impl.buckets.RESTBucket.name", "u": 70, "d": "The name of the rate limiter."}, {"r": "hikari.impl.buckets.RESTBucket.queue", "u": 70, "d": "The queue of any futures under a rate limit."}, {"r": "hikari.impl.buckets.RESTBucket.throttle_task", "u": 70, "d": "The throttling task, or  builtins.None if it is not running."}, {"r": "hikari.impl.buckets.RESTBucketManager", "u": 69, "d": "The main rate limiter implementation for HTTP clients. This is designed to provide bucketed rate limiting for Discord HTTP endpoints that respects the  X-RateLimit-Bucket rate limit header. To do this, it makes the assumption that any limit can change at any time. Parameters      max_rate_limit : builtins.float The max number of seconds to backoff for when rate limited. Anything greater than this will instead raise an error."}, {"r": "hikari.impl.buckets.RESTBucketManager.start", "u": 69, "d": "Start this ratelimiter up. This spins up internal garbage collection logic in the background to keep memory usage to an optimal level as old routes and bucket hashes get discarded and replaced. Parameters      poll_period : builtins.float Period to poll the garbage collector at in seconds. Defaults to  20 seconds. expire_after : builtins.float Time after which the last  reset_at was hit for a bucket to remove it. Higher values will retain unneeded ratelimit info for longer, but may produce more effective rate-limiting logic as a result. Using  0 will make the bucket get garbage collected as soon as the rate limit has reset. Defaults to  10 seconds.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucketManager.close", "u": 69, "d": "Close the garbage collector and kill any tasks waiting on ratelimits. Once this has been called, this object is considered to be effectively dead. To reuse it, one should create a new instance.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucketManager.gc", "u": 69, "d": "The garbage collector loop. This is designed to run in the background and manage removing unused route references from the rate-limiter collection to save memory. This will run forever until  RESTBucketManager.closed_event is set. This will invoke  RESTBucketManager.do_gc_pass periodically. Parameters      poll_period : builtins.float The period to poll at. expire_after : builtins.float Time after which the last  reset_at was hit for a bucket to remove it. Higher values will retain unneeded ratelimit info for longer, but may produce more effective ratelimiting logic as a result. Using  0 will make the bucket get garbage collected as soon as the rate limit has reset.  ! warning You generally have no need to invoke this directly. Use  RESTBucketManager.start and  RESTBucketManager.close to control this instead.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucketManager.do_gc_pass", "u": 69, "d": "Perform a single garbage collection pass. This will assess any routes stored in the internal mappings of this object and remove any that are deemed to be inactive or dead in order to save memory. If the removed routes are used again in the future, they will be re-cached automatically. Parameters      expire_after : builtins.float Time after which the last  reset_at was hit for a bucket to remove it. Defaults to  reset_at + 20 seconds. Higher values will retain unneeded ratelimit info for longer, but may produce more effective ratelimiting logic as a result.  ! warning You generally have no need to invoke this directly. Use  RESTBucketManager.start and  RESTBucketManager.close to control this instead.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucketManager.acquire", "u": 69, "d": "Acquire a bucket for the given route. Parameters      compiled_route : hikari.internal.routes.CompiledRoute The route to get the bucket for. Returns    - asyncio.Future[builtins.None] A future to await that completes when you are allowed to run your request logic.  ! note The returned future MUST be awaited, and will complete when your turn to make a call comes along. You are expected to await this and then immediately make your HTTP call. The returned future may already be completed if you can make the call immediately.", "f": 1}, {"r": "hikari.impl.buckets.RESTBucketManager.update_rate_limits", "u": 69, "d": "Update the rate limits for a bucket using info from a response. Parameters      compiled_route : hikari.internal.routes.CompiledRoute The compiled route to get the bucket for. bucket_header : typing.Optional[builtins.str] The  X-RateLimit-Bucket header that was provided in the response. remaining_header : builtins.int The  X-RateLimit-Remaining header cast to an  builtins.int . limit_header : builtins.int The  X-RateLimit-Limit header cast to an  builtins.int . reset_after : builtins.float The  x-ratelimit-reset-after cast to a  builtins.float .", "f": 1}, {"r": "hikari.impl.buckets.RESTBucketManager.is_started", "u": 69, "d": "Return  builtins.True if the rate limiter GC task is started."}, {"r": "hikari.impl.buckets.RESTBucketManager.closed_event", "u": 69, "d": "An internal event that is set when the object is shut down."}, {"r": "hikari.impl.buckets.RESTBucketManager.gc_task", "u": 69, "d": "The internal garbage collector task."}, {"r": "hikari.impl.buckets.RESTBucketManager.max_rate_limit", "u": 69, "d": "The max number of seconds to backoff for when rate limited. Anything greater than this will instead raise an error."}, {"r": "hikari.impl.buckets.RESTBucketManager.real_hashes_to_buckets", "u": 69, "d": "Maps full bucket hashes ( X-RateLimit-Bucket appended with a hash of major parameters used in that compiled route) to their corresponding rate limiters."}, {"r": "hikari.impl.buckets.RESTBucketManager.routes_to_hashes", "u": 69, "d": "Maps routes to their  X-RateLimit-Bucket header being used."}, {"r": "hikari.impl.bot", "u": 71, "d": "Basic implementation the components for a single-process bot."}, {"r": "hikari.impl.bot.BotApp", "u": 71, "d": "Basic auto-sharding bot implementation. This is the class you will want to use to start, control, and build a bot with. Parameters      token : builtins.str The bot token to sign in with. Other Parameters         allow_color : builtins.bool Defaulting to  builtins.True , this will enable coloured console logs on any platform that is a TTY. Setting a  \"CLICOLOR\" environment variable to any  non  0 value will override this setting. Users should consider this an advice to the application on whether it is safe to show colours if possible or not. Since some terminals can be awkward or not support features in a standard way, the option to explicitly disable this is provided. See  force_color for an alternative. banner : typing.Optional[builtins.str] The package to search for a  banner.txt in. Defaults to  \"hikari\" for the  \"hikari/banner.txt\" banner. Setting this to  builtins.None will disable the banner being shown. executor : typing.Optional[concurrent.futures.Executor] Defaults to  builtins.None . If non- builtins.None , then this executor is used instead of the  concurrent.futures.ThreadPoolExecutor attached to the  asyncio.AbstractEventLoop that the bot will run on. This executor is used primarily for file-IO. While mainly supporting the  concurrent.futures.ThreadPoolExecutor implementation in the standard lib, Hikari's file handling systems should also work with  concurrent.futures.ProcessPoolExecutor , which relies on all objects used in IPC to be  pickle able. Many third-party libraries will not support this fully though, so your mileage may vary on using ProcessPoolExecutor implementations with this parameter. force_color : builtins.bool Defaults to  builtins.False . If  builtins.True , then this application will __force__ colour to be used in console-based output. Specifying a  \"CLICOLOR_FORCE\" environment variable with a non- \"0\" value will override this setting. cache_settings : typing.Optional[hikari.config.CacheSettings] Optional cache settings. If unspecified, will use the defaults. http_settings : typing.Optional[hikari.config.HTTPSettings] Optional custom HTTP configuration settings to use. Allows you to customise functionality such as whether SSL-verification is enabled, what timeouts  aiohttp should expect to use for requests, and behavior regarding HTTP-redirects. intents : hikari.intents.Intents Defaults to  hikari.intents.Intents.ALL_UNPRIVILEGED . This allows you to change which intents your application will use on the gateway. This can be used to control and change the types of events you will receive. logs : typing.Union[builtins.None, LoggerLevel, typing.Dict[str, typing.Any Defaults to  \"INFO\" . If  builtins.None , then the Python logging system is left uninitialized on startup, and you will need to configure it manually to view most logs that are output by components of this library. If one of the valid values in a  LoggerLevel , then this will match a call to  colorlog.basicConfig (a facade for  logging.basicConfig with additional conduit for enabling coloured logging levels) with the  level kwarg matching this value. If a  typing.Dict[str, typing.Any] equivalent, then this value is passed to  logging.config.dictConfig to allow the user to provide a specialized logging configuration of their choice. As a side note, you can always opt to leave this on the default value and then use an incremental  logging.config.dictConfig that applies any additional changes on top of the base configuration, if you prefer. An example of can be found in the  Example section. Note that  \"TRACE_HIKARI\" is a library-specific logging level which is expected to be more verbose than  \"DEBUG\" . max_rate_limit : builtins.float The max number of seconds to backoff for when rate limited. Anything greater than this will instead raise an error. This defaults to five minutes if left to the default value. This is to stop potentially indefinitely waiting on an endpoint, which is almost never what you want to do if giving a response to a user. You can set this to  float(\"inf\") to disable this check entirely. Note that this only applies to the REST API component that communicates with Discord, and will not affect sharding or third party HTTP endpoints that may be in use. proxy_settings : typing.Optional[config.ProxySettings] Custom proxy settings to use with network-layer logic in your application to get through an HTTP-proxy. rest_url : typing.Optional[builtins.str] Defaults to the Discord REST API URL if  builtins.None . Can be overridden if you are attempting to point to an unofficial endpoint, or if you are attempting to mock/stub the Discord API for any reason. Generally you do not want to change this.  ! note  force_color will always take precedence over  allow_color .  ! note Settings that control the gateway session are provided to the  BotApp.run and  BotApp.start functions in this class. This is done to allow you to contextually customise details such as sharding configuration without having to re-initialize the entire application each time. Example    - Setting up logging using a dictionary configuration:   import os import hikari  We want to make gateway logs output as DEBUG, and TRACE for all ratelimit content. bot = hikari.Bot( token=os.environ[\"BOT_TOKEN\"], logs={ \"version\": 1, \"incremental\": True, \"loggers\": { \"hikari.gateway\": {\"level\": \"DEBUG\"}, \"hikari.ratelimits\": {\"level\": \"TRACE_HIKARI\"}, }, }, )  "}, {"r": "hikari.impl.bot.BotApp.cache", "u": 71, "d": "Return the immutable cache implementation for this object. Returns    - hikari.api.cache.Cache The cache component for this object."}, {"r": "hikari.impl.bot.BotApp.event_manager", "u": 71, "d": "Return the event manager for this object. Returns    - hikari.api.event_manager.EventManager The event manager component."}, {"r": "hikari.impl.bot.BotApp.entity_factory", "u": 71, "d": "Return the entity factory implementation for this object. Returns    - hikari.api.entity_factory.EntityFactory The entity factory component."}, {"r": "hikari.impl.bot.BotApp.event_factory", "u": 71, "d": "Return the event factory component. Returns    - hikari.api.event_factory.EventFactory The event factory component."}, {"r": "hikari.impl.bot.BotApp.executor", "u": 71, "d": "Return the executor to use for blocking operations. This may return  builtins.None if the default  asyncio thread pool should be used instead. Returns    - typing.Optional[concurrent.futures.Executor] The executor to use, or  builtins.None to use the  asyncio default instead."}, {"r": "hikari.impl.bot.BotApp.heartbeat_latencies", "u": 71, "d": "Return a mapping of shard ID to heartbeat latency. Any shards that are not yet started will be  float('nan') . Returns    - typing.Mapping[builtins.int, builtins.float] Each shard ID mapped to the corresponding heartbeat latency. Each latency is measured in seconds."}, {"r": "hikari.impl.bot.BotApp.heartbeat_latency", "u": 71, "d": "Return the average heartbeat latency of all started shards. If no shards are started, this will return  float('nan') . Returns    - builtins.float The average heartbeat latency of all started shards, or  float('nan') if no shards are started. This is measured in seconds."}, {"r": "hikari.impl.bot.BotApp.http_settings", "u": 71, "d": "Return the HTTP settings in use by this component. Returns    - hikari.config.HTTPSettings The HTTP settings in use."}, {"r": "hikari.impl.bot.BotApp.intents", "u": 71, "d": "Return the intents registered for the application. Returns    - hikari.intents.Intents The intents registered on this application."}, {"r": "hikari.impl.bot.BotApp.me", "u": 71, "d": "Return the bot user, if known. This should be available as soon as the bot has fired the  hikari.events.lifetime_events.StartingEvent . Until then, this may or may not be  builtins.None . Returns    - typing.Optional[hikari.users.OwnUser] The bot user, if known, otherwise  builtins.None ."}, {"r": "hikari.impl.bot.BotApp.proxy_settings", "u": 71, "d": "Return the proxy settings in use by this component. Returns    - hikari.config.ProxySettings The proxy settings in use."}, {"r": "hikari.impl.bot.BotApp.shard_count", "u": 71, "d": "Return the number of shards in the total application. This may not be the same as the size of  shards . If the application is auto-sharded, this may be  0 until the shards are started. Returns    - builtins.int The number of shards in the total application."}, {"r": "hikari.impl.bot.BotApp.voice", "u": 71, "d": "Return the voice connection manager component for this application. Returns    - hikari.api.voice.VoiceComponent The voice component for the application."}, {"r": "hikari.impl.bot.BotApp.rest", "u": 71, "d": "Return the REST client to use for HTTP requests. Returns    - hikari.api.rest.RESTClient The REST client to use."}, {"r": "hikari.impl.bot.BotApp.is_alive", "u": 71, "d": "Check whether the bot is running or not. This is useful as some functions might raise  hikari.errors.ComponentNotRunningError if this is  builtins.False . Returns    - builtins.bool Whether the bot is running or not."}, {"r": "hikari.impl.bot.BotApp.close", "u": 71, "d": "Kill the application by shutting all components down.", "f": 1}, {"r": "hikari.impl.bot.BotApp.dispatch", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.get_listeners", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.join", "u": 71, "d": "Wait indefinitely until the application closes. This can be placed in a task and cancelled without affecting the application runtime itself. Any exceptions raised by shards will be propagated to here. Other Parameters         until_close : builtins.bool Defaults to  builtins.True . If set, the waiter will stop as soon as a request for shut down is processed. This can allow you to break and begin closing your own resources. If  builtins.False , then this will wait until all shards' tasks have died.", "f": 1}, {"r": "hikari.impl.bot.BotApp.listen", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.print_banner", "u": 71, "d": "Print the banner. This allows library vendors to override this behaviour, or choose to inject their own \"branding\" on top of what hikari provides by default. Normal users should not need to invoke this function, and can simply change the  banner argument passed to the constructor to manipulate what is displayed. Parameters      banner : typing.Optional[builtins.str] The package to find a  banner.txt in. allow_color : builtins.bool A flag that allows advising whether to allow color if supported or not. Can be overridden by setting a  \"CLICOLOR\" environment variable to a non- \"0\" string. force_color : builtins.bool A flag that allows forcing color to always be output, even if the terminal device may not support it. Setting the  \"CLICOLOR_FORCE\" environment variable to a non- \"0\" string will override this.  ! note  force_color will always take precedence over  allow_color .", "f": 1}, {"r": "hikari.impl.bot.BotApp.run", "u": 71, "d": "Start the bot, wait for all shards to become ready, and then return. Other Parameters         activity : typing.Optional[hikari.presences.Activity] The initial activity to display in the bot user presence, or  builtins.None (default) to not show any. afk : builtins.bool The initial AFK state to display in the bot user presence, or  builtins.False (default) to not show any. asyncio_debug : builtins.bool Defaults to  builtins.False . If  builtins.True , then debugging is enabled for the asyncio event loop in use. check_for_updates : builtins.bool Defaults to  builtins.True . If  builtins.True , will check for newer versions of  hikari on PyPI and notify if available. close_passed_executor : builtins.bool Defaults to  builtins.False . If  builtins.True , any custom  concurrent.futures.Executor passed to the constructor will be shut down when the application terminates. This does not affect the default executor associated with the event loop, and will not do anything if you do not provide a custom executor to the constructor. close_loop : builtins.bool Defaults to  builtins.True . If  builtins.True , then once the bot enters a state where all components have shut down permanently during application shutdown, then all asyngens and background tasks will be destroyed, and the event loop will be shut down. This will wait until all  hikari -owned  aiohttp connectors have had time to attempt to shut down correctly (around 250ms), and on Python 3.9 and newer, will also shut down the default event loop executor too. coroutine_tracking_depth : typing.Optional[builtins.int] Defaults to  builtins.None . If an integer value and supported by the interpreter, then this many nested coroutine calls will be tracked with their call origin state. This allows you to determine where non-awaited coroutines may originate from, but generally you do not want to leave this enabled for performance reasons. enable_signal_handlers : builtins.bool Defaults to  builtins.True . If on a __non-Windows__ OS with builtin support for kernel-level POSIX signals, then setting this to  builtins.True will allow treating keyboard interrupts and other OS signals to safely shut down the application as calls to shut down the application properly rather than just killing the process in a dirty state immediately. You should leave this disabled unless you plan to implement your own signal handling yourself. idle_since : typing.Optional[datetime.datetime] The  datetime.datetime the user should be marked as being idle since, or  builtins.None (default) to not show this. ignore_session_start_limit : builtins.bool Defaults to  builtins.False . If  builtins.False , then attempting to start more sessions than you are allowed in a 24 hour window will throw a  hikari.errors.GatewayError rather than going ahead and hitting the IDENTIFY limit, which may result in your token being reset. Setting to  builtins.True disables this behavior. large_threshold : builtins.int Threshold for members in a guild before it is treated as being \"large\" and no longer sending member details in the  GUILD CREATE event. Defaults to  250 . propagate_interrupts : builtins.bool Defaults to  builtins.False . If set to  builtins.True , then any internal  hikari.errors.HikariInterrupt that is raises as a result of catching an OS level signal will result in the exception being rethrown once the application has closed. This can allow you to use hikari signal handlers and still be able to determine what kind of interrupt the application received after it closes. When  builtins.False , nothing is raised and the call will terminate cleanly and silently where possible instead. shard_ids : typing.Optional[typing.Set[builtins.int The shard IDs to create shards for. If not  builtins.None , then a non- None  shard_count must ALSO be provided. Defaults to  builtins.None , which means the Discord-recommended count is used for your application instead. shard_count : typing.Optional[builtins.int] The number of shards to use in the entire distributed application. Defaults to  builtins.None which results in the count being determined dynamically on startup. status : hikari.presences.Status The initial status to show for the user presence on startup. Defaults to  hikari.presences.Status.ONLINE . Raises    builtins.RuntimeError If bot is already running.", "f": 1}, {"r": "hikari.impl.bot.BotApp.start", "u": 71, "d": "Start the bot, wait for all shards to become ready, and then return. Other Parameters         activity : typing.Optional[hikari.presences.Activity] The initial activity to display in the bot user presence, or  builtins.None (default) to not show any. afk : builtins.bool The initial AFK state to display in the bot user presence, or  builtins.False (default) to not show any. check_for_updates : builtins.bool Defaults to  builtins.True . If  builtins.True , will check for newer versions of  hikari on PyPI and notify if available. idle_since : typing.Optional[datetime.datetime] The  datetime.datetime the user should be marked as being idle since, or  builtins.None (default) to not show this. ignore_session_start_limit : builtins.bool Defaults to  builtins.False . If  builtins.False , then attempting to start more sessions than you are allowed in a 24 hour window will throw a  hikari.errors.GatewayError rather than going ahead and hitting the IDENTIFY limit, which may result in your token being reset. Setting to  builtins.True disables this behavior. large_threshold : builtins.int Threshold for members in a guild before it is treated as being \"large\" and no longer sending member details in the  GUILD CREATE event. Defaults to  250 . shard_ids : typing.Optional[typing.Set[builtins.int The shard IDs to create shards for. If not  builtins.None , then a non- None  shard_count must ALSO be provided. Defaults to  builtins.None , which means the Discord-recommended count is used for your application instead. shard_count : typing.Optional[builtins.int] The number of shards to use in the entire distributed application. Defaults to  builtins.None which results in the count being determined dynamically on startup. status : hikari.presences.Status The initial status to show for the user presence on startup. Defaults to  hikari.presences.Status.ONLINE .", "f": 1}, {"r": "hikari.impl.bot.BotApp.stream", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.subscribe", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.unsubscribe", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.wait_for", "u": 71, "d": "", "f": 1}, {"r": "hikari.impl.bot.BotApp.update_presence", "u": 71, "d": "Update the presence on all shards. This call will patch the presence on each shard. This means that unless you explicitly specify a parameter, the previous value will be retained. This means you do not have to track the global presence in your code. Other Parameters         idle_since : hikari.undefined.UndefinedNoneOr[datetime.datetime] The datetime that the user started being idle. If undefined, this will not be changed. afk : hikari.undefined.UndefinedOr[builtins.bool] If  builtins.True , the user is marked as AFK. If  builtins.False , the user is marked as being active. If undefined, this will not be changed. activity : hikari.undefined.UndefinedNoneOr[hikari.presences.Activity] The activity to appear to be playing. If undefined, this will not be changed. status : hikari.undefined.UndefinedOr[hikari.presences.Status] The web status to show. If undefined, this will not be changed.  ! note This will only send the update payloads to shards that are alive. Any shards that are not alive will cache the new presence for when they do start.  ! note If you want to set presences per shard, access the shard you wish to update (e.g. by using  BotApp.shards ), and call  hikari.api.shard.GatewayShard.update_presence on that shard. This method is simply a facade to make performing this in bulk simpler.", "f": 1}, {"r": "hikari.impl.bot.BotApp.shards", "u": 71, "d": "Return a mapping of shards in this application instance. Each shard ID is mapped to the corresponding shard instance. If the application has not started, it is acceptable to assume the result of this call will be an empty mapping. Returns    - typing.Mapping[int, hikari.api.shard.GatewayShard] The shard mapping."}, {"r": "hikari.impl.special_endpoints", "u": 72, "d": "Special endpoint implementations. You should never need to make any of these objects manually."}, {"r": "hikari.impl.special_endpoints.TypingIndicator", "u": 72, "d": "Result type of  hikari.api.rest.RESTClient.trigger_typing . This is an object that can either be awaited like a coroutine to trigger the typing indicator once, or an async context manager to keep triggering the typing indicator repeatedly until the context finishes.  ! note This is a helper class that is used by  hikari.api.rest.RESTClient . You should only ever need to use instances of this class that are produced by that API."}, {"r": "hikari.impl.special_endpoints.GuildBuilder", "u": 72, "d": "Result type of  hikari.api.rest.RESTClient.guild_builder . This is used to create a guild in a tidy way using the HTTP API, since the logic behind creating a guild on an API level is somewhat confusing and detailed.  ! note This is a helper class that is used by  hikari.api.rest.RESTClient . You should only ever need to use instances of this class that are produced by that API, thus, any details about the constructor are omitted from the following examples for brevity. Examples     Creating an empty guild.   guild = await rest.guild_builder(\"My Server!\").create()   Creating a guild with an icon   from hikari.files import WebResourceStream guild_builder = rest.guild_builder(\"My Server!\") guild_builder.icon = WebResourceStream(\"cat.png\", \"http:  .\") guild = await guild_builder.create()   Adding roles to your guild.   from hikari.permissions import Permissions guild_builder = rest.guild_builder(\"My Server!\") everyone_role_id = guild_builder.add_role(\"@everyone\") admin_role_id = guild_builder.add_role(\"Admins\", permissions=Permissions.ADMINISTRATOR) await guild_builder.create()    ! warning The first role must always be the  @everyone role.  ! note If you call  add_role , the default roles provided by discord will be created. This also applies to the  add_ functions for text channels/voice channels/categories.  ! note Functions that return a  hikari.snowflakes.Snowflake do  not provide the final ID that the object will have once the API call is made. The returned IDs are only able to be used to re-reference particular objects while building the guild format. This is provided to allow creation of channels within categories, and to provide permission overwrites. Adding a text channel to your guild.   guild_builder = rest.guild_builder(\"My Server!\") category_id = guild_builder.add_category(\"My safe place\") channel_id = guild_builder.add_text_channel(\"general\", parent_id=category_id) await guild_builder.create()   Method generated by attrs for class GuildBuilder."}, {"r": "hikari.impl.special_endpoints.GuildBuilder.name", "u": 72, "d": "Name of the guild to create. Returns    - builtins.str The guild name."}, {"r": "hikari.impl.special_endpoints.GuildBuilder.create", "u": 72, "d": "Send the request to Discord to create the guild. The application user will be added to this guild as soon as it is created. All IDs that were provided when building this guild will become invalid and will be replaced with real IDs. Returns    - hikari.guilds.RESTGuild The created guild. Raises    hikari.errors.BadRequestError If any values set in the guild builder are invalid. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are already in 10 guilds. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.impl.special_endpoints.GuildBuilder.add_role", "u": 72, "d": "Create a role.  ! warning The first role you create must always be the  @everyone role. Parameters      name : builtins.str The role's name. Other Parameters         permissions : hikari.undefined.UndefinedOr[hikari.permissions.Permissions] If provided, the permissions for the role. color : hikari.undefined.UndefinedOr[hikari.colors.Colorish] If provided, the role's color. colour : hikari.undefined.UndefinedOr[hikari.colors.Colorish] An alias for  color . hoist : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to hoist the role. mentionable : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to make the role mentionable. reason : hikari.undefined.UndefinedOr[builtins.str] If provided, the reason that will be recorded in the audit logs. Maximum of 512 characters. Returns    - hikari.snowflakes.Snowflake The dummy ID for this role that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID. Raises    builtins.ValueError If you are defining the first role, but did not name it  @everyone . builtins.TypeError If you specify both  color and  colour together or if you try to specify  color ,  colour ,  hoisted ,  mentionable or  position for the  @everyone role.", "f": 1}, {"r": "hikari.impl.special_endpoints.GuildBuilder.add_category", "u": 72, "d": "Create a category channel. Parameters      name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the category. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the category. Returns    - hikari.snowflakes.Snowflake The dummy ID for this channel that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID.", "f": 1}, {"r": "hikari.impl.special_endpoints.GuildBuilder.add_text_channel", "u": 72, "d": "Create a text channel. Parameters      name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). topic : hikari.undefined.UndefinedOr[builtins.str] If provided, the channels topic. Maximum 1024 characters. nsfw : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mark the channel as NSFW. rate_limit_per_user : hikari.undefined.UndefinedOr[builtins.int] If provided, the ammount of seconds a user has to wait before being able to send another message in the channel. Maximum 21600 seconds. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. Returns    - hikari.snowflakes.Snowflake The dummy ID for this channel that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID.", "f": 1}, {"r": "hikari.impl.special_endpoints.GuildBuilder.add_voice_channel", "u": 72, "d": "Create a voice channel. Parameters      name : builtins.str The channels name. Must be between 2 and 1000 characters. Other Parameters         position : hikari.undefined.UndefinedOr[builtins.int] If provided, the position of the channel (relative to the category, if any). user_limit : hikari.undefined.UndefinedOr[builtins.int] If provided, the maximum users in the channel at once. Must be between 0 and 99 with 0 meaning no limit. bitrate : hikari.undefined.UndefinedOr[builtins.int] If provided, the bitrate for the channel. Must be between 8000 and 96000 or 8000 and 128000 for VIP servers. permission_overwrites : hikari.undefined.UndefinedOr[typing.Sequence[hikari.channels.PermissionOverwrite If provided, the permission overwrites for the channel. category : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.channels.GuildCategory The category to create the channel under. This may be the object or the ID of an existing category. Returns    - hikari.snowflakes.Snowflake The dummy ID for this channel that can be used temporarily to refer to this object while designing the guild layout. When the guild is created, this will be replaced with a different ID.", "f": 1}, {"r": "hikari.impl.special_endpoints.GuildBuilder.default_message_notifications", "u": 43, "d": "Default message notification level that can be overwritten. If not overridden, this will use the Discord default level."}, {"r": "hikari.impl.special_endpoints.GuildBuilder.explicit_content_filter_level", "u": 43, "d": "Explicit content filter level that can be overwritten. If not overridden, this will use the Discord default level."}, {"r": "hikari.impl.special_endpoints.GuildBuilder.icon", "u": 43, "d": "Guild icon to use that can be overwritten. If not overridden, the guild will not have an icon."}, {"r": "hikari.impl.special_endpoints.GuildBuilder.region", "u": 43, "d": "Guild voice channel region to use that can be overwritten. If not overridden, the guild will use the default voice region for Discord."}, {"r": "hikari.impl.special_endpoints.GuildBuilder.verification_level", "u": 43, "d": "Verification level required to join the guild that can be overwritten. If not overridden, the guild will use the default verification level for Discord."}, {"r": "hikari.impl.rate_limits", "u": 70, "d": "Basic lazy ratelimit systems for asyncio. See  hikari.impl.buckets for HTTP-specific rate-limiting logic."}, {"r": "hikari.impl.rate_limits.BaseRateLimiter", "u": 70, "d": "Base for any asyncio-based rate limiter being used. Supports being used as a synchronous context manager.  ! warning Async context manager support is not supported and will not be supported."}, {"r": "hikari.impl.rate_limits.BaseRateLimiter.acquire", "u": 70, "d": "Acquire permission to perform a task that needs to have rate limit management enforced. Returns    - asyncio.Future[builtins.None] A future that should be awaited. Once the future is complete, you can proceed to execute your rate-limited task.", "f": 1}, {"r": "hikari.impl.rate_limits.BaseRateLimiter.close", "u": 70, "d": "Close the rate limiter, cancelling any internal tasks that are executing.", "f": 1}, {"r": "hikari.impl.rate_limits.BurstRateLimiter", "u": 70, "d": "Base implementation for a burst-based rate limiter. This provides an internal queue and throttling placeholder, as well as complete logic for safely aborting any pending tasks when being shut down."}, {"r": "hikari.impl.rate_limits.BurstRateLimiter.acquire", "u": 70, "d": "Acquire time on this rate limiter. The implementation should define this. Returns    - asyncio.Future[typing.Any] A future that should be immediately awaited. Once the await completes, you are able to proceed with the operation that is under this rate limit.", "f": 1}, {"r": "hikari.impl.rate_limits.BurstRateLimiter.close", "u": 70, "d": "Close the rate limiter, and shut down any pending tasks. Once this is invoked, you should not reuse this object.", "f": 1}, {"r": "hikari.impl.rate_limits.BurstRateLimiter.is_empty", "u": 70, "d": "Return  builtins.True if no futures are on the queue being rate limited."}, {"r": "hikari.impl.rate_limits.BurstRateLimiter.name", "u": 70, "d": "The name of the rate limiter."}, {"r": "hikari.impl.rate_limits.BurstRateLimiter.queue", "u": 70, "d": "The queue of any futures under a rate limit."}, {"r": "hikari.impl.rate_limits.BurstRateLimiter.throttle_task", "u": 70, "d": "The throttling task, or  builtins.None if it is not running."}, {"r": "hikari.impl.rate_limits.ManualRateLimiter", "u": 70, "d": "Rate limit handler for the global HTTP rate limit. This is a non-preemptive rate limiting algorithm that will always return completed futures until  ManualRateLimiter.throttle is invoked. Once this is invoked, any subsequent calls to  ManualRateLimiter.acquire will return incomplete futures that will be enqueued to an internal queue. A task will be spun up to wait for a period of time given to the  ManualRateLimiter.throttle . Once that has passed, the lock will begin to re-consume incomplete futures on the queue, completing them. Triggering a throttle when it is already set will cancel the current throttle task that is sleeping and replace it. This is used to enforce the global HTTP rate limit that will occur \"randomly\" during HTTP API interaction. Expect random occurrences."}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.acquire", "u": 70, "d": "Acquire time on this rate limiter. Returns    - asyncio.Future[typing.Any] A future that should be immediately awaited. Once the await completes, you are able to proceed with the operation that is under this rate limit.", "f": 1}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.throttle", "u": 70, "d": "Perform the throttling rate limiter logic. Iterates repeatedly while the queue is not empty, adhering to any rate limits that occur in the mean time. Parameters      retry_after : builtins.float How long to sleep for before unlocking and releasing any futures in the queue.  ! note This will invoke  ManualRateLimiter.unlock_later as a scheduled task in the future (it will not await it to finish). When the  ManualRateLimiter.unlock_later coroutine function completes, it should be expected to set the  throttle_task to  builtins.None . This means you can check if throttling is occurring by checking if  throttle_task is not  builtins.None . If this is invoked while another throttle is in progress, that one is cancelled and a new one is started. This enables new rate limits to override existing ones.", "f": 1}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.unlock_later", "u": 70, "d": "Sleeps for a while, then removes the lock. Parameters      retry_after : builtins.float How long to sleep for before unlocking and releasing any futures in the queue.  ! note You should not need to invoke this directly. Call  ManualRateLimiter.throttle instead. When the  ManualRateLimiter.unlock_later coroutine function completes, it should be expected to set the  throttle_task to  builtins.None . This means you can check if throttling is occurring by checking if  throttle_task is not  builtins.None .", "f": 1}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.close", "u": 70, "d": "Close the rate limiter, and shut down any pending tasks. Once this is invoked, you should not reuse this object.", "f": 1}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.is_empty", "u": 70, "d": "Return  builtins.True if no futures are on the queue being rate limited."}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.name", "u": 70, "d": "The name of the rate limiter."}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.queue", "u": 70, "d": "The queue of any futures under a rate limit."}, {"r": "hikari.impl.rate_limits.ManualRateLimiter.throttle_task", "u": 70, "d": "The throttling task, or  builtins.None if it is not running."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter", "u": 70, "d": "Windowed burst rate limiter. Rate limiter for rate limits that last fixed periods of time with a fixed number of times it can be used in that time frame. To use this, you should call WindowedBurstRateLimiter.aquire and await the result immediately before performing your rate-limited task. If the rate limit has been hit, acquiring time will return an incomplete future that is placed on the internal queue. A throttle task is then spun up if not already running that will be expected to provide some implementation of backing off and sleeping for a given period of time until the limit has passed, and then proceed to consume futures from the queue while adhering to those rate limits. If the throttle task is already running, the acquired future will always be incomplete and enqueued regardless of whether the rate limit is actively reached or not. Acquiring a future from this limiter when no throttling task is running and when the rate limit is not reached will always result in the task invoking a drip and a completed future being returned. Dripping is left to the implementation of this class, but will be expected to provide some mechanism for updating the internal statistics to represent that a unit has been placed into the bucket."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.acquire", "u": 70, "d": "Acquire time on this rate limiter. Returns    - asyncio.Future[typing.Any] A future that should be immediately awaited. Once the await completes, you are able to proceed with the operation that is under this rate limit.", "f": 1}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.get_time_until_reset", "u": 70, "d": "Determine how long until the current rate limit is reset. Parameters      now : builtins.float The monotonic  time.monotonic_timestamp timestamp.  ! warning Invoking this method will update the internal state if we were previously rate limited, but at the given time are no longer under that limit. This makes it imperative that you only pass the current timestamp to this function, and not past or future timestamps. The effects of doing the latter are undefined behaviour. Returns    - builtins.float The time left to sleep before the rate limit is reset. If no rate limit is in effect, then this will return  0.0 instead.", "f": 1}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.is_rate_limited", "u": 70, "d": "Determine if we are under a rate limit at the given time. Parameters      now : builtins.float The monotonic  time.monotonic_timestamp timestamp. Returns    - builtins.bool  builtins.True if we are being rate limited, or  builtins.False if we are not.  ! warning Invoking this method will update the internal state if we were previously rate limited, but at the given time are no longer under that limit. This makes it imperative that you only pass the current timestamp to this function, and not past or future timestamps. The effects of doing the latter are undefined behaviour.", "f": 1}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.drip", "u": 70, "d": "Decrements the remaining counter.", "f": 1}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.throttle", "u": 70, "d": "Perform the throttling rate limiter logic. Iterates repeatedly while the queue is not empty, adhering to any rate limits that occur in the mean time.  ! note You should usually not need to invoke this directly, but if you do, ensure to call it using  asyncio.create_task , and store the task immediately in  throttle_task . When this coroutine function completes, it will set the  throttle_task to  builtins.None . This means you can check if throttling is occurring by checking if  throttle_task is not  builtins.None .", "f": 1}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.limit", "u": 70, "d": "The maximum number of  WindowedBurstRateLimiter.acquire 's allowed in this time window."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.period", "u": 70, "d": "How long the window lasts for from the start in seconds."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.remaining", "u": 70, "d": "The number of  WindowedBurstRateLimiter.acquire 's left in this window before you will get rate limited."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.reset_at", "u": 70, "d": "The  time.monotonic_timestamp that the limit window ends at."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.close", "u": 70, "d": "Close the rate limiter, and shut down any pending tasks. Once this is invoked, you should not reuse this object.", "f": 1}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.is_empty", "u": 70, "d": "Return  builtins.True if no futures are on the queue being rate limited."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.name", "u": 70, "d": "The name of the rate limiter."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.queue", "u": 70, "d": "The queue of any futures under a rate limit."}, {"r": "hikari.impl.rate_limits.WindowedBurstRateLimiter.throttle_task", "u": 70, "d": "The throttling task, or  builtins.None if it is not running."}, {"r": "hikari.impl.rate_limits.ExponentialBackOff", "u": 70, "d": "Implementation of an asyncio-compatible exponential back-off algorithm with random jitter.  math t_{backoff} = b^{i} + m \\cdot \\mathrm{rand}() Such that \\(t_{backoff}\\) is the backoff time, \\(b\\) is the base, \\(i\\) is the increment that increases by 1 for each invocation, and \\(m\\) is the jitter multiplier. \\(\\mathrm{rand}()\\) returns a value in the range \\([0,1]\\). Parameters      base : builtins.float The base to use. Defaults to  2.0 . maximum : builtins.float The max value the backoff can be in a single iteration. Anything above this will be capped to this base value plus random jitter. jitter_multiplier : builtins.float The multiplier for the random jitter. Defaults to  1.0 . Set to  0 to disable jitter. initial_increment : builtins.int The initial increment to start at. Defaults to  0 . Raises    ValueError If an  builtins.int that's too big to be represented as a  builtins.float or a non-finite value is passed in place of a field that's annotated as  builtins.float ."}, {"r": "hikari.impl.rate_limits.ExponentialBackOff.reset", "u": 70, "d": "Reset the exponential back-off.", "f": 1}, {"r": "hikari.impl.rate_limits.ExponentialBackOff.base", "u": 70, "d": "The base to use. Defaults to 2.0."}, {"r": "hikari.impl.rate_limits.ExponentialBackOff.increment", "u": 70, "d": "The current increment."}, {"r": "hikari.impl.rate_limits.ExponentialBackOff.jitter_multiplier", "u": 70, "d": "The multiplier for the random jitter. This defaults to  1.0 . Set to  0.0 to disable jitter."}, {"r": "hikari.impl.rate_limits.ExponentialBackOff.maximum", "u": 70, "d": "This is the max value the backoff can be in a single iteration before an  asyncio.TimeoutError is raised."}, {"r": "hikari.impl.entity_factory", "u": 73, "d": "Basic implementation of an entity factory for general bots and HTTP apps."}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl", "u": 73, "d": "Standard implementation for a serializer/deserializer. This will convert objects to/from JSON compatible representations."}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_own_connection", "u": 73, "d": "Parse a raw payload from Discord into an own connection object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.applications.OwnConnection The deserialized \"own connection\" object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_own_guild", "u": 73, "d": "Parse a raw payload from Discord into an own guild object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.applications.OwnGuild The deserialized \"own guild\" object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_application", "u": 73, "d": "Parse a raw payload from Discord into an application object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.applications.Application The deserialized application object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_audit_log", "u": 73, "d": "Parse a raw payload from Discord into an audit log object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.audit_logs.AuditLog The deserialized audit log object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_channel_follow", "u": 73, "d": "Parse a raw payload from Discord into a channel follow object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.ChannelFollow The deserialized channel follow object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_permission_overwrite", "u": 73, "d": "Parse a raw payload from Discord into a permission overwrite object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.PermissionOverwrite The deserialized permission overwrite object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.serialize_permission_overwrite", "u": 73, "d": "Serialize a permission overwrite object to a json serializable dict. Parameters      overwrite : hikari.channels.PermissionOverwrite The permission overwrite object to serialize. Returns    - hikari.internal.data_binding.JSONObject The serialized representation of the permission overwrite.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_partial_channel", "u": 73, "d": "Parse a raw payload from Discord into a partial channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.PartialChannel The deserialized \"partial channel\" object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_dm", "u": 73, "d": "Parse a raw payload from Discord into a DM channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.DMChannel The deserialized DM channel object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_group_dm", "u": 73, "d": "Parse a raw payload from Discord into a group DM channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.channels.GroupDMChannel The deserialized group DM object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_category", "u": 73, "d": "Parse a raw payload from Discord into a guild category object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildCategory The deserialized guild category object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_text_channel", "u": 73, "d": "Parse a raw payload from Discord into a guild text channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildTextChannel The deserialized guild text channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_news_channel", "u": 73, "d": "Parse a raw payload from Discord into a guild news channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.snowflakes.Snowflake The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildNewsChannel The deserialized guild news channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_store_channel", "u": 73, "d": "Parse a raw payload from Discord into a guild store channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.snowflakes.Snowflake The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.GuildStoreChannel The deserialized guild store channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_voice_channel", "u": 73, "d": "Parse a raw payload from Discord into a guild voice channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.snowflakes.Snowflake The ID of the guild this channel belongs to. If passed then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is npt included in the channel's payload. Returns    - hikari.channels.GuildVoiceChannel The deserialized guild voice channel object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_channel", "u": 73, "d": "Parse a raw payload from Discord into a channel object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this channel belongs to. This will be ignored for DM and group DM channels and will be prioritised over  \"guild_id\" in the payload when passed.  ! note  guild_id currently only covers the gateway GUILD_CREATE event where  \"guild_id\" is not included in the channel's payload. Returns    - hikari.channels.PartialChannel The deserialized partial channel-derived object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload of a guild channel.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_embed", "u": 73, "d": "Parse a raw payload from Discord into an embed object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.embeds.Embed The deserialized embed object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.serialize_embed", "u": 73, "d": "Serialize an embed object to a json serializable dict. Parameters      embed : hikari.embeds.Embed The embed object to serialize. Returns    - typing.Tuple[hikari.internal.data_binding.JSONObject, typing.List[hikari.files.Resource A tuple with two items in it. The first item will be the serialized embed representation. The second item will be a list of resources to upload with the embed.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_unicode_emoji", "u": 73, "d": "Parse a raw payload from Discord into a unicode emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.emojis.UnicodeEmoji The deserialized unicode emoji object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_custom_emoji", "u": 73, "d": "Parse a raw payload from Discord into a custom emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.emojis.CustomEmoji The deserialized custom emoji object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_known_custom_emoji", "u": 73, "d": "Parse a raw payload from Discord into a known custom emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. guild_id : hikari.snowflakes.Snowflake The ID of the guild this emoji belongs to. This is used to ensure that the guild a known custom emoji belongs to is remembered by allowing for a context based artificial  guild_id attribute. Returns    - hikari.emojis.KnownCustomEmoji The deserialized \"known custom emoji\" object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_emoji", "u": 73, "d": "Parse a raw payload from Discord into an emoji object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.emojis.UnicodeEmoji or hikari.emojis.CustomEmoji The deserialized custom or unicode emoji object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_gateway_bot", "u": 73, "d": "Parse a raw payload from Discord into a gateway bot object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.sessions.GatewayBot The deserialized gateway bot object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_widget", "u": 73, "d": "Parse a raw payload from Discord into a guild widget object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.GuildWidget The deserialized guild widget object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_welcome_screen", "u": 73, "d": "Parse a raw payload from Discord into a guild welcome screen object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.WelcomeScreen The deserialized guild welcome screen object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.serialize_welcome_channel", "u": 73, "d": "Serialize a welcome channel object to a json serializable dict. Parameters      welcome_channel : hikari.guilds.WelcomeChannel The guild welcome channel object to serialize. Returns    - hikari.internal.data_binding.JSONObject The serialized representation of the welcome channel.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_member", "u": 73, "d": "Parse a raw payload from Discord into a member object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         user : hikari.undefined.UndefinedOr[hikari.users.User] The user to attach to this member, should only be passed in situations where \"user\" is not included in the payload. guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this member belongs to. If this is specified then this will be prioritised over  \"guild_id\" in the payload.  ! note  guild_id covers cases such as the GUILD_CREATE gateway event and GET Guild Member where  \"guild_id\" is not included in the returned payload. Returns    - hikari.guilds.Member The deserialized member object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_role", "u": 73, "d": "Parse a raw payload from Discord into a role object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. guild_id : hikari.snowflakes.Snowflake The ID of the guild this role belongs to. This is used to ensure that the guild a role belongs to is remembered by allowing for a context based artificial  guild_id attribute. Returns    - hikari.guilds.Role The deserialized role object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_partial_integration", "u": 73, "d": "Parse a raw payload from Discord into a partial integration object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.PartialIntegration The deserialized partial integration object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_integration", "u": 73, "d": "Parse a raw payload from Discord into an integration object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this integration belongs to. If this is specified then this will be prioritised over  \"guild_id\" in the payload. Returns    - hikari.guilds.Integration The deserialized integration object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload for the payload of the integration.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_member_ban", "u": 73, "d": "Parse a raw payload from Discord into a guild member ban object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.GuildMemberBan The deserialized guild member ban object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_guild_preview", "u": 73, "d": "Parse a raw payload from Discord into a guild preview object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.GuildPreview The deserialized guild preview object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_rest_guild", "u": 73, "d": "Parse a raw payload from Discord into a guild object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.guilds.RESTGuild The deserialized guild object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_gateway_guild", "u": 73, "d": "Parse a raw payload from Discord into a guild object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - GatewayGuildDefinition The deserialized guild object and the internal collections as maps of  hikari.snowflakes.Snowflake mapping to  hikari.channels.GuildChannel ,  hikari.guilds.Member ,  hikari.presences.MemberPresence ,  hikari.guilds.Role , and  hikari.emojis.KnownCustomEmoji . This is provided in several components to allow separate caching and linking between entities in various relational cache implementations internally.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_vanity_url", "u": 73, "d": "Parse a raw payload from Discord into a vanity url object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.invites.VanityURL The deserialized vanity url object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_invite", "u": 73, "d": "Parse a raw payload from Discord into an invite object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.invites.Invite The deserialized invite object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_invite_with_metadata", "u": 73, "d": "Parse a raw payload from Discord into a invite with metadata object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.invites.InviteWithMetadata The deserialized invite with metadata object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_partial_message", "u": 73, "d": "Parse a raw payload from Discord into a partial message object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.messages.PartialMessage The deserialized partial message object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_message", "u": 73, "d": "Parse a raw payload from Discord into a message object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.messages.Message The deserialized message object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_member_presence", "u": 73, "d": "Parse a raw payload from Discord into a member presence object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild the presence belongs to. If this is specified then it is prioritised over  guild_id in the payload.  ! note At the time of writing, the only place where  guild_id will be mandatory is when parsing presences sent in a  GUILD_CREATE event from Discord, since the  guild_id attribute in the payload will have been omitted for redundancy. Returns    - hikari.presences.MemberPresence The deserialized member presence object. Raises    KeyError If  guild_id is not an attribute of the  payload dict, and no guild ID was passed for the  guild_id parameter. If this is raised, no guild ID info was provided anywhere.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_template", "u": 73, "d": "Parse a raw payload from Discord into a template object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.templates.Template The deserialized template object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_user", "u": 73, "d": "Parse a raw payload from Discord into a user object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.users.User The deserialized user object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_my_user", "u": 73, "d": "Parse a raw payload from Discord into a user object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.users.OwnUser The deserialized user object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_voice_state", "u": 73, "d": "Parse a raw payload from Discord into a voice state object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Other Parameters         guild_id : hikari.undefined.UndefinedOr[hikari.snowflakes.Snowflake] The ID of the guild this voice state belongs to. If this is specified then this will be prioritised over  \"guild_id\" in the payload. member : hikari.undefined.UndefinedOr[hikari.guilds.Member] The object of the member this voice state belongs to. If this is specified then this will be prioritised over  \"member\" in the payload.  ! note At the time of writing,  GUILD_CREATE events are the only known place where neither  guild_id nor  member will be keys on the payload. In this case, you will need to provide the former parameters explicitly. Returns    - hikari.voices.VoiceState The deserialized voice state object. Raises    KeyError If  guild_id is left as  hikari.undefined.UNDEFINED when  \"guild_id\" is not present in the passed payload for the payload of the voice state. This will also be raised if no  member data was passed in any acceptable place.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_voice_region", "u": 73, "d": "Parse a raw payload from Discord into a voice region object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.voices.VoiceRegion The deserialized voice region object.", "f": 1}, {"r": "hikari.impl.entity_factory.EntityFactoryImpl.deserialize_webhook", "u": 73, "d": "Parse a raw payload from Discord into a webhook object. Parameters      payload : hikari.internal.data_binding.JSONObject The JSON payload to deserialize. Returns    - hikari.webhooks.Webhook The deserialized webhook object.", "f": 1}, {"r": "hikari.impl.event_factory", "u": 74, "d": "Implementation for a singleton bot event factory."}, {"r": "hikari.impl.event_factory.EventFactoryImpl", "u": 74, "d": "Implementation for a single-application bot event factory."}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_channel_create_event", "u": 74, "d": "Parse a raw payload from Discord into a channel create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.ChannelCreateEvent The parsed channel create event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_channel_update_event", "u": 74, "d": "Parse a raw payload from Discord into a channel update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_channel : typing.Optional[hikari.channels.GuildChannel] The guild channel object or  builtins.None . Returns    - hikari.events.channel_events.ChannelUpdateEvent The parsed event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_channel_delete_event", "u": 74, "d": "Parse a raw payload from Discord into a channel delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.ChannelDeleteEvent The parsed channel delete event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_channel_pins_update_event", "u": 74, "d": "Parse a raw payload from Discord into a channel pins update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.PinsUpdateEvent The parsed channel pins update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_webhook_update_event", "u": 74, "d": "Parse a raw payload from Discord into a webhook update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.WebhookUpdateEvent The parsed webhook update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_invite_create_event", "u": 74, "d": "Parse a raw payload from Discord into an invite create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.InviteCreateEvent The parsed invite create event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_invite_delete_event", "u": 74, "d": "Parse a raw payload from Discord into an invite delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.channel_events.InviteDeleteEvent The parsed invite delete event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_typing_start_event", "u": 74, "d": "Parse a raw payload from Discord into a typing start event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.typing_events.TypingEvent The parsed typing start event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_create_event", "u": 74, "d": "Parse a raw payload from Discord into a guild create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.GuildAvailableEvent The parsed guild create event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_update_event", "u": 74, "d": "Parse a raw payload from Discord into a guild update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_guild : typing.Optional[hikari.guilds.Guild] The guild object or  builtins.None . Returns    - hikari.events.guild_events.GuildUpdateEvent The parsed guild update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_leave_event", "u": 74, "d": "Parse a raw payload from Discord into a guild leave event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.GuildLeaveEvent The parsed guild leave event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_unavailable_event", "u": 74, "d": "Parse a raw payload from Discord into a guild unavailable event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.GuildUnavailableEvent The parsed guild unavailable event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_ban_add_event", "u": 74, "d": "Parse a raw payload from Discord into a guild ban add event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.BanCreateEvent The parsed guild ban add event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_ban_remove_event", "u": 74, "d": "Parse a raw payload from Discord into a guild ban remove event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.BanDeleteEvent The parsed guild ban remove event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_emojis_update_event", "u": 74, "d": "Parse a raw payload from Discord into a guild emojis update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_emojis : typing.Optional[typing.Sequence[hikari.emojis.KnownCustomEmoji The sequence of emojis or  builtins.None . Returns    - hikari.events.guild_events.EmojisUpdateEvent The parsed guild emojis update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_integration_create_event", "u": 74, "d": "Parse a raw payload from Discord into an integration create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.IntegrationCreateEvent The parsed integration create event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_integration_delete_event", "u": 74, "d": "Parse a raw payload from Discord into an integration delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.IntegrationDeleteEvent The parsed integration delete event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_integration_update_event", "u": 74, "d": "Parse a raw payload from Discord into an integration update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.guild_events.IntegrationUpdateEvent The parsed integration update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_presence_update_event", "u": 74, "d": "Parse a raw payload from Discord into a presence update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_presence: typing.Optional[hikari.presences.MemberPresence] The presence object or  builtins.None . Returns    - hikari.events.guild_events.PresenceUpdateEvent The parsed presence update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_member_add_event", "u": 74, "d": "Parse a raw payload from Discord into a guild member add event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.member_events.MemberCreateEvent The parsed guild member add event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_member_update_event", "u": 74, "d": "Parse a raw payload from Discord into a guild member update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_member: typing.Optional[hikari.guilds.Member] The member object or  builtins.None . Returns    - hikari.events.member_events.MemberUpdateEvent The parsed guild member update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_member_remove_event", "u": 74, "d": "Parse a raw payload from Discord into a guild member remove event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.member_events.MemberDeleteEvent The parsed guild member remove event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_role_create_event", "u": 74, "d": "Parse a raw payload from Discord into a guild role create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.role_events.RoleCreateEvent The parsed guild role create event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_role_update_event", "u": 74, "d": "Parse a raw payload from Discord into a guild role update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_role: typing.Optional[hikari.guilds.Role] The role object or  builtins.None . Returns    - hikari.events.role_events.RoleUpdateEvent The parsed guild role update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_role_delete_event", "u": 74, "d": "Parse a raw payload from Discord into a guild role delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.role_events.RoleDeleteEvent The parsed guild role delete event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_starting_event", "u": 74, "d": "Build a starting event object. Returns    - hikari.events.lifetime_events.StartingEvent The built starting event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_started_event", "u": 74, "d": "Build a started event object. Returns    - hikari.events.lifetime_events.StartingEvent The built started event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_stopping_event", "u": 74, "d": "Build a starting event object. Returns    - hikari.events.lifetime_events.StartingEvent The built starting event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_stopped_event", "u": 74, "d": "Build a stopped event object. Returns    - hikari.events.lifetime_events.StartingEvent The built starting event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_create_event", "u": 74, "d": "Parse a raw payload from Discord into a message create event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.message_events.MessageCreateEvent The parsed message create event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_update_event", "u": 74, "d": "Parse a raw payload from Discord into a message update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_message: typing.Optional[hikari.messages.PartialMessage] The message object or  builtins.None . Returns    - hikari.events.message_events.MessageUpdateEvent The parsed message update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_delete_event", "u": 74, "d": "Parse a raw payload from Discord into a message delete event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.message_events.MessageDeleteEvent The parsed message delete event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_delete_bulk_event", "u": 74, "d": "Parse a raw payload from Discord into a message delete bulk event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.message_events.MessageDeleteEvent The parsed message delete bulk event object. Raises    builtins.NotImplementedError If a bulk delete occurs in a DM channel.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_reaction_add_event", "u": 74, "d": "Parse a raw payload from Discord into a message reaction add event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionAddEvent The parsed message reaction add event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_reaction_remove_event", "u": 74, "d": "Parse a raw payload from Discord into a message reaction remove event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionDeleteEvent The parsed message reaction remove event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_reaction_remove_all_event", "u": 74, "d": "Parse a raw payload from Discord into a message reaction remove all event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionDeleteAllEvent The parsed message reaction remove all event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_message_reaction_remove_emoji_event", "u": 74, "d": "Parse a raw payload from Discord into a message reaction remove emoji event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.reaction_events.ReactionDeleteEmojiEvent The parsed message reaction remove emoji event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_ready_event", "u": 74, "d": "Parse a raw payload from Discord into a ready event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.shard_events.ShardReadyEvent The parsed ready event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_connected_event", "u": 74, "d": "Build a shard connected event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. Returns    - hikari.events.shard_events.ShardReadyEvent The built shard connected event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_disconnected_event", "u": 74, "d": "Build a shard disconnected event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. Returns    - hikari.events.shard_events.ShardReadyEvent The built shard disconnected event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_resumed_event", "u": 74, "d": "Build a shard resumed event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. Returns    - hikari.events.shard_events.ShardReadyEvent The built shard resumed event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_guild_member_chunk_event", "u": 74, "d": "Parse a raw payload from Discord into a member chunk event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.shard_events.MemberChunkEvent The parsed member chunk object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_own_user_update_event", "u": 74, "d": "Parse a raw payload from Discord into a own user update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_user: typing.Optional[hikari.users.OwnUser] The OwnUser object or  builtins.None . Returns    - hikari.events.user_events.OwnUserUpdateEvent The parsed own user update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_voice_state_update_event", "u": 74, "d": "Parse a raw payload from Discord into a voice state update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. old_state: typing.Optional[hikari.voices.VoiceState] The VoiceState object or  builtins.None . Returns    - hikari.events.voice_events.VoiceStateUpdateEvent The parsed voice state update event object.", "f": 1}, {"r": "hikari.impl.event_factory.EventFactoryImpl.deserialize_voice_server_update_event", "u": 74, "d": "Parse a raw payload from Discord into a voice server update event object. Parameters      shard : hikari.api.shard.GatewayShard The shard that emitted this event. payload : hikari.internal.data_binding.JSONObject The dict payload to parse. Returns    - hikari.events.voice_events.VoiceServerUpdateEvent The parsed voice server update event object.", "f": 1}, {"r": "hikari.embeds", "u": 75, "d": "Application and entities that are used to describe message embeds on Discord."}, {"r": "hikari.embeds.Embed", "u": 75, "d": "Represents an embed."}, {"r": "hikari.embeds.Embed.from_received_embed", "u": 75, "d": "Generate an embed from the given attributes. You should never call this.", "f": 1}, {"r": "hikari.embeds.Embed.title", "u": 75, "d": "Return the title of the embed. This will be  builtins.None if not set. Returns    - typing.Optional[builtins.str] The title of the embed."}, {"r": "hikari.embeds.Embed.description", "u": 75, "d": "Return the description of the embed. This will be  builtins.None if not set. Returns    - typing.Optional[builtins.str] The description of the embed."}, {"r": "hikari.embeds.Embed.url", "u": 75, "d": "Return the URL of the embed title. This will be  builtins.None if not set. Returns    - typing.Optional[builtins.str] The URL of the embed title"}, {"r": "hikari.embeds.Embed.color", "u": 75, "d": "Return the colour of the embed. This will be  builtins.None if not set. Returns    - typing.Optional[hikari.colors.Color] The colour that is set."}, {"r": "hikari.embeds.Embed.colour", "u": 75, "d": "Return the colour of the embed. This will be  builtins.None if not set. Returns    - typing.Optional[hikari.colors.Color] The colour that is set."}, {"r": "hikari.embeds.Embed.timestamp", "u": 75, "d": "Return the timestamp of the embed. This will be  builtins.None if not set. Returns    - typing.Optional[datetime.datetime] The timestamp set on the embed.  ! warning Setting a non-timezone-aware datetime will result in a warning being raised. This is done due to potential confusion caused by Discord requiring a UTC timestamp for this field. Any non-timezone aware timestamp is interpreted as using the system's current timezone instead. Thus, using  datetime.datetime.utcnow will result in a potentially incorrect timezone being set. To generate a timezone aware timestamp, use one of the following snippets:  Use UTC. >>> datetime.datetime.now(tz=datetime.timezone.utc) datetime.datetime(2020, 6, 5, 18, 29, 56, 424744, tzinfo=datetime.timezone.utc)  Use your current timezone. >>> datetime.datetime.now().astimezone() datetime.datetime(2020, 7, 7, 8, 57, 9, 775328, tzinfo= ., 'BST' By specifying a timezone, Hikari can automatically adjust the given time to UTC without you needing to think about it. You can generate a timezone-aware timestamp instead of a timezone-naive one by specifying a timezone. Hikari will detect any difference in timezone if the timestamp is non timezone-naive and fix it for you.  I am British, and it is June, so we are in daylight saving  (UTC+1 or GMT+1, specifically). >>> import datetime  This is timezone naive, notice no timezone in the repr that  gets printed. This is no good to us, as Discord will interpret it  as being in the future! >>> datetime.datetime.now() datetime.datetime(2020, 6, 5, 19, 29, 48, 281716)  Instead, this is a timezone-aware timestamp, and we can use this  correctly. This will always return the current time in UTC. >>> datetime.datetime.now(tz=datetime.timezone.utc) datetime.datetime(2020, 6, 5, 18, 29, 56, 424744, tzinfo=datetime.timezone.utc)  We could instead use a custom timezone. Since the timezone is  explicitly specified, Hikari will convert it to UTC for you when  you send the embed. >>>  . A library on PyPI called [tzlocal]( .) also exists that may be useful to you if you need to get your local timezone for any reason. >>> import datetime >>> import tzlocal  Naive datetime that will show the wrong time on Discord. >>> datetime.datetime.now() datetime.datetime(2020, 6, 5, 19, 33, 21, 329950)  Timezone-aware datetime that uses my local timezone correctly. >>> datetime.datetime.now(tz=tzlocal.get_localzone( datetime.datetime(2020, 6, 5, 19, 33, 40, 967939, tzinfo= )  Changing timezones. >>> dt = datetime.datetime.now(tz=datetime.timezone.utc) >>> print(dt) datetime.datetime(2020, 6, 5, 18, 38, 27, 863990, tzinfo=datetime.timezone.utc) >>> dt.astimezone(tzlocal.get_localzone( datetime.datetime(2020, 6, 5, 19, 38, 27, 863990, tzinfo= )  .this is not required, but you may find it more useful if using the timestamps in debug logs, for example."}, {"r": "hikari.embeds.Embed.footer", "u": 75, "d": "Return the footer of the embed. Will be  builtins.None if not set. typing.Optional[EmbedFooter] The footer of the embed."}, {"r": "hikari.embeds.Embed.image", "u": 75, "d": "Return the image set in the embed. Will be  builtins.None if not set. typing.Optional[EmbedImage] The image of the embed.  ! note Use  set_image to update this value."}, {"r": "hikari.embeds.Embed.thumbnail", "u": 75, "d": "Return the thumbnail set in the embed. Will be  builtins.None if not set. typing.Optional[EmbedImage] The thumbnail of the embed.  ! note Use  set_thumbnail to update this value."}, {"r": "hikari.embeds.Embed.video", "u": 75, "d": "Return the video to show in the embed. Will be  builtins.None if not set. Returns    - typing.Optional[EmbedVideo] The video of the embed.  ! note This object cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event with a video attached."}, {"r": "hikari.embeds.Embed.provider", "u": 75, "d": "Return the provider to show in the embed. Will be  builtins.None if not set. Returns    - typing.Optional[EmbedProvider] The provider of the embed.  ! note This object cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event with a custom provider set."}, {"r": "hikari.embeds.Embed.author", "u": 75, "d": "Return the author to show in the embed. Will be  builtins.None if not set. Returns    - typing.Optional[EmbedAuthor] The author of the embed.  ! note Use  set_author to update this value."}, {"r": "hikari.embeds.Embed.fields", "u": 75, "d": "Return the sequence of fields in the embed.  ! note Use  add_field to add a new field,  edit_field to edit an existing field, or  remove_field to remove a field."}, {"r": "hikari.embeds.Embed.set_author", "u": 75, "d": "Set the author of this embed. Parameters      name : typing.Optional[builtins.str] The optional name of the author. url : typing.Optional[builtins.str] The optional URL of the author. icon : typing.Optional[hikari.files.Resourceish] The optional image to show next to the embed author. This can be many different things, to aid in convenience. - If  builtins.None , nothing is set. - If a  pathlib.PurePath or  builtins.str to a valid URL, the URL is linked to directly. - Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will have their URL linked to directly. this field. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded as an attachment and linked into the embed. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and linked into the embed. Returns    - Embed This embed. Allows for call chaining.", "f": 1}, {"r": "hikari.embeds.Embed.set_footer", "u": 75, "d": "Set the footer of this embed. Parameters      text : typing.Optional[str] The mandatory text string to set in the footer. If  builtins.None , the footer is removed. icon : typing.Optional[hikari.files.Resourceish] The optional image to show next to the embed footer. This can be many different things, to aid in convenience. - If  builtins.None , nothing is set. - If a  pathlib.PurePath or  builtins.str to a valid URL, the URL is linked to directly. - Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will have their URL linked to directly. this field. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded as an attachment and linked into the embed. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and linked into the embed. Returns    - Embed This embed. Allows for call chaining.", "f": 1}, {"r": "hikari.embeds.Embed.set_image", "u": 75, "d": "Set the image on this embed. Parameters      image : typing.Optional[hikari.files.Resourceish] The optional resource to show for the embed image. This can be many different things, to aid in convenience. - If  builtins.None , nothing is set. - If a  pathlib.PurePath or  builtins.str to a valid URL, the URL is linked to directly. - Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will have their URL linked to directly. this field. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded as an attachment and linked into the embed. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and linked into the embed. Returns    - Embed This embed. Allows for call chaining.", "f": 1}, {"r": "hikari.embeds.Embed.set_thumbnail", "u": 75, "d": "Set the image on this embed. Parameters      image : typing.Optional[hikari.files.Resourceish] The optional resource to show for the embed thumbnail. This can be many different things, to aid in convenience. - If  builtins.None , nothing is set. - If a  pathlib.PurePath or  builtins.str to a valid URL, the URL is linked to directly. - Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will have their URL linked to directly. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded as an attachment and linked into the embed. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and linked into the embed. Returns    - Embed This embed. Allows for call chaining.", "f": 1}, {"r": "hikari.embeds.Embed.add_field", "u": 75, "d": "Add a new field to this embed. Parameters      name : str The mandatory non-empty field name. This must contain at least one non-whitespace character to be valid. value : str The mandatory non-empty field value. This must contain at least one non-whitespace character to be valid. Other Parameters         inline : bool If  builtins.True , the embed field may be shown \"inline\" on some Discord clients with other fields. If  builtins.False , it is always placed on a separate line. This will default to  builtins.False . Returns    - Embed This embed. Allows for call chaining.", "f": 1}, {"r": "hikari.embeds.Embed.edit_field", "u": 75, "d": "Edit an existing field on this embed. Parameters      index : int The index of the field to edit. Other Parameters         name : hikari.undefined.UndefinedOr[str] The new field name to use. If left to the default ( undefined ), then it will not be changed. value : hikari.undefined.UndefinedOr[str] The new field value to use. If left to the default ( undefined ), then it will not be changed. inline : hikari.undefined.UndefinedOr[builtins.bool]  builtins.True to inline the field, or  builtins.False to force it to be on a separate line. If left to the default ( undefined ), then it will not be changed. Returns    - Embed This embed. Allows for call chaining. Raises    builtins.IndexError Raised if the index is greater than  len(embed.fields) - 1 or less than  -len(embed.fields) ", "f": 1}, {"r": "hikari.embeds.Embed.remove_field", "u": 75, "d": "Remove an existing field from this embed. Parameters      index : int The index of the embed field to remove. Returns    - Embed This embed. Allows for call chaining. Raises    builtins.IndexError Raised if the index is greater than  len(embed.fields) - 1 or less than  -len(embed.fields) ", "f": 1}, {"r": "hikari.embeds.EmbedResource", "u": 75, "d": "A base type for any resource provided in an embed. Resources can be downloaded and uploaded. Method generated by attrs for class EmbedResource."}, {"r": "hikari.embeds.EmbedResource.url", "u": 75, "d": "URL of this embed resource. Returns    - typing.Optional[builtins.str] The URL of this embed resource."}, {"r": "hikari.embeds.EmbedResource.filename", "u": 75, "d": "File name of this embed resource. Returns    - typing.Optional[builtins.str] The file name of this embed resource."}, {"r": "hikari.embeds.EmbedResource.stream", "u": 75, "d": "Produce a stream of data for the resource. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests.", "f": 1}, {"r": "hikari.embeds.EmbedResource.resource", "u": 75, "d": "The resource this object wraps around."}, {"r": "hikari.embeds.EmbedResource.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.embeds.EmbedResource.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.embeds.EmbedResourceWithProxy", "u": 75, "d": "Resource with a corresponding proxied element. Method generated by attrs for class EmbedResourceWithProxy."}, {"r": "hikari.embeds.EmbedResourceWithProxy.proxy_url", "u": 75, "d": "Proxied URL of this embed resource if applicable. Returns    - typing.Optional[builtins.str] The proxied URL of this embed resource if applicable, else  builtins.None ."}, {"r": "hikari.embeds.EmbedResourceWithProxy.proxy_filename", "u": 75, "d": "File name of the proxied version of this embed resource if applicable. Returns    - typing.Optional[builtins.str] The file name of the proxied version of this embed resource if applicable, else  builtins.None ."}, {"r": "hikari.embeds.EmbedResourceWithProxy.proxy_resource", "u": 75, "d": "The proxied version of the resource, or  builtins.None if not present.  ! note This field cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event."}, {"r": "hikari.embeds.EmbedResourceWithProxy.url", "u": 75, "d": "URL of this embed resource. Returns    - typing.Optional[builtins.str] The URL of this embed resource."}, {"r": "hikari.embeds.EmbedResourceWithProxy.filename", "u": 75, "d": "File name of this embed resource. Returns    - typing.Optional[builtins.str] The file name of this embed resource."}, {"r": "hikari.embeds.EmbedResourceWithProxy.stream", "u": 75, "d": "Produce a stream of data for the resource. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests.", "f": 1}, {"r": "hikari.embeds.EmbedResourceWithProxy.resource", "u": 75, "d": "The resource this object wraps around."}, {"r": "hikari.embeds.EmbedResourceWithProxy.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.embeds.EmbedResourceWithProxy.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.embeds.EmbedVideo", "u": 75, "d": "Represents an embed video.  ! note This object cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event with a video attached.  Therefore, you should never need to initialize an instance of this class yourself. Method generated by attrs for class EmbedVideo."}, {"r": "hikari.embeds.EmbedVideo.height", "u": 75, "d": "The height of the video."}, {"r": "hikari.embeds.EmbedVideo.width", "u": 75, "d": "The width of the video."}, {"r": "hikari.embeds.EmbedVideo.proxy_url", "u": 75, "d": "Proxied URL of this embed resource if applicable. Returns    - typing.Optional[builtins.str] The proxied URL of this embed resource if applicable, else  builtins.None ."}, {"r": "hikari.embeds.EmbedVideo.proxy_filename", "u": 75, "d": "File name of the proxied version of this embed resource if applicable. Returns    - typing.Optional[builtins.str] The file name of the proxied version of this embed resource if applicable, else  builtins.None ."}, {"r": "hikari.embeds.EmbedVideo.proxy_resource", "u": 75, "d": "The proxied version of the resource, or  builtins.None if not present.  ! note This field cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event."}, {"r": "hikari.embeds.EmbedVideo.url", "u": 75, "d": "URL of this embed resource. Returns    - typing.Optional[builtins.str] The URL of this embed resource."}, {"r": "hikari.embeds.EmbedVideo.filename", "u": 75, "d": "File name of this embed resource. Returns    - typing.Optional[builtins.str] The file name of this embed resource."}, {"r": "hikari.embeds.EmbedVideo.stream", "u": 75, "d": "Produce a stream of data for the resource. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests.", "f": 1}, {"r": "hikari.embeds.EmbedVideo.resource", "u": 75, "d": "The resource this object wraps around."}, {"r": "hikari.embeds.EmbedVideo.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.embeds.EmbedVideo.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.embeds.EmbedImage", "u": 75, "d": "Represents an embed image. Method generated by attrs for class EmbedImage."}, {"r": "hikari.embeds.EmbedImage.height", "u": 75, "d": "The height of the image, if present and known, otherwise  builtins.None .  ! note This field cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event."}, {"r": "hikari.embeds.EmbedImage.width", "u": 75, "d": "The width of the image, if present and known, otherwise  builtins.None .  ! note This field cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event."}, {"r": "hikari.embeds.EmbedImage.proxy_url", "u": 75, "d": "Proxied URL of this embed resource if applicable. Returns    - typing.Optional[builtins.str] The proxied URL of this embed resource if applicable, else  builtins.None ."}, {"r": "hikari.embeds.EmbedImage.proxy_filename", "u": 75, "d": "File name of the proxied version of this embed resource if applicable. Returns    - typing.Optional[builtins.str] The file name of the proxied version of this embed resource if applicable, else  builtins.None ."}, {"r": "hikari.embeds.EmbedImage.proxy_resource", "u": 75, "d": "The proxied version of the resource, or  builtins.None if not present.  ! note This field cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event."}, {"r": "hikari.embeds.EmbedImage.url", "u": 75, "d": "URL of this embed resource. Returns    - typing.Optional[builtins.str] The URL of this embed resource."}, {"r": "hikari.embeds.EmbedImage.filename", "u": 75, "d": "File name of this embed resource. Returns    - typing.Optional[builtins.str] The file name of this embed resource."}, {"r": "hikari.embeds.EmbedImage.stream", "u": 75, "d": "Produce a stream of data for the resource. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. head_only : builtins.bool Defaults to  builtins.False . If  builtins.True , then the implementation may only retrieve HEAD information if supported. This currently only has any effect for web requests.", "f": 1}, {"r": "hikari.embeds.EmbedImage.resource", "u": 75, "d": "The resource this object wraps around."}, {"r": "hikari.embeds.EmbedImage.extension", "u": 3, "d": "File extension, if there is one."}, {"r": "hikari.embeds.EmbedImage.read", "u": 3, "d": "Read the entire resource at once into memory.   data = await resource.read( .)  ^ This is a shortcut for the following  v async with resource.stream( .) as reader: data = await reader.read()    ! warning If you simply wish to re-upload this resource to Discord via any endpoint in Hikari, you should opt to just pass this resource object directly. This way, Hikari can perform byte inception, which significantly reduces the memory usage for your bot as it grows larger. Parameters      executor : typing.Optional[concurrent.futures.Executor] The executor to run in for blocking operations. If  builtins.None , then the default executor is used for the current event loop. Returns    - builtins.bytes The entire resource.", "f": 1}, {"r": "hikari.embeds.EmbedProvider", "u": 75, "d": "Represents an embed provider.  ! note This object cannot be set by bots or webhooks while sending an embed and will be ignored during serialization. Expect this to be populated on any received embed attached to a message event provided by an external source.  Therefore, you should never need to initialize an instance of this class yourself. Method generated by attrs for class EmbedProvider."}, {"r": "hikari.embeds.EmbedProvider.name", "u": 75, "d": "The name of the provider."}, {"r": "hikari.embeds.EmbedProvider.url", "u": 75, "d": "The URL of the provider."}, {"r": "hikari.embeds.EmbedAuthor", "u": 75, "d": "Represents an author of an embed. Method generated by attrs for class EmbedAuthor."}, {"r": "hikari.embeds.EmbedAuthor.icon", "u": 75, "d": "The author's icon, or  builtins.None if not present."}, {"r": "hikari.embeds.EmbedAuthor.name", "u": 75, "d": "The name of the author, or  builtins.None if not specified."}, {"r": "hikari.embeds.EmbedAuthor.url", "u": 75, "d": "The URL that the author's name should act as a hyperlink to. This may be  builtins.None if no hyperlink on the author's name is specified."}, {"r": "hikari.embeds.EmbedFooter", "u": 75, "d": "Represents an embed footer. Method generated by attrs for class EmbedFooter."}, {"r": "hikari.embeds.EmbedFooter.icon", "u": 75, "d": "The URL of the footer icon, or  builtins.None if not present."}, {"r": "hikari.embeds.EmbedFooter.text", "u": 75, "d": "The footer text, or  builtins.None if not present."}, {"r": "hikari.embeds.EmbedField", "u": 75, "d": "Represents a field in a embed. Method generated by attrs for class EmbedField."}, {"r": "hikari.embeds.EmbedField.is_inline", "u": 75, "d": "Return  builtins.True if the field should display inline. Defaults to False."}, {"r": "hikari.embeds.EmbedField.name", "u": 75, "d": "The name of the field."}, {"r": "hikari.embeds.EmbedField.value", "u": 75, "d": "The value of the field."}, {"r": "hikari.applications", "u": 76, "d": "Application and entities related to discord's Oauth2 flow."}, {"r": "hikari.applications.Application", "u": 76, "d": "Represents the information of an Oauth2 Application. Method generated by attrs for class Application."}, {"r": "hikari.applications.Application.cover_image_url", "u": 76, "d": "Cover image used on the store. Returns    - typing.Optional[hikari.files.URL] The URL, or  builtins.None if no cover image exists."}, {"r": "hikari.applications.Application.format_cover_image", "u": 76, "d": "Generate the cover image used in the store, if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL, or  builtins.None if no cover image exists. Raises    builtins.ValueError If the size is not an integer power of 2 between 16 and 4096 (inclusive).", "f": 1}, {"r": "hikari.applications.Application.app", "u": 76, "d": "The client application that models may use for procedures."}, {"r": "hikari.applications.Application.cover_image_hash", "u": 76, "d": "The CDN's hash of this application's cover image, used on the store."}, {"r": "hikari.applications.Application.guild_id", "u": 76, "d": "The ID of the guild this application is linked to if sold on Discord."}, {"r": "hikari.applications.Application.is_bot_code_grant_required", "u": 76, "d": " builtins.True if this application's bot is requiring code grant for invites. Will be  builtins.None if this application doesn't have a bot."}, {"r": "hikari.applications.Application.is_bot_public", "u": 76, "d": " builtins.True if the bot associated with this application is public. Will be  builtins.None if this application doesn't have an associated bot."}, {"r": "hikari.applications.Application.owner", "u": 76, "d": "The application's owner."}, {"r": "hikari.applications.Application.primary_sku_id", "u": 76, "d": "The ID of the primary \"Game SKU\" of a game that's sold on Discord."}, {"r": "hikari.applications.Application.rpc_origins", "u": 76, "d": "A collection of this application's RPC origin URLs, if RPC is enabled."}, {"r": "hikari.applications.Application.slug", "u": 76, "d": "The URL \"slug\" that is used to point to this application's store page. Only applicable to applications sold on Discord."}, {"r": "hikari.applications.Application.team", "u": 76, "d": "The team this application belongs to. If the application is not part of a team, this will be  builtins.None ."}, {"r": "hikari.applications.Application.verify_key", "u": 76, "d": "The base64 encoded key used for the GameSDK's  GetTicket ."}, {"r": "hikari.applications.Application.id", "u": 2, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.applications.Application.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.applications.ConnectionVisibility", "u": 76, "d": "Describes who can see a connection with a third party account."}, {"r": "hikari.applications.ConnectionVisibility.name", "u": 76, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.applications.ConnectionVisibility.value", "u": 76, "d": "Return the value of the enum member."}, {"r": "hikari.applications.ConnectionVisibility.NONE", "u": 76, "d": "Implies that only you can see the corresponding connection."}, {"r": "hikari.applications.ConnectionVisibility.EVERYONE", "u": 76, "d": "Everyone can see the connection."}, {"r": "hikari.applications.OAuth2Scope", "u": 76, "d": "OAuth2 Scopes that Discord allows. These are categories of permissions for applications using the OAuth2 API directly. Most users will only ever need the  BOT scope when developing bots."}, {"r": "hikari.applications.OAuth2Scope.name", "u": 76, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.applications.OAuth2Scope.value", "u": 76, "d": "Return the value of the enum member."}, {"r": "hikari.applications.OAuth2Scope.ACTIVITIES_READ", "u": 76, "d": "Enables fetching the \"Now Playing/Recently Played\" list.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.ACTIVITIES_WRITE", "u": 76, "d": "Enables updating a user's activity.  ! note You must be whitelisted to use this scope.  ! note This is not required to use the GameSDK activity manager."}, {"r": "hikari.applications.OAuth2Scope.APPLICATIONS_BUILDS_READ", "u": 76, "d": "Enables reading build data for a user's applications.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.APPLICATIONS_BUILDS_UPLOAD", "u": 76, "d": "Enables uploading/updating builds for a user's applications.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.APPLICATIONS_ENTITLEMENTS", "u": 76, "d": "Enables reading entitlements for a user's applications."}, {"r": "hikari.applications.OAuth2Scope.APPLICATIONS_STORE_UPDATE", "u": 76, "d": "Enables reading/updating store data for the user's applications. This includes store listings, achievements, SKU's, etc.  ! note The store API is deprecated and may be removed in the future."}, {"r": "hikari.applications.OAuth2Scope.BOT", "u": 76, "d": "Enables adding a bot application to a guild.  ! note This requires you to have set up a bot account for your application."}, {"r": "hikari.applications.OAuth2Scope.CONNECTIONS", "u": 76, "d": "Enables viewing third-party linked accounts such as Twitch."}, {"r": "hikari.applications.OAuth2Scope.EMAIL", "u": 76, "d": "Enable the application to view the user's email and application info."}, {"r": "hikari.applications.OAuth2Scope.GROUP_DM_JOIN", "u": 76, "d": "Enables joining users into a group DM.  ! warning This cannot add the bot to a group DM."}, {"r": "hikari.applications.OAuth2Scope.GUILDS", "u": 76, "d": "Enables viewing the guilds the user is in."}, {"r": "hikari.applications.OAuth2Scope.GUILDS_JOIN", "u": 76, "d": "Enables adding the user to a specific guild.  ! note This requires you to have set up a bot account for your application."}, {"r": "hikari.applications.OAuth2Scope.IDENTIFY", "u": 76, "d": "Enables viewing info about itself.  ! note This does not include email address info. Use the  EMAIL scope instead to retrieve this information."}, {"r": "hikari.applications.OAuth2Scope.RELATIONSHIPS_READ", "u": 76, "d": "Enables viewing a user's friend list.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.RPC", "u": 76, "d": "Enables the RPC application to control the local user's Discord client.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.RPC_API", "u": 76, "d": "Enables the RPC application to access the RPC API as the local user.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.RPC_MESSAGES_READ", "u": 76, "d": "Enables the RPC application to read messages from all channels the user is in."}, {"r": "hikari.applications.OAuth2Scope.RPC_NOTIFICATIONS_READ", "u": 76, "d": "Enables the RPC application to read from all channels the user is in.  ! note You must be whitelisted to use this scope."}, {"r": "hikari.applications.OAuth2Scope.WEBHOOK_INCOMING", "u": 76, "d": "Used to generate a webhook that is returned in the OAuth2 token response. This is used during authorization code grants."}, {"r": "hikari.applications.OwnConnection", "u": 76, "d": "Represents a user's connection with a third party account. Returned by the  GET Current User Connections endpoint. Method generated by attrs for class OwnConnection."}, {"r": "hikari.applications.OwnConnection.id", "u": 76, "d": "The string ID of the third party connected account.  ! warning Seeing as this is a third party ID, it will not be a snowflakes."}, {"r": "hikari.applications.OwnConnection.integrations", "u": 76, "d": "A sequence of the partial guild integration objects this connection has."}, {"r": "hikari.applications.OwnConnection.is_activity_visible", "u": 76, "d": " builtins.True if this connection's activities are shown in the user's presence."}, {"r": "hikari.applications.OwnConnection.is_friend_sync_enabled", "u": 76, "d": " builtins.True if friends should be added based on this connection."}, {"r": "hikari.applications.OwnConnection.is_revoked", "u": 76, "d": " builtins.True if the connection has been revoked."}, {"r": "hikari.applications.OwnConnection.is_verified", "u": 76, "d": " builtins.True if the connection has been verified."}, {"r": "hikari.applications.OwnConnection.name", "u": 76, "d": "The username of the connected account."}, {"r": "hikari.applications.OwnConnection.type", "u": 76, "d": "The type of service this connection is for."}, {"r": "hikari.applications.OwnConnection.visibility", "u": 76, "d": "The visibility of the connection."}, {"r": "hikari.applications.OwnGuild", "u": 76, "d": "Represents a user bound partial guild object. Method generated by attrs for class OwnGuild."}, {"r": "hikari.applications.OwnGuild.features", "u": 76, "d": "A list of the features in this guild."}, {"r": "hikari.applications.OwnGuild.is_owner", "u": 76, "d": " builtins.True when the current user owns this guild."}, {"r": "hikari.applications.OwnGuild.my_permissions", "u": 76, "d": "The guild-level permissions that apply to the current user or bot."}, {"r": "hikari.applications.OwnGuild.icon_url", "u": 7, "d": "Icon for the guild, if set; otherwise  builtins.None ."}, {"r": "hikari.applications.OwnGuild.shard_id", "u": 7, "d": "Return the ID of the shard this guild is served by. This may return  None if the application does not have a gateway connection."}, {"r": "hikari.applications.OwnGuild.format_icon", "u": 7, "d": "Generate the guild's icon, if set. Parameters      ext : typing.Optional[builtins.str] The extension to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Returns    - typing.Optional[hikari.files.URL] The URL to the resource, or  builtins.None if no icon is set. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.applications.OwnGuild.app", "u": 7, "d": "The client application that models may use for procedures."}, {"r": "hikari.applications.OwnGuild.icon_hash", "u": 7, "d": "The hash for the guild icon, if there is one."}, {"r": "hikari.applications.OwnGuild.id", "u": 7, "d": "The ID of this entity."}, {"r": "hikari.applications.OwnGuild.name", "u": 7, "d": "The name of the guild."}, {"r": "hikari.applications.OwnGuild.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.applications.Team", "u": 76, "d": "Represents a development team, along with all its members. Method generated by attrs for class Team."}, {"r": "hikari.applications.Team.icon_url", "u": 76, "d": "Team icon. Returns    - typing.Optional[hikari.files.URL] The URL, or  builtins.None if no icon exists."}, {"r": "hikari.applications.Team.format_icon", "u": 76, "d": "Generate the icon for this team if set. Parameters      ext : builtins.str The extension to use for this URL, defaults to  png . Supports  png ,  jpeg ,  jpg and  webp . size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between  16 and  4096 inclusive. Returns    - typing.Optional[hikari.files.URL] The URL, or  builtins.None if no icon exists. Raises    builtins.ValueError If the size is not an integer power of 2 between 16 and 4096 (inclusive).", "f": 1}, {"r": "hikari.applications.Team.app", "u": 76, "d": "The client application that models may use for procedures."}, {"r": "hikari.applications.Team.icon_hash", "u": 76, "d": "The CDN hash of this team's icon. If no icon is provided, this will be  builtins.None ."}, {"r": "hikari.applications.Team.id", "u": 76, "d": "The ID of this entity."}, {"r": "hikari.applications.Team.members", "u": 76, "d": "A mapping containing each member in this team. The mapping maps keys containing the member's ID to values containing the member object."}, {"r": "hikari.applications.Team.owner_id", "u": 76, "d": "The ID of this team's owner."}, {"r": "hikari.applications.Team.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.applications.TeamMember", "u": 76, "d": "Represents a member of a Team. Method generated by attrs for class TeamMember."}, {"r": "hikari.applications.TeamMember.app", "u": 76, "d": "Return the app that is bound to the user object."}, {"r": "hikari.applications.TeamMember.avatar_hash", "u": 76, "d": "Avatar hash for the user, if they have one, otherwise  builtins.None ."}, {"r": "hikari.applications.TeamMember.avatar_url", "u": 76, "d": "Avatar URL for the user, if they have one set. May be  builtins.None if no custom avatar is set. In this case, you should use  default_avatar_url instead."}, {"r": "hikari.applications.TeamMember.default_avatar_url", "u": 76, "d": "Default avatar for this user."}, {"r": "hikari.applications.TeamMember.discriminator", "u": 76, "d": "Discriminator for the user."}, {"r": "hikari.applications.TeamMember.flags", "u": 76, "d": "Flag bits that are set for the user."}, {"r": "hikari.applications.TeamMember.id", "u": 76, "d": "Return the ID of this entity. Returns    - Snowflake The snowflake ID of this object."}, {"r": "hikari.applications.TeamMember.is_bot", "u": 76, "d": " builtins.True if this user is a bot account,  builtins.False otherwise."}, {"r": "hikari.applications.TeamMember.is_system", "u": 76, "d": " builtins.True if this user is a system account,  builtins.False otherwise."}, {"r": "hikari.applications.TeamMember.mention", "u": 76, "d": "Return a raw mention string for the given user. Example    -   >>> some_user.mention ' '   Returns    - builtins.str The mention string to use."}, {"r": "hikari.applications.TeamMember.username", "u": 76, "d": "Username for the user."}, {"r": "hikari.applications.TeamMember.fetch_dm_channel", "u": 76, "d": "Fetch the DM channel for this user. Returns    - hikari.channels.DMChannel The requested channel. Raises    hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.NotFoundError If the user is not found. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.", "f": 1}, {"r": "hikari.applications.TeamMember.membership_state", "u": 76, "d": "The state of this user's membership."}, {"r": "hikari.applications.TeamMember.permissions", "u": 76, "d": "This member's permissions within a team. At the time of writing, this will always be a sequence of one  builtins.str , which will always be  \" \" . This may change in the future, however."}, {"r": "hikari.applications.TeamMember.team_id", "u": 76, "d": "The ID of the team this member belongs to."}, {"r": "hikari.applications.TeamMember.user", "u": 76, "d": "The user representation of this team member."}, {"r": "hikari.applications.TeamMember.format_avatar", "u": 10, "d": "Generate the avatar for this user, if set. If no custom avatar is set, this returns  builtins.None . You can then use the  default_avatar_url attribute instead to fetch the displayed URL. Parameters      ext : typing.Optional[builtins.str] The ext to use for this URL, defaults to  png or  gif . Supports  png ,  jpeg ,  jpg ,  webp and  gif (when animated). Will be ignored for default avatars which can only be  png . If  builtins.None , then the correct default extension is determined based on whether the icon is animated or not. size : builtins.int The size to set for the URL, defaults to  4096 . Can be any power of two between 16 and 4096. Will be ignored for default avatars. Returns    - typing.Optional[hikari.files.URL] The URL to the avatar, or  builtins.None if not present. Raises    builtins.ValueError If  size is not a power of two or not between 16 and 4096.", "f": 1}, {"r": "hikari.applications.TeamMember.fetch_self", "u": 10, "d": "Get this user's up-to-date object by performing an API call. Returns    - hikari.users.User The requested user object. Raises    hikari.errors.NotFoundError If the user is not found.", "f": 1}, {"r": "hikari.applications.TeamMember.send", "u": 10, "d": "Send a message to this user in DM's. Parameters      content : hikari.undefined.UndefinedOr[typing.Any] If provided, the message contents. If  hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a  builtins.str . If this is a  hikari.embeds.Embed and no  embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a  hikari.files.Resource , then the content is instead treated as an attachment if no  attachment and no  attachments kwargs are provided. Other Parameters         embed : hikari.undefined.UndefinedOr[hikari.embeds.Embed] If provided, the message embed. attachment : hikari.undefined.UndefinedOr[hikari.files.Resourceish], If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. attachments : hikari.undefined.UndefinedOr[typing.Sequence[hikari.files.Resourceish , If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. tts : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. nonce : hikari.undefined.UndefinedOr[builtins.str] An arbitrary identifier to associate with the message. This can be used to identify it later in received events. If provided, this must be less than 32 bytes. If not provided, then a null value is placed on the message instead. All users can see this value. reply : hikari.undefined.UndefinedOr[hikari.snowflakes.SnowflakeishOr[hikari.messages.PartialMessage If provided, the message to reply to. mentions_everyone : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether the message should parse @everyone/@here mentions. mentions_reply : hikari.undefined.UndefinedOr[builtins.bool] If provided, whether to mention the author of the message that is being replied to. This will not do anything if not being used with  reply . user_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.users.PartialUser], builtins.bool If provided, and  builtins.True , all user mentions will be detected. If provided, and  builtins.False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.users.PartialUser derivatives to enforce mentioning specific users. role_mentions : hikari.undefined.UndefinedOr[typing.Union[hikari.snowflakes.SnowflakeishSequence[hikari.guilds.PartialRole], builtins.bool If provided, and  builtins.True , all role mentions will be detected. If provided, and  builtins.False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of  hikari.snowflakes.Snowflake , or  hikari.guilds.PartialRole derivatives to enforce mentioning specific roles.  ! note Attachments can be passed as many different things, to aid in convenience. - If a  pathlib.PurePath or  builtins.str to a valid URL, the resource at the given URL will be streamed to Discord when sending the message. Subclasses of  hikari.files.WebResource such as  hikari.files.URL ,  hikari.messages.Attachment ,  hikari.emojis.Emoji ,  EmbedResource , etc will also be uploaded this way. This will use bit-inception, so only a small percentage of the resource will remain in memory at any one time, thus aiding in scalability. - If a  hikari.files.Bytes is passed, or a  builtins.str that contains a valid data URI is passed, then this is uploaded with a randomized file name if not provided. - If a  hikari.files.File ,  pathlib.PurePath or  builtins.str that is an absolute or relative path to a file on your file system is passed, then this resource is uploaded as an attachment using non-blocking code internally and streamed using bit-inception where possible. This depends on the type of  concurrent.futures.Executor that is being used for the application (default is a thread pool which supports this behaviour). Returns    - hikari.messages.Message The created message. Raises    builtins.ValueError If more than 100 unique objects/entities are passed for  role_mentions or  user_mentions . builtins.TypeError If both  attachment and  attachments are specified. hikari.errors.BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; users in  user_mentions not being mentioned in the message content; roles in  role_mentions not being mentioned in the message content;  reply not found or not in the same channel. hikari.errors.UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari.errors.ForbiddenError If you are missing the  SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari.errors.NotFoundError If the user is not found. hikari.errors.RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than  max_rate_limit when making a request. hikari.errors.RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari.errors.InternalServerError If an internal error occurs on Discord while handling the request.  ! warning You are expected to make a connection to the gateway and identify once before being able to use this endpoint for a bot.", "f": 1}, {"r": "hikari.applications.TeamMember.created_at", "u": 2, "d": "When the object was created."}, {"r": "hikari.applications.TeamMembershipState", "u": 76, "d": "Represents the state of a user's team membership."}, {"r": "hikari.applications.TeamMembershipState.name", "u": 76, "d": "Return the name of the enum member as a  builtins.str ."}, {"r": "hikari.applications.TeamMembershipState.value", "u": 76, "d": "Return the value of the enum member."}, {"r": "hikari.applications.TeamMembershipState.INVITED", "u": 76, "d": "Denotes the user has been invited to the team but has yet to accept."}, {"r": "hikari.applications.TeamMembershipState.ACCEPTED", "u": 76, "d": "Denotes the user has accepted the invite and is now a member."}, {"r": "hikari.config", "u": 77, "d": "Data class containing network-related configuration settings."}, {"r": "hikari.config.BasicAuthHeader", "u": 77, "d": "An object that can be set as a producer for a basic auth header. Method generated by attrs for class BasicAuthHeader."}, {"r": "hikari.config.BasicAuthHeader.header", "u": 77, "d": "Create the full  Authentication header value. Returns    - builtins.str A base64-encoded string containing  \"{username}:{password}\" ."}, {"r": "hikari.config.BasicAuthHeader.charset", "u": 77, "d": "Encoding to use for the username and password. Default is  \"utf-8\" , but you may choose to use something else, including third-party encodings (e.g. IBM's EBCDIC codepages). Returns    - builtins.str The encoding to use."}, {"r": "hikari.config.BasicAuthHeader.password", "u": 77, "d": "Password to use. Returns    - builtins.str The password to use."}, {"r": "hikari.config.BasicAuthHeader.username", "u": 77, "d": "Username for the header. Returns    - builtins.str The username to use. This must not contain  \":\" ."}, {"r": "hikari.config.ProxySettings", "u": 77, "d": "Settings for configuring an HTTP-based proxy. Method generated by attrs for class ProxySettings."}, {"r": "hikari.config.ProxySettings.all_headers", "u": 77, "d": "Return all proxy headers. Returns    - typing.Optional[hikari.internal.data_binding.Headers] Any headers that are set, or  builtins.None if no headers are to be sent with any request."}, {"r": "hikari.config.ProxySettings.auth", "u": 77, "d": "Authentication header value to use. When cast to a  builtins.str , this should provide the full value for the authentication header. If you are using basic auth, you should consider using the  BasicAuthHeader helper object here, as this will provide any transformations you may require into a base64 string. The default is to have this set to  builtins.None , which will result in no authentication being provided. Returns    - typing.Any The value for the  Authentication header, or  builtins.None to disable."}, {"r": "hikari.config.ProxySettings.headers", "u": 77, "d": "Additional headers to use for requests via a proxy, if required."}, {"r": "hikari.config.ProxySettings.trust_env", "u": 77, "d": "Toggle whether to look for a  netrc file or environment variables. If  builtins.True , and no  url is given on this object, then  HTTP_PROXY and  HTTPS_PROXY will be used from the environment variables, or a  netrc file may be read to determine credentials. If  builtins.False , then this information is instead ignored. Defaults to  builtins.False to prevent potentially unwanted behavior.  ! note For more details of using  netrc , visit: https: www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html Returns    - builtins.bool  builtins.True if allowing the use of environment variables and/or  netrc to determine proxy settings;  builtins.False if this should be disabled explicitly."}, {"r": "hikari.config.ProxySettings.url", "u": 77, "d": "Proxy URL to use. Defaults to  builtins.None which disables the use of an explicit proxy. Returns    - typing.Union[builtins.None, builtins.str, yarl.URL] The proxy URL to use, or  builtins.None to disable it."}, {"r": "hikari.config.HTTPTimeoutSettings", "u": 77, "d": "Settings to control HTTP request timeouts. Method generated by attrs for class HTTPTimeoutSettings."}, {"r": "hikari.config.HTTPTimeoutSettings.acquire_and_connect", "u": 77, "d": "Timeout for  request_socket_connect PLUS connection acquisition. By default, this has no timeout allocated. Returns    - typing.Optional[builtins.float] The timeout, or  builtins.None to disable it."}, {"r": "hikari.config.HTTPTimeoutSettings.request_socket_connect", "u": 77, "d": "Timeout for connecting a socket. By default, this has no timeout allocated. Returns    - typing.Optional[builtins.float] The timeout, or  builtins.None to disable it."}, {"r": "hikari.config.HTTPTimeoutSettings.request_socket_read", "u": 77, "d": "Timeout for reading a socket. By default, this has no timeout allocated. Returns    - typing.Optional[builtins.float] The timeout, or  builtins.None to disable it."}, {"r": "hikari.config.HTTPTimeoutSettings.total", "u": 77, "d": "Total timeout for entire request. By default, this has a 30 second timeout allocated. Returns    - typing.Optional[builtins.float] The timeout, or  builtins.None to disable it."}, {"r": "hikari.config.HTTPSettings", "u": 77, "d": "Settings to control HTTP clients. Method generated by attrs for class HTTPSettings."}, {"r": "hikari.config.HTTPSettings.ssl", "u": 77, "d": ""}, {"r": "hikari.config.HTTPSettings.enable_cleanup_closed", "u": 77, "d": "Toggle whether to clean up closed transports. This defaults to  builtins.True to combat various protocol and asyncio issues present when using Microsoft Windows. If you are sure you know what you are doing, you may instead set this to  False to disable this behavior internally. Returns    - builtins.bool  builtins.True to enable this behavior,  builtins.False to disable it."}, {"r": "hikari.config.HTTPSettings.force_close_transports", "u": 77, "d": "Toggle whether to force close transports on shutdown. This defaults to  builtins.True to combat various protocol and asyncio issues present when using Microsoft Windows. If you are sure you know what you are doing, you may instead set this to  False to disable this behavior internally. Returns    - builtins.bool  builtins.True to enable this behavior,  builtins.False to disable it."}, {"r": "hikari.config.HTTPSettings.max_redirects", "u": 77, "d": "Behavior for handling redirect HTTP responses. If a  builtins.int , allow following redirects from  3xx HTTP responses for up to this many redirects. Exceeding this value will raise an exception. If  builtins.None , then disallow any redirects. The default is to disallow this behavior for security reasons. Generally, it is safer to keep this disabled. You may find a case in the future where you need to enable this if Discord change their URL without warning.  ! note This will only apply to the REST API. WebSockets remain unaffected by any value set here. Returns    - typing.Optional[builtins.int] The number of redirects to allow at a maximum per request.  builtins.None disables the handling of redirects and will result in exceptions being raised instead should one occur."}, {"r": "hikari.config.HTTPSettings.timeouts", "u": 77, "d": "Settings to control HTTP request timeouts. The behaviour if this is not explicitly defined is to use sane defaults that are most efficient for optimal use of this library. Returns    - HTTPTimeoutSettings The HTTP timeout settings to use for connection timeouts."}, {"r": "hikari.config.CacheSettings", "u": 77, "d": "Settings to control the cache. Method generated by attrs for class CacheSettings."}, {"r": "hikari.config.CacheSettings.emojis", "u": 77, "d": "Whether to enable the emojis cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.enable", "u": 77, "d": "Whether to enable the cache. If set to  False , all the cache functionality will be disabled. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.guild_channels", "u": 77, "d": "Whether to enable the guild channels cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.guilds", "u": 77, "d": "Whether to enable the guilds cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.invites", "u": 77, "d": "Whether to enable the invites cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.max_messages", "u": 77, "d": "The max number of messages to store in the cache at once. This will have no effect if  messages is  builtins.False . Defaults to  300 ."}, {"r": "hikari.config.CacheSettings.members", "u": 77, "d": "Whether to enable the members cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.messages", "u": 77, "d": "Whether to enable the message cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.presences", "u": 77, "d": "Whether to enable the presences cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.roles", "u": 77, "d": "Whether to enable the roles cache. Defaults to  builtins.True ."}, {"r": "hikari.config.CacheSettings.voice_states", "u": 77, "d": "Whether to enable the voice states cache. Defaults to  builtins.True ."}], "urls": ["index.html", "messages.html", "snowflakes.html", "files.html", "colours.html", "emojis.html", "invites.html", "guilds.html", "webhooks.html", "traits.html", "users.html", "audit_logs.html", "events/index.html", "events/voice_events.html", "events/shard_events.html", "events/base_events.html", "events/role_events.html", "events/typing_events.html", "events/reaction_events.html", "events/channel_events.html", "events/message_events.html", "events/user_events.html", "events/lifetime_events.html", "events/guild_events.html", "events/member_events.html", "undefined.html", "cli.html", "channels.html", "sessions.html", "event_stream.html", "iterators.html", "templates.html", "presences.html", "intents.html", "colors.html", "voices.html", "permissions.html", "api/index.html", "api/event_manager.html", "api/rest.html", "api/voice.html", "api/cache.html", "api/shard.html", "api/special_endpoints.html", "api/entity_factory.html", "api/event_factory.html", "urls.html", "errors.html", "internal/index.html", "internal/reflect.html", "internal/time.html", "internal/routes.html", "internal/net.html", "internal/ux.html", "internal/spel.html", "internal/attr_extensions.html", "internal/aio.html", "internal/cache.html", "internal/enums.html", "internal/protocol.html", "internal/data_binding.html", "internal/collections.html", "impl/index.html", "impl/event_manager_base.html", "impl/event_manager.html", "impl/rest.html", "impl/voice.html", "impl/cache.html", "impl/shard.html", "impl/buckets.html", "impl/rate_limits.html", "impl/bot.html", "impl/special_endpoints.html", "impl/entity_factory.html", "impl/event_factory.html", "embeds.html", "applications.html", "config.html"]}